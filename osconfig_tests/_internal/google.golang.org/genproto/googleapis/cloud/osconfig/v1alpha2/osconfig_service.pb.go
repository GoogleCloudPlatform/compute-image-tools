// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google/cloud/osconfig/v1alpha2/osconfig_service.proto

package osconfig

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/genproto/googleapis/iam/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("google/cloud/osconfig/v1alpha2/osconfig_service.proto", fileDescriptor_999bb5d83667ccfb)
}

var fileDescriptor_999bb5d83667ccfb = []byte{
	// 898 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x57, 0x31, 0x93, 0xdb, 0x44,
	0x14, 0x1e, 0xb9, 0xa0, 0x10, 0x24, 0x99, 0xdb, 0x82, 0x30, 0x4e, 0xa0, 0x50, 0x03, 0xe8, 0x12,
	0x6d, 0xe2, 0x8b, 0x21, 0xa7, 0x9b, 0x14, 0x77, 0xb6, 0x31, 0x64, 0x6e, 0x86, 0xe3, 0x18, 0x52,
	0x5c, 0xe3, 0x59, 0xeb, 0x9e, 0x65, 0x05, 0x59, 0xbb, 0x68, 0x57, 0x3e, 0x92, 0xcc, 0x35, 0x54,
	0x34, 0x40, 0xc1, 0x0c, 0x15, 0x0d, 0x3d, 0x0c, 0x35, 0x05, 0x33, 0xd4, 0x94, 0xf0, 0x07, 0x28,
	0x32, 0xc3, 0xf0, 0x23, 0x60, 0x18, 0xad, 0xb4, 0xb2, 0x2c, 0xe7, 0xb4, 0xd6, 0xb9, 0xf2, 0x58,
	0xfb, 0xbe, 0xf7, 0xbe, 0xf7, 0xed, 0xf7, 0x76, 0x25, 0xb3, 0xeb, 0x53, 0xea, 0x87, 0x80, 0xbd,
	0x90, 0x26, 0xa7, 0x98, 0x72, 0x8f, 0x46, 0x93, 0xc0, 0xc7, 0xf3, 0xbb, 0x24, 0x64, 0x53, 0xd2,
	0x29, 0x9e, 0x8c, 0x38, 0xc4, 0xf3, 0xc0, 0x03, 0x87, 0xc5, 0x54, 0x50, 0xf4, 0x46, 0x06, 0x73,
	0x24, 0xcc, 0x51, 0x41, 0x8e, 0x82, 0xb5, 0x6f, 0xe6, 0x69, 0x09, 0x0b, 0x30, 0x89, 0x22, 0x2a,
	0x88, 0x08, 0x68, 0xc4, 0x33, 0x74, 0x7b, 0x47, 0x53, 0xd4, 0x4f, 0x80, 0x8b, 0x11, 0xa3, 0x61,
	0xe0, 0x05, 0xa0, 0x40, 0x58, 0x03, 0x62, 0x44, 0x78, 0xd3, 0xd1, 0x63, 0x3a, 0x56, 0x80, 0x76,
	0x0e, 0x08, 0xc8, 0x0c, 0xcf, 0xef, 0x62, 0x99, 0xee, 0x49, 0xbe, 0x76, 0x23, 0x5f, 0x93, 0xff,
	0xc6, 0xc9, 0x04, 0xc3, 0x8c, 0x09, 0xb5, 0x78, 0xbd, 0x44, 0xde, 0x0b, 0x03, 0x88, 0x44, 0xb6,
	0xd0, 0xf9, 0xfa, 0x35, 0xf3, 0xda, 0x87, 0xbc, 0x27, 0x0b, 0x7f, 0x9c, 0xe9, 0x81, 0x7e, 0x36,
	0xcc, 0x6b, 0x83, 0xcf, 0xc1, 0x4b, 0x04, 0x1c, 0xa5, 0x0c, 0x1e, 0xd2, 0x31, 0x7a, 0xc7, 0xa9,
	0x97, 0xc7, 0xa9, 0x00, 0x8e, 0xe1, 0xb3, 0xb4, 0xe3, 0xf6, 0x5b, 0x3a, 0x9c, 0x02, 0x58, 0xee,
	0x17, 0x7f, 0x3e, 0xff, 0xb6, 0x75, 0xcf, 0xc2, 0x8b, 0xfe, 0x9f, 0x31, 0x12, 0x43, 0x24, 0x1e,
	0xb0, 0x98, 0x3e, 0x06, 0x4f, 0x70, 0x6c, 0x9f, 0x67, 0x9a, 0x3c, 0xa4, 0x63, 0xee, 0x42, 0x56,
	0xd1, 0x35, 0x6c, 0xf4, 0xbd, 0x61, 0xbe, 0x3c, 0x04, 0x51, 0xb0, 0xed, 0xe8, 0xaa, 0x96, 0x82,
	0x9b, 0x33, 0xc5, 0x92, 0xe9, 0xdb, 0xe8, 0xcd, 0x12, 0xd3, 0x88, 0xcc, 0xa0, 0xc4, 0x73, 0x41,
	0x13, 0xdb, 0xe7, 0xe8, 0x47, 0xc3, 0xbc, 0xda, 0x23, 0x91, 0x07, 0x61, 0xc1, 0xb0, 0xab, 0xab,
	0xb6, 0x1c, 0xdf, 0x9c, 0xe4, 0xae, 0x24, 0xb9, 0x63, 0x39, 0x6b, 0x92, 0x74, 0x3d, 0x59, 0x30,
	0x55, 0xf3, 0x27, 0xc3, 0xbc, 0x72, 0x18, 0xf0, 0x42, 0x21, 0x8e, 0xee, 0xe9, 0xca, 0x2e, 0x85,
	0x2b, 0xb2, 0xdd, 0x86, 0x28, 0xce, 0x68, 0xc4, 0xe1, 0x85, 0xf2, 0xd6, 0x19, 0x01, 0x7d, 0xd5,
	0x32, 0x5f, 0x3f, 0x06, 0x46, 0xe3, 0x22, 0xd9, 0x07, 0x11, 0x17, 0x69, 0x3b, 0x7d, 0x10, 0x24,
	0x08, 0x39, 0xea, 0xeb, 0x98, 0xd4, 0xc2, 0x55, 0x3f, 0x83, 0x0d, 0xb3, 0xe4, 0xfd, 0x8d, 0x64,
	0x7f, 0x8f, 0xac, 0x8f, 0x4a, 0xfd, 0xc5, 0xc0, 0x69, 0x12, 0x7b, 0x4b, 0xbb, 0xf3, 0x94, 0x46,
	0x90, 0xfe, 0x06, 0x79, 0x1e, 0xb9, 0x4b, 0x71, 0x5d, 0x09, 0xd7, 0xb0, 0xbf, 0x6c, 0x19, 0xe8,
	0x1f, 0xc3, 0xbc, 0x51, 0x96, 0xb6, 0xaa, 0xc6, 0x41, 0x93, 0x7d, 0xb9, 0x40, 0x8b, 0xde, 0x46,
	0x39, 0x72, 0x25, 0xf6, 0xa5, 0x12, 0x7b, 0x68, 0xb7, 0x6e, 0xa7, 0x97, 0x5c, 0x5a, 0x88, 0xa1,
	0x7a, 0xf9, 0xb5, 0x65, 0x6e, 0xf5, 0x62, 0x20, 0x02, 0x86, 0x29, 0xaf, 0x23, 0x79, 0x22, 0xa2,
	0xfb, 0xda, 0xe9, 0xaa, 0x42, 0x54, 0x5f, 0xdb, 0xda, 0x93, 0x63, 0x81, 0xb1, 0x7e, 0x33, 0x64,
	0x03, 0xbf, 0x18, 0xd6, 0x9d, 0xd5, 0x0e, 0x68, 0xec, 0x93, 0x28, 0x78, 0x9a, 0xdd, 0x12, 0x29,
	0x75, 0xbf, 0x40, 0x06, 0xc0, 0xdd, 0x57, 0x4a, 0x37, 0xc2, 0x93, 0x93, 0x3d, 0x6b, 0xbb, 0xde,
	0xed, 0x75, 0x60, 0xd7, 0xb2, 0x57, 0xc1, 0x13, 0x1a, 0x9e, 0x42, 0xac, 0xc3, 0xa6, 0xb3, 0x73,
	0x75, 0x08, 0xa2, 0x2c, 0x5e, 0x77, 0x8d, 0xc3, 0x73, 0x53, 0xe5, 0xbe, 0xcb, 0x94, 0xfb, 0xc6,
	0x40, 0x77, 0xaa, 0xe7, 0x53, 0x45, 0xb7, 0x65, 0xf6, 0xd8, 0x3e, 0x3f, 0xb9, 0x8d, 0xb6, 0x6b,
	0xce, 0xb4, 0x95, 0xf0, 0x5b, 0xc8, 0xae, 0x86, 0x17, 0xda, 0xac, 0x44, 0xa3, 0x1f, 0x5a, 0xe6,
	0x56, 0x6a, 0xdd, 0x61, 0x79, 0x41, 0xef, 0xa7, 0x15, 0x88, 0x52, 0x65, 0xf7, 0x12, 0xc8, 0x7c,
	0x3a, 0x5e, 0xac, 0xd1, 0x5a, 0xee, 0xaa, 0x68, 0xa4, 0xf3, 0x53, 0x45, 0x23, 0x8d, 0x83, 0xd0,
	0xf3, 0x96, 0xb9, 0xf5, 0x09, 0x3b, 0x6d, 0x3a, 0x73, 0x2b, 0x90, 0x4b, 0x39, 0xe7, 0xef, 0x4c,
	0x95, 0xbf, 0x8c, 0xce, 0x83, 0x12, 0xe5, 0xb2, 0xa7, 0x9d, 0xb5, 0x6c, 0x54, 0x99, 0xa1, 0xf7,
	0x3b, 0xf7, 0x6b, 0xd3, 0xd5, 0x38, 0xac, 0x92, 0x69, 0xd8, 0x79, 0xb7, 0x36, 0xd3, 0xc5, 0xe6,
	0xab, 0x8c, 0xe6, 0x7f, 0x86, 0xb9, 0xd5, 0x87, 0x10, 0x1a, 0xca, 0xbc, 0x02, 0x51, 0x32, 0xbf,
	0xaa, 0x90, 0xea, 0x0d, 0xd1, 0x19, 0xa4, 0x6f, 0x88, 0x0b, 0x9f, 0xd9, 0x97, 0x98, 0x45, 0xbb,
	0xd9, 0x2c, 0xda, 0x4d, 0x66, 0xf1, 0x5f, 0xc3, 0xbc, 0x79, 0x48, 0xe9, 0xa7, 0x09, 0x1b, 0x4c,
	0x26, 0xe0, 0x89, 0x60, 0x0e, 0xcb, 0x63, 0xa9, 0xbf, 0x84, 0x6a, 0xd0, 0x4a, 0x96, 0xfe, 0x66,
	0x49, 0xf2, 0x61, 0x3d, 0x96, 0x1a, 0x1e, 0x5a, 0xc3, 0x52, 0x7f, 0xea, 0xae, 0xd2, 0x5e, 0xea,
	0xa1, 0xac, 0xb0, 0x94, 0xd8, 0x35, 0xec, 0x36, 0xff, 0x7d, 0xff, 0x7a, 0x41, 0x27, 0x23, 0x49,
	0x58, 0xc0, 0x1d, 0x8f, 0xce, 0xfe, 0xd8, 0x7f, 0x34, 0x15, 0x82, 0x71, 0x17, 0xe3, 0xb3, 0xb3,
	0xb3, 0xca, 0x22, 0x26, 0x89, 0x98, 0x66, 0x1f, 0x15, 0xb7, 0x59, 0x48, 0xc4, 0x84, 0xc6, 0xb3,
	0x5b, 0xda, 0x70, 0x3a, 0x63, 0x89, 0x80, 0x83, 0x67, 0xa6, 0xe5, 0xd1, 0x99, 0x46, 0x93, 0x83,
	0x2b, 0xea, 0x9b, 0xe1, 0x28, 0xf5, 0xd2, 0xc9, 0x7b, 0x79, 0xb8, 0x4f, 0x43, 0x12, 0xf9, 0x0e,
	0x8d, 0x7d, 0xec, 0x43, 0x24, 0x7d, 0x86, 0x17, 0xc5, 0x2e, 0xfa, 0xce, 0xd9, 0x53, 0x4f, 0xc6,
	0x2f, 0x49, 0xc8, 0xce, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x84, 0x1d, 0x60, 0x93, 0xc3, 0x0d,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OsConfigServiceClient is the client API for OsConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OsConfigServiceClient interface {
	// Patch GCE instances by creating and running a PatchJob.
	ExecutePatchJob(ctx context.Context, in *ExecutePatchJobRequest, opts ...grpc.CallOption) (*PatchJob, error)
	// Get the patch job. This can be used to track the progress of an
	// ongoing patch job or review the details of completed jobs.
	GetPatchJob(ctx context.Context, in *GetPatchJobRequest, opts ...grpc.CallOption) (*PatchJob, error)
	// Cancel a patch job. The patch job must be active. Canceled patch jobs
	// cannot be restarted.
	CancelPatchJob(ctx context.Context, in *CancelPatchJobRequest, opts ...grpc.CallOption) (*PatchJob, error)
	// Get a page of patch jobs.
	ListPatchJobs(ctx context.Context, in *ListPatchJobsRequest, opts ...grpc.CallOption) (*ListPatchJobsResponse, error)
	// Deprecated:  Should use AgentEndpoint API going forward.  Will be removed
	// in v1beta.
	//
	// Endpoint used by the agent to report back its state during a patch
	// job. This endpoint will also return the patch job's state and
	// configurations that the agent needs to know in order to run or stop
	// patching.
	//
	// This endpoint is only used by the agent. Using it in other ways may
	// affect the state of the active patch job and prevent the patches from
	// being correctly applied to this instance.
	//
	// Deprecated: Do not use.
	ReportPatchJobInstanceDetails(ctx context.Context, in *ReportPatchJobInstanceDetailsRequest, opts ...grpc.CallOption) (*ReportPatchJobInstanceDetailsResponse, error)
	// Get a page of instances' details for a given patch job.
	ListPatchJobInstanceDetails(ctx context.Context, in *ListPatchJobInstanceDetailsRequest, opts ...grpc.CallOption) (*ListPatchJobInstanceDetailsResponse, error)
	// Create an OS Config Guest Policy.
	CreateGuestPolicy(ctx context.Context, in *CreateGuestPolicyRequest, opts ...grpc.CallOption) (*GuestPolicy, error)
	// Get an OS Config GuestPolicy.
	GetGuestPolicy(ctx context.Context, in *GetGuestPolicyRequest, opts ...grpc.CallOption) (*GuestPolicy, error)
	// Get a page of OS Config GuestPolicies.
	ListGuestPolicies(ctx context.Context, in *ListGuestPoliciesRequest, opts ...grpc.CallOption) (*ListGuestPoliciesResponse, error)
	// Update an OS Config GuestPolicy.
	UpdateGuestPolicy(ctx context.Context, in *UpdateGuestPolicyRequest, opts ...grpc.CallOption) (*GuestPolicy, error)
	// Delete an OS Config GuestPolicy.
	DeleteGuestPolicy(ctx context.Context, in *DeleteGuestPolicyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Lookup the guest policies that are assigned to a GCE VM instance. This
	// lookup will merge all policies that are assigned to the instance. This is
	// usually called by the agent running on the instance, but it can also be
	// called by users to see what configs are assigned to this instance.
	LookupEffectiveGuestPolicies(ctx context.Context, in *LookupEffectiveGuestPoliciesRequest, opts ...grpc.CallOption) (*LookupEffectiveGuestPoliciesResponse, error)
}

type osConfigServiceClient struct {
	cc *grpc.ClientConn
}

func NewOsConfigServiceClient(cc *grpc.ClientConn) OsConfigServiceClient {
	return &osConfigServiceClient{cc}
}

func (c *osConfigServiceClient) ExecutePatchJob(ctx context.Context, in *ExecutePatchJobRequest, opts ...grpc.CallOption) (*PatchJob, error) {
	out := new(PatchJob)
	err := c.cc.Invoke(ctx, "/google.cloud.osconfig.v1alpha2.OsConfigService/ExecutePatchJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *osConfigServiceClient) GetPatchJob(ctx context.Context, in *GetPatchJobRequest, opts ...grpc.CallOption) (*PatchJob, error) {
	out := new(PatchJob)
	err := c.cc.Invoke(ctx, "/google.cloud.osconfig.v1alpha2.OsConfigService/GetPatchJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *osConfigServiceClient) CancelPatchJob(ctx context.Context, in *CancelPatchJobRequest, opts ...grpc.CallOption) (*PatchJob, error) {
	out := new(PatchJob)
	err := c.cc.Invoke(ctx, "/google.cloud.osconfig.v1alpha2.OsConfigService/CancelPatchJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *osConfigServiceClient) ListPatchJobs(ctx context.Context, in *ListPatchJobsRequest, opts ...grpc.CallOption) (*ListPatchJobsResponse, error) {
	out := new(ListPatchJobsResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.osconfig.v1alpha2.OsConfigService/ListPatchJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *osConfigServiceClient) ReportPatchJobInstanceDetails(ctx context.Context, in *ReportPatchJobInstanceDetailsRequest, opts ...grpc.CallOption) (*ReportPatchJobInstanceDetailsResponse, error) {
	out := new(ReportPatchJobInstanceDetailsResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.osconfig.v1alpha2.OsConfigService/ReportPatchJobInstanceDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *osConfigServiceClient) ListPatchJobInstanceDetails(ctx context.Context, in *ListPatchJobInstanceDetailsRequest, opts ...grpc.CallOption) (*ListPatchJobInstanceDetailsResponse, error) {
	out := new(ListPatchJobInstanceDetailsResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.osconfig.v1alpha2.OsConfigService/ListPatchJobInstanceDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *osConfigServiceClient) CreateGuestPolicy(ctx context.Context, in *CreateGuestPolicyRequest, opts ...grpc.CallOption) (*GuestPolicy, error) {
	out := new(GuestPolicy)
	err := c.cc.Invoke(ctx, "/google.cloud.osconfig.v1alpha2.OsConfigService/CreateGuestPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *osConfigServiceClient) GetGuestPolicy(ctx context.Context, in *GetGuestPolicyRequest, opts ...grpc.CallOption) (*GuestPolicy, error) {
	out := new(GuestPolicy)
	err := c.cc.Invoke(ctx, "/google.cloud.osconfig.v1alpha2.OsConfigService/GetGuestPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *osConfigServiceClient) ListGuestPolicies(ctx context.Context, in *ListGuestPoliciesRequest, opts ...grpc.CallOption) (*ListGuestPoliciesResponse, error) {
	out := new(ListGuestPoliciesResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.osconfig.v1alpha2.OsConfigService/ListGuestPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *osConfigServiceClient) UpdateGuestPolicy(ctx context.Context, in *UpdateGuestPolicyRequest, opts ...grpc.CallOption) (*GuestPolicy, error) {
	out := new(GuestPolicy)
	err := c.cc.Invoke(ctx, "/google.cloud.osconfig.v1alpha2.OsConfigService/UpdateGuestPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *osConfigServiceClient) DeleteGuestPolicy(ctx context.Context, in *DeleteGuestPolicyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/google.cloud.osconfig.v1alpha2.OsConfigService/DeleteGuestPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *osConfigServiceClient) LookupEffectiveGuestPolicies(ctx context.Context, in *LookupEffectiveGuestPoliciesRequest, opts ...grpc.CallOption) (*LookupEffectiveGuestPoliciesResponse, error) {
	out := new(LookupEffectiveGuestPoliciesResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.osconfig.v1alpha2.OsConfigService/LookupEffectiveGuestPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OsConfigServiceServer is the server API for OsConfigService service.
type OsConfigServiceServer interface {
	// Patch GCE instances by creating and running a PatchJob.
	ExecutePatchJob(context.Context, *ExecutePatchJobRequest) (*PatchJob, error)
	// Get the patch job. This can be used to track the progress of an
	// ongoing patch job or review the details of completed jobs.
	GetPatchJob(context.Context, *GetPatchJobRequest) (*PatchJob, error)
	// Cancel a patch job. The patch job must be active. Canceled patch jobs
	// cannot be restarted.
	CancelPatchJob(context.Context, *CancelPatchJobRequest) (*PatchJob, error)
	// Get a page of patch jobs.
	ListPatchJobs(context.Context, *ListPatchJobsRequest) (*ListPatchJobsResponse, error)
	// Deprecated:  Should use AgentEndpoint API going forward.  Will be removed
	// in v1beta.
	//
	// Endpoint used by the agent to report back its state during a patch
	// job. This endpoint will also return the patch job's state and
	// configurations that the agent needs to know in order to run or stop
	// patching.
	//
	// This endpoint is only used by the agent. Using it in other ways may
	// affect the state of the active patch job and prevent the patches from
	// being correctly applied to this instance.
	//
	// Deprecated: Do not use.
	ReportPatchJobInstanceDetails(context.Context, *ReportPatchJobInstanceDetailsRequest) (*ReportPatchJobInstanceDetailsResponse, error)
	// Get a page of instances' details for a given patch job.
	ListPatchJobInstanceDetails(context.Context, *ListPatchJobInstanceDetailsRequest) (*ListPatchJobInstanceDetailsResponse, error)
	// Create an OS Config Guest Policy.
	CreateGuestPolicy(context.Context, *CreateGuestPolicyRequest) (*GuestPolicy, error)
	// Get an OS Config GuestPolicy.
	GetGuestPolicy(context.Context, *GetGuestPolicyRequest) (*GuestPolicy, error)
	// Get a page of OS Config GuestPolicies.
	ListGuestPolicies(context.Context, *ListGuestPoliciesRequest) (*ListGuestPoliciesResponse, error)
	// Update an OS Config GuestPolicy.
	UpdateGuestPolicy(context.Context, *UpdateGuestPolicyRequest) (*GuestPolicy, error)
	// Delete an OS Config GuestPolicy.
	DeleteGuestPolicy(context.Context, *DeleteGuestPolicyRequest) (*empty.Empty, error)
	// Lookup the guest policies that are assigned to a GCE VM instance. This
	// lookup will merge all policies that are assigned to the instance. This is
	// usually called by the agent running on the instance, but it can also be
	// called by users to see what configs are assigned to this instance.
	LookupEffectiveGuestPolicies(context.Context, *LookupEffectiveGuestPoliciesRequest) (*LookupEffectiveGuestPoliciesResponse, error)
}

// UnimplementedOsConfigServiceServer can be embedded to have forward compatible implementations.
type UnimplementedOsConfigServiceServer struct {
}

func (*UnimplementedOsConfigServiceServer) ExecutePatchJob(ctx context.Context, req *ExecutePatchJobRequest) (*PatchJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecutePatchJob not implemented")
}
func (*UnimplementedOsConfigServiceServer) GetPatchJob(ctx context.Context, req *GetPatchJobRequest) (*PatchJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPatchJob not implemented")
}
func (*UnimplementedOsConfigServiceServer) CancelPatchJob(ctx context.Context, req *CancelPatchJobRequest) (*PatchJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelPatchJob not implemented")
}
func (*UnimplementedOsConfigServiceServer) ListPatchJobs(ctx context.Context, req *ListPatchJobsRequest) (*ListPatchJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPatchJobs not implemented")
}
func (*UnimplementedOsConfigServiceServer) ReportPatchJobInstanceDetails(ctx context.Context, req *ReportPatchJobInstanceDetailsRequest) (*ReportPatchJobInstanceDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportPatchJobInstanceDetails not implemented")
}
func (*UnimplementedOsConfigServiceServer) ListPatchJobInstanceDetails(ctx context.Context, req *ListPatchJobInstanceDetailsRequest) (*ListPatchJobInstanceDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPatchJobInstanceDetails not implemented")
}
func (*UnimplementedOsConfigServiceServer) CreateGuestPolicy(ctx context.Context, req *CreateGuestPolicyRequest) (*GuestPolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGuestPolicy not implemented")
}
func (*UnimplementedOsConfigServiceServer) GetGuestPolicy(ctx context.Context, req *GetGuestPolicyRequest) (*GuestPolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGuestPolicy not implemented")
}
func (*UnimplementedOsConfigServiceServer) ListGuestPolicies(ctx context.Context, req *ListGuestPoliciesRequest) (*ListGuestPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGuestPolicies not implemented")
}
func (*UnimplementedOsConfigServiceServer) UpdateGuestPolicy(ctx context.Context, req *UpdateGuestPolicyRequest) (*GuestPolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGuestPolicy not implemented")
}
func (*UnimplementedOsConfigServiceServer) DeleteGuestPolicy(ctx context.Context, req *DeleteGuestPolicyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGuestPolicy not implemented")
}
func (*UnimplementedOsConfigServiceServer) LookupEffectiveGuestPolicies(ctx context.Context, req *LookupEffectiveGuestPoliciesRequest) (*LookupEffectiveGuestPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupEffectiveGuestPolicies not implemented")
}

func RegisterOsConfigServiceServer(s *grpc.Server, srv OsConfigServiceServer) {
	s.RegisterService(&_OsConfigService_serviceDesc, srv)
}

func _OsConfigService_ExecutePatchJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecutePatchJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OsConfigServiceServer).ExecutePatchJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.osconfig.v1alpha2.OsConfigService/ExecutePatchJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OsConfigServiceServer).ExecutePatchJob(ctx, req.(*ExecutePatchJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OsConfigService_GetPatchJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPatchJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OsConfigServiceServer).GetPatchJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.osconfig.v1alpha2.OsConfigService/GetPatchJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OsConfigServiceServer).GetPatchJob(ctx, req.(*GetPatchJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OsConfigService_CancelPatchJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelPatchJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OsConfigServiceServer).CancelPatchJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.osconfig.v1alpha2.OsConfigService/CancelPatchJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OsConfigServiceServer).CancelPatchJob(ctx, req.(*CancelPatchJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OsConfigService_ListPatchJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPatchJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OsConfigServiceServer).ListPatchJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.osconfig.v1alpha2.OsConfigService/ListPatchJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OsConfigServiceServer).ListPatchJobs(ctx, req.(*ListPatchJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OsConfigService_ReportPatchJobInstanceDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportPatchJobInstanceDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OsConfigServiceServer).ReportPatchJobInstanceDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.osconfig.v1alpha2.OsConfigService/ReportPatchJobInstanceDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OsConfigServiceServer).ReportPatchJobInstanceDetails(ctx, req.(*ReportPatchJobInstanceDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OsConfigService_ListPatchJobInstanceDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPatchJobInstanceDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OsConfigServiceServer).ListPatchJobInstanceDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.osconfig.v1alpha2.OsConfigService/ListPatchJobInstanceDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OsConfigServiceServer).ListPatchJobInstanceDetails(ctx, req.(*ListPatchJobInstanceDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OsConfigService_CreateGuestPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGuestPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OsConfigServiceServer).CreateGuestPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.osconfig.v1alpha2.OsConfigService/CreateGuestPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OsConfigServiceServer).CreateGuestPolicy(ctx, req.(*CreateGuestPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OsConfigService_GetGuestPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGuestPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OsConfigServiceServer).GetGuestPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.osconfig.v1alpha2.OsConfigService/GetGuestPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OsConfigServiceServer).GetGuestPolicy(ctx, req.(*GetGuestPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OsConfigService_ListGuestPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGuestPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OsConfigServiceServer).ListGuestPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.osconfig.v1alpha2.OsConfigService/ListGuestPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OsConfigServiceServer).ListGuestPolicies(ctx, req.(*ListGuestPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OsConfigService_UpdateGuestPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGuestPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OsConfigServiceServer).UpdateGuestPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.osconfig.v1alpha2.OsConfigService/UpdateGuestPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OsConfigServiceServer).UpdateGuestPolicy(ctx, req.(*UpdateGuestPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OsConfigService_DeleteGuestPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGuestPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OsConfigServiceServer).DeleteGuestPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.osconfig.v1alpha2.OsConfigService/DeleteGuestPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OsConfigServiceServer).DeleteGuestPolicy(ctx, req.(*DeleteGuestPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OsConfigService_LookupEffectiveGuestPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupEffectiveGuestPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OsConfigServiceServer).LookupEffectiveGuestPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.osconfig.v1alpha2.OsConfigService/LookupEffectiveGuestPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OsConfigServiceServer).LookupEffectiveGuestPolicies(ctx, req.(*LookupEffectiveGuestPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OsConfigService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.osconfig.v1alpha2.OsConfigService",
	HandlerType: (*OsConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecutePatchJob",
			Handler:    _OsConfigService_ExecutePatchJob_Handler,
		},
		{
			MethodName: "GetPatchJob",
			Handler:    _OsConfigService_GetPatchJob_Handler,
		},
		{
			MethodName: "CancelPatchJob",
			Handler:    _OsConfigService_CancelPatchJob_Handler,
		},
		{
			MethodName: "ListPatchJobs",
			Handler:    _OsConfigService_ListPatchJobs_Handler,
		},
		{
			MethodName: "ReportPatchJobInstanceDetails",
			Handler:    _OsConfigService_ReportPatchJobInstanceDetails_Handler,
		},
		{
			MethodName: "ListPatchJobInstanceDetails",
			Handler:    _OsConfigService_ListPatchJobInstanceDetails_Handler,
		},
		{
			MethodName: "CreateGuestPolicy",
			Handler:    _OsConfigService_CreateGuestPolicy_Handler,
		},
		{
			MethodName: "GetGuestPolicy",
			Handler:    _OsConfigService_GetGuestPolicy_Handler,
		},
		{
			MethodName: "ListGuestPolicies",
			Handler:    _OsConfigService_ListGuestPolicies_Handler,
		},
		{
			MethodName: "UpdateGuestPolicy",
			Handler:    _OsConfigService_UpdateGuestPolicy_Handler,
		},
		{
			MethodName: "DeleteGuestPolicy",
			Handler:    _OsConfigService_DeleteGuestPolicy_Handler,
		},
		{
			MethodName: "LookupEffectiveGuestPolicies",
			Handler:    _OsConfigService_LookupEffectiveGuestPolicies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/osconfig/v1alpha2/osconfig_service.proto",
}
