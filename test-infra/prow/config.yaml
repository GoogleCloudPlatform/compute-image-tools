# plank:
#   job_url_template: 'https://k8s-gubernator.appspot.com/build/kubernetes-jenkins/{{if eq .Spec.Type "presubmit"}}pr-logs/pull{{else if eq .Spec.Type "batch"}}pr-logs/pull{{else}}logs{{end}}{{if ne .Spec.Refs.Org ""}}{{if ne .Spec.Refs.Org "kubernetes"}}/{{.Spec.Refs.Org}}_{{.Spec.Refs.Repo}}{{else if ne .Spec.Refs.Repo "kubernetes"}}/{{.Spec.Refs.Repo}}{{end}}{{end}}{{if eq .Spec.Type "presubmit"}}/{{with index .Spec.Refs.Pulls 0}}{{.Number}}{{end}}{{else if eq .Spec.Type "batch"}}/batch{{end}}/{{.Spec.Job}}/{{.Status.BuildID}}/'
#   report_template: '[Full PR test history](https://k8s-gubernator.appspot.com/pr/{{if eq .Spec.Refs.Org "kubernetes"}}{{if eq .Spec.Refs.Repo "kubernetes"}}{{else}}{{.Spec.Refs.Repo}}/{{end}}{{else}}{{.Spec.Refs.Org}}_{{.Spec.Refs.Repo}}/{{end}}{{with index .Spec.Refs.Pulls 0}}{{.Number}}{{end}}). [Your PR dashboard](https://k8s-gubernator.appspot.com/pr/{{with index .Spec.Refs.Pulls 0}}{{.Author}}{{end}}). Please help us cut down on flakes by [linking to](https://github.com/kubernetes/community/blob/master/contributors/devel/flaky-tests.md#filing-issues-for-flaky-tests) an [open issue](https://github.com/{{.Spec.Refs.Org}}/{{.Spec.Refs.Repo}}/issues?q=is:issue+is:open) when you hit one in your PR.'

sinker:
 resync_period: 1h
 max_prowjob_age: 48h
 max_pod_age: 12h

prowjob_namespace: default
pod_namespace: test-pods

triggers:
- repos:
  - GoogleCloudPlatform/compute-image-tools
  trusted_org: GoogleCloudPlatform

# PR job triggering definitions.
# Keys: Full repo name: "org/repo".
# Values: List of jobs to run when events occur in the repo.
#   name:          Job name.
#   trigger:       Regexp commenters can say to trigger the job.
#   always_run:    Whether to run for every PR. Default is false.
#   context:       GitHub status context.
#   rerun_command: How should users trigger just this job, as a string, not a
#                  regex. For example, if the trigger regex is "(e2e )?test",
#                  then a rerun command might be "e2e test".
#   skip_report:   If true, then do not set status or comment on GitHub.
#   spec:          If this exists then run a kubernetes pod with this spec.
#                  Otherwise, run a Jenkins job.
#// Presubmit is the job-specific trigger info.
#type Presubmit struct {
#	// eg kubernetes-pull-build-test-e2e-gce
#	Name string `json:"name"`
#	// Run for every PR, or only when a comment triggers it.
#	AlwaysRun bool `json:"always_run"`
#	// Run if the PR modifies a file that matches this regex.
#	RunIfChanged string `json:"run_if_changed"`
#	// Context line for GitHub status.
#	Context string `json:"context"`
#	// eg @k8s-bot e2e test this
#	Trigger string `json:"trigger"`
#	// Valid rerun command to give users. Must match Trigger.
#	RerunCommand string `json:"rerun_command"`
#	// Whether or not to skip commenting and setting status on GitHub.
#	SkipReport bool `json:"skip_report"`
#	// Maximum number of this job running concurrently, 0 implies no limit.
#	MaxConcurrency int `json:"max_concurrency"`
#	// Agent that will take care of running this job.
#	Agent string `json:"agent"`
#	// Kubernetes pod spec.
#	Spec *kube.PodSpec `json:"spec,omitempty"`
#	// Run these jobs after successfully running this one.
#	RunAfterSuccess []Presubmit `json:"run_after_success"`
#
#	Brancher
#
#	// We'll set these when we load it.
#	re        *regexp.Regexp // from RerunCommand
#	reChanges *regexp.Regexp // from RunIfChanged
#}
presubmits:
 GoogleCloudPlatform/compute-image-tools:
 - name: unit-tests
   agent: kubernetes
   always_run: true
   trigger: "(?m)^/test( unit-tests)?"
   rerun_command: "/test unit-tests"
   context: unit-tests
   spec:
    containers:
    - image: gcr.io/gce-daisy-test/prowjob:latest
      args:
      - "--action=unit_tests"
      - "--pr=$(PULL_NUMBER)"
      volumeMounts:
      - name: service
        mountPath: /etc/service-account
        readOnly: true
    volumes:
    - name: service
      secret:
       secretName: service-account

# // Periodic runs on a timer.
# type Periodic struct {
# 	Name string `json:"name"`
# 	// Agent that will take care of running this job.
# 	Agent string `json:"agent"`
# 	// Kubernetes pod spec.
# 	Spec *kube.PodSpec `json:"spec,omitempty"`
# 	// Interval to wait between two runs of the job.
# 	Interval string   `json:"interval"`
# 	Tags     []string `json:"tags,omitempty"`
# 	// Run these jobs after successfully running this one.
# 	RunAfterSuccess []Periodic `json:"run_after_success"`
#
# 	interval time.Duration
# }
periodics:
 - interval: 6h
   agent: kubernetes
   name: ci-e2e-image-import-tests
   spec:
    containers:
    - image: gcr.io/gce-daisy-test/prowjob:latest
      args:
      - "--action=e2e_tests"
      - "--tests=e2e_tests"
      volumeMounts:
      - name: service
        mountPath: /etc/service-account
        readOnly: true
    volumes:
    - name: service
      secret:
       secretName: service-account
