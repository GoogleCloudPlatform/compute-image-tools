// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package ovfdomainmocks is a generated GoMock package.
package ovfdomainmocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/GoogleCloudPlatform/compute-image-tools/cli_tools/common/domain"
	importer "github.com/GoogleCloudPlatform/compute-image-tools/cli_tools/common/image/importer"
	logging "github.com/GoogleCloudPlatform/compute-image-tools/cli_tools/common/utils/logging"
	domain0 "github.com/GoogleCloudPlatform/compute-image-tools/cli_tools/gce_ovf_import/domain"
	gomock "github.com/golang/mock/gomock"
	ovf "github.com/vmware/govmomi/ovf"
)

// MockOvfDescriptorValidatorInterface is a mock of OvfDescriptorValidatorInterface interface.
type MockOvfDescriptorValidatorInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOvfDescriptorValidatorInterfaceMockRecorder
}

// MockOvfDescriptorValidatorInterfaceMockRecorder is the mock recorder for MockOvfDescriptorValidatorInterface.
type MockOvfDescriptorValidatorInterfaceMockRecorder struct {
	mock *MockOvfDescriptorValidatorInterface
}

// NewMockOvfDescriptorValidatorInterface creates a new mock instance.
func NewMockOvfDescriptorValidatorInterface(ctrl *gomock.Controller) *MockOvfDescriptorValidatorInterface {
	mock := &MockOvfDescriptorValidatorInterface{ctrl: ctrl}
	mock.recorder = &MockOvfDescriptorValidatorInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOvfDescriptorValidatorInterface) EXPECT() *MockOvfDescriptorValidatorInterfaceMockRecorder {
	return m.recorder
}

// ValidateOvfPackage mocks base method.
func (m *MockOvfDescriptorValidatorInterface) ValidateOvfPackage(ovfDescriptor *ovf.Envelope, ovfGcsPath string) (*ovf.Envelope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateOvfPackage", ovfDescriptor, ovfGcsPath)
	ret0, _ := ret[0].(*ovf.Envelope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateOvfPackage indicates an expected call of ValidateOvfPackage.
func (mr *MockOvfDescriptorValidatorInterfaceMockRecorder) ValidateOvfPackage(ovfDescriptor, ovfGcsPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateOvfPackage", reflect.TypeOf((*MockOvfDescriptorValidatorInterface)(nil).ValidateOvfPackage), ovfDescriptor, ovfGcsPath)
}

// MockOvfDescriptorLoaderInterface is a mock of OvfDescriptorLoaderInterface interface.
type MockOvfDescriptorLoaderInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOvfDescriptorLoaderInterfaceMockRecorder
}

// MockOvfDescriptorLoaderInterfaceMockRecorder is the mock recorder for MockOvfDescriptorLoaderInterface.
type MockOvfDescriptorLoaderInterfaceMockRecorder struct {
	mock *MockOvfDescriptorLoaderInterface
}

// NewMockOvfDescriptorLoaderInterface creates a new mock instance.
func NewMockOvfDescriptorLoaderInterface(ctrl *gomock.Controller) *MockOvfDescriptorLoaderInterface {
	mock := &MockOvfDescriptorLoaderInterface{ctrl: ctrl}
	mock.recorder = &MockOvfDescriptorLoaderInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOvfDescriptorLoaderInterface) EXPECT() *MockOvfDescriptorLoaderInterfaceMockRecorder {
	return m.recorder
}

// Load mocks base method.
func (m *MockOvfDescriptorLoaderInterface) Load(ovfGcsPath string) (*ovf.Envelope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", ovfGcsPath)
	ret0, _ := ret[0].(*ovf.Envelope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockOvfDescriptorLoaderInterfaceMockRecorder) Load(ovfGcsPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockOvfDescriptorLoaderInterface)(nil).Load), ovfGcsPath)
}

// MockMachineTypeProviderInterface is a mock of MachineTypeProviderInterface interface.
type MockMachineTypeProviderInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMachineTypeProviderInterfaceMockRecorder
}

// MockMachineTypeProviderInterfaceMockRecorder is the mock recorder for MockMachineTypeProviderInterface.
type MockMachineTypeProviderInterfaceMockRecorder struct {
	mock *MockMachineTypeProviderInterface
}

// NewMockMachineTypeProviderInterface creates a new mock instance.
func NewMockMachineTypeProviderInterface(ctrl *gomock.Controller) *MockMachineTypeProviderInterface {
	mock := &MockMachineTypeProviderInterface{ctrl: ctrl}
	mock.recorder = &MockMachineTypeProviderInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachineTypeProviderInterface) EXPECT() *MockMachineTypeProviderInterfaceMockRecorder {
	return m.recorder
}

// GetMachineType mocks base method.
func (m *MockMachineTypeProviderInterface) GetMachineType() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineType")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineType indicates an expected call of GetMachineType.
func (mr *MockMachineTypeProviderInterfaceMockRecorder) GetMachineType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineType", reflect.TypeOf((*MockMachineTypeProviderInterface)(nil).GetMachineType))
}

// MockDiskImporterInterface is a mock of DiskImporterInterface interface.
type MockDiskImporterInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDiskImporterInterfaceMockRecorder
}

// MockDiskImporterInterfaceMockRecorder is the mock recorder for MockDiskImporterInterface.
type MockDiskImporterInterfaceMockRecorder struct {
	mock *MockDiskImporterInterface
}

// NewMockDiskImporterInterface creates a new mock instance.
func NewMockDiskImporterInterface(ctrl *gomock.Controller) *MockDiskImporterInterface {
	mock := &MockDiskImporterInterface{ctrl: ctrl}
	mock.recorder = &MockDiskImporterInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiskImporterInterface) EXPECT() *MockDiskImporterInterfaceMockRecorder {
	return m.recorder
}

// Import mocks base method.
func (m *MockDiskImporterInterface) Import(arg0 context.Context, arg1 importer.ImageImportRequest, arg2 logging.Logger) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Import", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Import indicates an expected call of Import.
func (mr *MockDiskImporterInterfaceMockRecorder) Import(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Import", reflect.TypeOf((*MockDiskImporterInterface)(nil).Import), arg0, arg1, arg2)
}

// MockMultiDiskImporterInterface is a mock of MultiDiskImporterInterface interface.
type MockMultiDiskImporterInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMultiDiskImporterInterfaceMockRecorder
}

// MockMultiDiskImporterInterfaceMockRecorder is the mock recorder for MockMultiDiskImporterInterface.
type MockMultiDiskImporterInterfaceMockRecorder struct {
	mock *MockMultiDiskImporterInterface
}

// NewMockMultiDiskImporterInterface creates a new mock instance.
func NewMockMultiDiskImporterInterface(ctrl *gomock.Controller) *MockMultiDiskImporterInterface {
	mock := &MockMultiDiskImporterInterface{ctrl: ctrl}
	mock.recorder = &MockMultiDiskImporterInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMultiDiskImporterInterface) EXPECT() *MockMultiDiskImporterInterfaceMockRecorder {
	return m.recorder
}

// Import mocks base method.
func (m *MockMultiDiskImporterInterface) Import(ctx context.Context, params *domain0.OVFImportParams, fileURIs []string) ([]domain.Disk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Import", ctx, params, fileURIs)
	ret0, _ := ret[0].([]domain.Disk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Import indicates an expected call of Import.
func (mr *MockMultiDiskImporterInterfaceMockRecorder) Import(ctx, params, fileURIs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Import", reflect.TypeOf((*MockMultiDiskImporterInterface)(nil).Import), ctx, params, fileURIs)
}
