// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google/cloud/osconfig/v1alpha1/osconfig_service.proto

package osconfig

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import v1 "google.golang.org/genproto/googleapis/iam/v1"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Type of configuration system(s) the instance is using.
type LookupConfigsRequest_ConfigType int32

const (
	// Invalid. Config type must be specified.
	LookupConfigsRequest_CONFIG_TYPE_UNSPECIFIED LookupConfigsRequest_ConfigType = 0
	// This instance runs apt.
	LookupConfigsRequest_APT LookupConfigsRequest_ConfigType = 1
	// This instance runs yum.
	LookupConfigsRequest_YUM LookupConfigsRequest_ConfigType = 2
	// This instance runs googet.
	LookupConfigsRequest_GOO LookupConfigsRequest_ConfigType = 3
	// This instance runs Windows Update.
	LookupConfigsRequest_WINDOWS_UPDATE LookupConfigsRequest_ConfigType = 4
)

var LookupConfigsRequest_ConfigType_name = map[int32]string{
	0: "CONFIG_TYPE_UNSPECIFIED",
	1: "APT",
	2: "YUM",
	3: "GOO",
	4: "WINDOWS_UPDATE",
}
var LookupConfigsRequest_ConfigType_value = map[string]int32{
	"CONFIG_TYPE_UNSPECIFIED": 0,
	"APT":            1,
	"YUM":            2,
	"GOO":            3,
	"WINDOWS_UPDATE": 4,
}

func (x LookupConfigsRequest_ConfigType) String() string {
	return proto.EnumName(LookupConfigsRequest_ConfigType_name, int32(x))
}
func (LookupConfigsRequest_ConfigType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_osconfig_service_ca6ce28c202d3abe, []int{0, 0}
}

// A request message for getting the configs assigned to the instance.
type LookupConfigsRequest struct {
	// The resource name for the instance.
	Resource string `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	// Optional. OS info about the instance that can be used to filter its
	// configs. If none is provided, the API will return the configs for this
	// instance regardless of its OS.
	OsInfo *LookupConfigsRequest_OsInfo `protobuf:"bytes,2,opt,name=os_info,json=osInfo,proto3" json:"os_info,omitempty"`
	// Types of configuration system the instance is using. Only configs relevant
	// to these configuration types will be returned.
	ConfigTypes          []LookupConfigsRequest_ConfigType `protobuf:"varint,5,rep,packed,name=config_types,json=configTypes,proto3,enum=google.cloud.osconfig.v1alpha1.LookupConfigsRequest_ConfigType" json:"config_types,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *LookupConfigsRequest) Reset()         { *m = LookupConfigsRequest{} }
func (m *LookupConfigsRequest) String() string { return proto.CompactTextString(m) }
func (*LookupConfigsRequest) ProtoMessage()    {}
func (*LookupConfigsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_osconfig_service_ca6ce28c202d3abe, []int{0}
}
func (m *LookupConfigsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LookupConfigsRequest.Unmarshal(m, b)
}
func (m *LookupConfigsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LookupConfigsRequest.Marshal(b, m, deterministic)
}
func (dst *LookupConfigsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupConfigsRequest.Merge(dst, src)
}
func (m *LookupConfigsRequest) XXX_Size() int {
	return xxx_messageInfo_LookupConfigsRequest.Size(m)
}
func (m *LookupConfigsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupConfigsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LookupConfigsRequest proto.InternalMessageInfo

func (m *LookupConfigsRequest) GetResource() string {
	if m != nil {
		return m.Resource
	}
	return ""
}

func (m *LookupConfigsRequest) GetOsInfo() *LookupConfigsRequest_OsInfo {
	if m != nil {
		return m.OsInfo
	}
	return nil
}

func (m *LookupConfigsRequest) GetConfigTypes() []LookupConfigsRequest_ConfigType {
	if m != nil {
		return m.ConfigTypes
	}
	return nil
}

// Guest information provided to service by agent when requesting
// configurations.
type LookupConfigsRequest_OsInfo struct {
	// OS long name. Optional.
	OsLongName string `protobuf:"bytes,1,opt,name=os_long_name,json=osLongName,proto3" json:"os_long_name,omitempty"`
	// OS short name. Optional.
	OsShortName string `protobuf:"bytes,2,opt,name=os_short_name,json=osShortName,proto3" json:"os_short_name,omitempty"`
	// OS version. Optional.
	OsVersion string `protobuf:"bytes,3,opt,name=os_version,json=osVersion,proto3" json:"os_version,omitempty"`
	// OS kernel name. Optional.
	OsKernel string `protobuf:"bytes,4,opt,name=os_kernel,json=osKernel,proto3" json:"os_kernel,omitempty"`
	// Architecture of the OS. Optional.
	OsArchitecture       string   `protobuf:"bytes,5,opt,name=os_architecture,json=osArchitecture,proto3" json:"os_architecture,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LookupConfigsRequest_OsInfo) Reset()         { *m = LookupConfigsRequest_OsInfo{} }
func (m *LookupConfigsRequest_OsInfo) String() string { return proto.CompactTextString(m) }
func (*LookupConfigsRequest_OsInfo) ProtoMessage()    {}
func (*LookupConfigsRequest_OsInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_osconfig_service_ca6ce28c202d3abe, []int{0, 0}
}
func (m *LookupConfigsRequest_OsInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LookupConfigsRequest_OsInfo.Unmarshal(m, b)
}
func (m *LookupConfigsRequest_OsInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LookupConfigsRequest_OsInfo.Marshal(b, m, deterministic)
}
func (dst *LookupConfigsRequest_OsInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupConfigsRequest_OsInfo.Merge(dst, src)
}
func (m *LookupConfigsRequest_OsInfo) XXX_Size() int {
	return xxx_messageInfo_LookupConfigsRequest_OsInfo.Size(m)
}
func (m *LookupConfigsRequest_OsInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupConfigsRequest_OsInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LookupConfigsRequest_OsInfo proto.InternalMessageInfo

func (m *LookupConfigsRequest_OsInfo) GetOsLongName() string {
	if m != nil {
		return m.OsLongName
	}
	return ""
}

func (m *LookupConfigsRequest_OsInfo) GetOsShortName() string {
	if m != nil {
		return m.OsShortName
	}
	return ""
}

func (m *LookupConfigsRequest_OsInfo) GetOsVersion() string {
	if m != nil {
		return m.OsVersion
	}
	return ""
}

func (m *LookupConfigsRequest_OsInfo) GetOsKernel() string {
	if m != nil {
		return m.OsKernel
	}
	return ""
}

func (m *LookupConfigsRequest_OsInfo) GetOsArchitecture() string {
	if m != nil {
		return m.OsArchitecture
	}
	return ""
}

// Response with assigned configs for the instance.
type LookupConfigsResponse struct {
	// Configs for apt.
	Apt *AptPackageConfig `protobuf:"bytes,1,opt,name=apt,proto3" json:"apt,omitempty"`
	// Configs for yum.
	Yum *YumPackageConfig `protobuf:"bytes,2,opt,name=yum,proto3" json:"yum,omitempty"`
	// Configs for windows.
	Goo *GooPackageConfig `protobuf:"bytes,3,opt,name=goo,proto3" json:"goo,omitempty"`
	// Configs for Windows Update.
	WindowsUpdate        *WindowsUpdateConfig `protobuf:"bytes,4,opt,name=windows_update,json=windowsUpdate,proto3" json:"windows_update,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *LookupConfigsResponse) Reset()         { *m = LookupConfigsResponse{} }
func (m *LookupConfigsResponse) String() string { return proto.CompactTextString(m) }
func (*LookupConfigsResponse) ProtoMessage()    {}
func (*LookupConfigsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_osconfig_service_ca6ce28c202d3abe, []int{1}
}
func (m *LookupConfigsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LookupConfigsResponse.Unmarshal(m, b)
}
func (m *LookupConfigsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LookupConfigsResponse.Marshal(b, m, deterministic)
}
func (dst *LookupConfigsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupConfigsResponse.Merge(dst, src)
}
func (m *LookupConfigsResponse) XXX_Size() int {
	return xxx_messageInfo_LookupConfigsResponse.Size(m)
}
func (m *LookupConfigsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupConfigsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LookupConfigsResponse proto.InternalMessageInfo

func (m *LookupConfigsResponse) GetApt() *AptPackageConfig {
	if m != nil {
		return m.Apt
	}
	return nil
}

func (m *LookupConfigsResponse) GetYum() *YumPackageConfig {
	if m != nil {
		return m.Yum
	}
	return nil
}

func (m *LookupConfigsResponse) GetGoo() *GooPackageConfig {
	if m != nil {
		return m.Goo
	}
	return nil
}

func (m *LookupConfigsResponse) GetWindowsUpdate() *WindowsUpdateConfig {
	if m != nil {
		return m.WindowsUpdate
	}
	return nil
}

func init() {
	proto.RegisterType((*LookupConfigsRequest)(nil), "google.cloud.osconfig.v1alpha1.LookupConfigsRequest")
	proto.RegisterType((*LookupConfigsRequest_OsInfo)(nil), "google.cloud.osconfig.v1alpha1.LookupConfigsRequest.OsInfo")
	proto.RegisterType((*LookupConfigsResponse)(nil), "google.cloud.osconfig.v1alpha1.LookupConfigsResponse")
	proto.RegisterEnum("google.cloud.osconfig.v1alpha1.LookupConfigsRequest_ConfigType", LookupConfigsRequest_ConfigType_name, LookupConfigsRequest_ConfigType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OsConfigServiceClient is the client API for OsConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OsConfigServiceClient interface {
	// Create an OsConfig.
	CreateOsConfig(ctx context.Context, in *CreateOsConfigRequest, opts ...grpc.CallOption) (*OsConfig, error)
	// Get an OsConfig.
	GetOsConfig(ctx context.Context, in *GetOsConfigRequest, opts ...grpc.CallOption) (*OsConfig, error)
	// Get a page of OsConfigs.
	ListOsConfigs(ctx context.Context, in *ListOsConfigsRequest, opts ...grpc.CallOption) (*ListOsConfigsResponse, error)
	// Update an OsConfig.
	UpdateOsConfig(ctx context.Context, in *UpdateOsConfigRequest, opts ...grpc.CallOption) (*OsConfig, error)
	// Delete an OsConfig.
	DeleteOsConfig(ctx context.Context, in *DeleteOsConfigRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Create an OS Config PatchPolicy.
	CreatePatchPolicy(ctx context.Context, in *CreatePatchPolicyRequest, opts ...grpc.CallOption) (*PatchPolicy, error)
	// Get a PatchPolicy.
	GetPatchPolicy(ctx context.Context, in *GetPatchPolicyRequest, opts ...grpc.CallOption) (*PatchPolicy, error)
	// Get a page of PatchPolicies.
	ListPatchPolicies(ctx context.Context, in *ListPatchPoliciesRequest, opts ...grpc.CallOption) (*ListPatchPoliciesResponse, error)
	// Update a PatchPolicy.
	UpdatePatchPolicy(ctx context.Context, in *UpdatePatchPolicyRequest, opts ...grpc.CallOption) (*PatchPolicy, error)
	// Delete a PatchPolicy.
	DeletePatchPolicy(ctx context.Context, in *DeletePatchPolicyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Create an OS Config Assignment.
	CreateAssignment(ctx context.Context, in *CreateAssignmentRequest, opts ...grpc.CallOption) (*Assignment, error)
	// Get an OS Config Assignment.
	GetAssignment(ctx context.Context, in *GetAssignmentRequest, opts ...grpc.CallOption) (*Assignment, error)
	// Get a page of OS Config Assignments.
	ListAssignments(ctx context.Context, in *ListAssignmentsRequest, opts ...grpc.CallOption) (*ListAssignmentsResponse, error)
	// Update an OS Config Assignment.
	UpdateAssignment(ctx context.Context, in *UpdateAssignmentRequest, opts ...grpc.CallOption) (*Assignment, error)
	// Delete an OS Config Assignment.
	DeleteAssignment(ctx context.Context, in *DeleteAssignmentRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Gets the access control policy for an OsConfig or an OS Config Assignment.
	// Returns NOT_FOUND error if the OsConfig does not exist. Returns an empty
	// policy if the resource exists but does not have a policy set.
	GetIamPolicy(ctx context.Context, in *v1.GetIamPolicyRequest, opts ...grpc.CallOption) (*v1.Policy, error)
	// Sets the access control policy for an OsConfig or an OS Config Assignment.
	// Replaces any existing policy.
	SetIamPolicy(ctx context.Context, in *v1.SetIamPolicyRequest, opts ...grpc.CallOption) (*v1.Policy, error)
	// Test the access control policy for an OsConfig or an OS Config Assignment.
	TestIamPermissions(ctx context.Context, in *v1.TestIamPermissionsRequest, opts ...grpc.CallOption) (*v1.TestIamPermissionsResponse, error)
	// Lookup the configs that are assigned to an instance. This lookup
	// will merge all configs that are assigned to the instance resolving
	// conflicts as necessary.
	// This is usually called by the agent running on the instance but can be
	// called directly to see what configs
	// This
	LookupConfigs(ctx context.Context, in *LookupConfigsRequest, opts ...grpc.CallOption) (*LookupConfigsResponse, error)
}

type osConfigServiceClient struct {
	cc *grpc.ClientConn
}

func NewOsConfigServiceClient(cc *grpc.ClientConn) OsConfigServiceClient {
	return &osConfigServiceClient{cc}
}

func (c *osConfigServiceClient) CreateOsConfig(ctx context.Context, in *CreateOsConfigRequest, opts ...grpc.CallOption) (*OsConfig, error) {
	out := new(OsConfig)
	err := c.cc.Invoke(ctx, "/google.cloud.osconfig.v1alpha1.OsConfigService/CreateOsConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *osConfigServiceClient) GetOsConfig(ctx context.Context, in *GetOsConfigRequest, opts ...grpc.CallOption) (*OsConfig, error) {
	out := new(OsConfig)
	err := c.cc.Invoke(ctx, "/google.cloud.osconfig.v1alpha1.OsConfigService/GetOsConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *osConfigServiceClient) ListOsConfigs(ctx context.Context, in *ListOsConfigsRequest, opts ...grpc.CallOption) (*ListOsConfigsResponse, error) {
	out := new(ListOsConfigsResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.osconfig.v1alpha1.OsConfigService/ListOsConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *osConfigServiceClient) UpdateOsConfig(ctx context.Context, in *UpdateOsConfigRequest, opts ...grpc.CallOption) (*OsConfig, error) {
	out := new(OsConfig)
	err := c.cc.Invoke(ctx, "/google.cloud.osconfig.v1alpha1.OsConfigService/UpdateOsConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *osConfigServiceClient) DeleteOsConfig(ctx context.Context, in *DeleteOsConfigRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/google.cloud.osconfig.v1alpha1.OsConfigService/DeleteOsConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *osConfigServiceClient) CreatePatchPolicy(ctx context.Context, in *CreatePatchPolicyRequest, opts ...grpc.CallOption) (*PatchPolicy, error) {
	out := new(PatchPolicy)
	err := c.cc.Invoke(ctx, "/google.cloud.osconfig.v1alpha1.OsConfigService/CreatePatchPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *osConfigServiceClient) GetPatchPolicy(ctx context.Context, in *GetPatchPolicyRequest, opts ...grpc.CallOption) (*PatchPolicy, error) {
	out := new(PatchPolicy)
	err := c.cc.Invoke(ctx, "/google.cloud.osconfig.v1alpha1.OsConfigService/GetPatchPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *osConfigServiceClient) ListPatchPolicies(ctx context.Context, in *ListPatchPoliciesRequest, opts ...grpc.CallOption) (*ListPatchPoliciesResponse, error) {
	out := new(ListPatchPoliciesResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.osconfig.v1alpha1.OsConfigService/ListPatchPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *osConfigServiceClient) UpdatePatchPolicy(ctx context.Context, in *UpdatePatchPolicyRequest, opts ...grpc.CallOption) (*PatchPolicy, error) {
	out := new(PatchPolicy)
	err := c.cc.Invoke(ctx, "/google.cloud.osconfig.v1alpha1.OsConfigService/UpdatePatchPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *osConfigServiceClient) DeletePatchPolicy(ctx context.Context, in *DeletePatchPolicyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/google.cloud.osconfig.v1alpha1.OsConfigService/DeletePatchPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *osConfigServiceClient) CreateAssignment(ctx context.Context, in *CreateAssignmentRequest, opts ...grpc.CallOption) (*Assignment, error) {
	out := new(Assignment)
	err := c.cc.Invoke(ctx, "/google.cloud.osconfig.v1alpha1.OsConfigService/CreateAssignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *osConfigServiceClient) GetAssignment(ctx context.Context, in *GetAssignmentRequest, opts ...grpc.CallOption) (*Assignment, error) {
	out := new(Assignment)
	err := c.cc.Invoke(ctx, "/google.cloud.osconfig.v1alpha1.OsConfigService/GetAssignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *osConfigServiceClient) ListAssignments(ctx context.Context, in *ListAssignmentsRequest, opts ...grpc.CallOption) (*ListAssignmentsResponse, error) {
	out := new(ListAssignmentsResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.osconfig.v1alpha1.OsConfigService/ListAssignments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *osConfigServiceClient) UpdateAssignment(ctx context.Context, in *UpdateAssignmentRequest, opts ...grpc.CallOption) (*Assignment, error) {
	out := new(Assignment)
	err := c.cc.Invoke(ctx, "/google.cloud.osconfig.v1alpha1.OsConfigService/UpdateAssignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *osConfigServiceClient) DeleteAssignment(ctx context.Context, in *DeleteAssignmentRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/google.cloud.osconfig.v1alpha1.OsConfigService/DeleteAssignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *osConfigServiceClient) GetIamPolicy(ctx context.Context, in *v1.GetIamPolicyRequest, opts ...grpc.CallOption) (*v1.Policy, error) {
	out := new(v1.Policy)
	err := c.cc.Invoke(ctx, "/google.cloud.osconfig.v1alpha1.OsConfigService/GetIamPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *osConfigServiceClient) SetIamPolicy(ctx context.Context, in *v1.SetIamPolicyRequest, opts ...grpc.CallOption) (*v1.Policy, error) {
	out := new(v1.Policy)
	err := c.cc.Invoke(ctx, "/google.cloud.osconfig.v1alpha1.OsConfigService/SetIamPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *osConfigServiceClient) TestIamPermissions(ctx context.Context, in *v1.TestIamPermissionsRequest, opts ...grpc.CallOption) (*v1.TestIamPermissionsResponse, error) {
	out := new(v1.TestIamPermissionsResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.osconfig.v1alpha1.OsConfigService/TestIamPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *osConfigServiceClient) LookupConfigs(ctx context.Context, in *LookupConfigsRequest, opts ...grpc.CallOption) (*LookupConfigsResponse, error) {
	out := new(LookupConfigsResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.osconfig.v1alpha1.OsConfigService/LookupConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OsConfigServiceServer is the server API for OsConfigService service.
type OsConfigServiceServer interface {
	// Create an OsConfig.
	CreateOsConfig(context.Context, *CreateOsConfigRequest) (*OsConfig, error)
	// Get an OsConfig.
	GetOsConfig(context.Context, *GetOsConfigRequest) (*OsConfig, error)
	// Get a page of OsConfigs.
	ListOsConfigs(context.Context, *ListOsConfigsRequest) (*ListOsConfigsResponse, error)
	// Update an OsConfig.
	UpdateOsConfig(context.Context, *UpdateOsConfigRequest) (*OsConfig, error)
	// Delete an OsConfig.
	DeleteOsConfig(context.Context, *DeleteOsConfigRequest) (*empty.Empty, error)
	// Create an OS Config PatchPolicy.
	CreatePatchPolicy(context.Context, *CreatePatchPolicyRequest) (*PatchPolicy, error)
	// Get a PatchPolicy.
	GetPatchPolicy(context.Context, *GetPatchPolicyRequest) (*PatchPolicy, error)
	// Get a page of PatchPolicies.
	ListPatchPolicies(context.Context, *ListPatchPoliciesRequest) (*ListPatchPoliciesResponse, error)
	// Update a PatchPolicy.
	UpdatePatchPolicy(context.Context, *UpdatePatchPolicyRequest) (*PatchPolicy, error)
	// Delete a PatchPolicy.
	DeletePatchPolicy(context.Context, *DeletePatchPolicyRequest) (*empty.Empty, error)
	// Create an OS Config Assignment.
	CreateAssignment(context.Context, *CreateAssignmentRequest) (*Assignment, error)
	// Get an OS Config Assignment.
	GetAssignment(context.Context, *GetAssignmentRequest) (*Assignment, error)
	// Get a page of OS Config Assignments.
	ListAssignments(context.Context, *ListAssignmentsRequest) (*ListAssignmentsResponse, error)
	// Update an OS Config Assignment.
	UpdateAssignment(context.Context, *UpdateAssignmentRequest) (*Assignment, error)
	// Delete an OS Config Assignment.
	DeleteAssignment(context.Context, *DeleteAssignmentRequest) (*empty.Empty, error)
	// Gets the access control policy for an OsConfig or an OS Config Assignment.
	// Returns NOT_FOUND error if the OsConfig does not exist. Returns an empty
	// policy if the resource exists but does not have a policy set.
	GetIamPolicy(context.Context, *v1.GetIamPolicyRequest) (*v1.Policy, error)
	// Sets the access control policy for an OsConfig or an OS Config Assignment.
	// Replaces any existing policy.
	SetIamPolicy(context.Context, *v1.SetIamPolicyRequest) (*v1.Policy, error)
	// Test the access control policy for an OsConfig or an OS Config Assignment.
	TestIamPermissions(context.Context, *v1.TestIamPermissionsRequest) (*v1.TestIamPermissionsResponse, error)
	// Lookup the configs that are assigned to an instance. This lookup
	// will merge all configs that are assigned to the instance resolving
	// conflicts as necessary.
	// This is usually called by the agent running on the instance but can be
	// called directly to see what configs
	// This
	LookupConfigs(context.Context, *LookupConfigsRequest) (*LookupConfigsResponse, error)
}

func RegisterOsConfigServiceServer(s *grpc.Server, srv OsConfigServiceServer) {
	s.RegisterService(&_OsConfigService_serviceDesc, srv)
}

func _OsConfigService_CreateOsConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOsConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OsConfigServiceServer).CreateOsConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.osconfig.v1alpha1.OsConfigService/CreateOsConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OsConfigServiceServer).CreateOsConfig(ctx, req.(*CreateOsConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OsConfigService_GetOsConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOsConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OsConfigServiceServer).GetOsConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.osconfig.v1alpha1.OsConfigService/GetOsConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OsConfigServiceServer).GetOsConfig(ctx, req.(*GetOsConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OsConfigService_ListOsConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOsConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OsConfigServiceServer).ListOsConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.osconfig.v1alpha1.OsConfigService/ListOsConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OsConfigServiceServer).ListOsConfigs(ctx, req.(*ListOsConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OsConfigService_UpdateOsConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOsConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OsConfigServiceServer).UpdateOsConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.osconfig.v1alpha1.OsConfigService/UpdateOsConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OsConfigServiceServer).UpdateOsConfig(ctx, req.(*UpdateOsConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OsConfigService_DeleteOsConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOsConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OsConfigServiceServer).DeleteOsConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.osconfig.v1alpha1.OsConfigService/DeleteOsConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OsConfigServiceServer).DeleteOsConfig(ctx, req.(*DeleteOsConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OsConfigService_CreatePatchPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePatchPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OsConfigServiceServer).CreatePatchPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.osconfig.v1alpha1.OsConfigService/CreatePatchPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OsConfigServiceServer).CreatePatchPolicy(ctx, req.(*CreatePatchPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OsConfigService_GetPatchPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPatchPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OsConfigServiceServer).GetPatchPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.osconfig.v1alpha1.OsConfigService/GetPatchPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OsConfigServiceServer).GetPatchPolicy(ctx, req.(*GetPatchPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OsConfigService_ListPatchPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPatchPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OsConfigServiceServer).ListPatchPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.osconfig.v1alpha1.OsConfigService/ListPatchPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OsConfigServiceServer).ListPatchPolicies(ctx, req.(*ListPatchPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OsConfigService_UpdatePatchPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePatchPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OsConfigServiceServer).UpdatePatchPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.osconfig.v1alpha1.OsConfigService/UpdatePatchPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OsConfigServiceServer).UpdatePatchPolicy(ctx, req.(*UpdatePatchPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OsConfigService_DeletePatchPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePatchPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OsConfigServiceServer).DeletePatchPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.osconfig.v1alpha1.OsConfigService/DeletePatchPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OsConfigServiceServer).DeletePatchPolicy(ctx, req.(*DeletePatchPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OsConfigService_CreateAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OsConfigServiceServer).CreateAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.osconfig.v1alpha1.OsConfigService/CreateAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OsConfigServiceServer).CreateAssignment(ctx, req.(*CreateAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OsConfigService_GetAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OsConfigServiceServer).GetAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.osconfig.v1alpha1.OsConfigService/GetAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OsConfigServiceServer).GetAssignment(ctx, req.(*GetAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OsConfigService_ListAssignments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAssignmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OsConfigServiceServer).ListAssignments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.osconfig.v1alpha1.OsConfigService/ListAssignments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OsConfigServiceServer).ListAssignments(ctx, req.(*ListAssignmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OsConfigService_UpdateAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OsConfigServiceServer).UpdateAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.osconfig.v1alpha1.OsConfigService/UpdateAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OsConfigServiceServer).UpdateAssignment(ctx, req.(*UpdateAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OsConfigService_DeleteAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OsConfigServiceServer).DeleteAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.osconfig.v1alpha1.OsConfigService/DeleteAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OsConfigServiceServer).DeleteAssignment(ctx, req.(*DeleteAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OsConfigService_GetIamPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetIamPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OsConfigServiceServer).GetIamPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.osconfig.v1alpha1.OsConfigService/GetIamPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OsConfigServiceServer).GetIamPolicy(ctx, req.(*v1.GetIamPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OsConfigService_SetIamPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.SetIamPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OsConfigServiceServer).SetIamPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.osconfig.v1alpha1.OsConfigService/SetIamPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OsConfigServiceServer).SetIamPolicy(ctx, req.(*v1.SetIamPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OsConfigService_TestIamPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.TestIamPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OsConfigServiceServer).TestIamPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.osconfig.v1alpha1.OsConfigService/TestIamPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OsConfigServiceServer).TestIamPermissions(ctx, req.(*v1.TestIamPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OsConfigService_LookupConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OsConfigServiceServer).LookupConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.osconfig.v1alpha1.OsConfigService/LookupConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OsConfigServiceServer).LookupConfigs(ctx, req.(*LookupConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OsConfigService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.osconfig.v1alpha1.OsConfigService",
	HandlerType: (*OsConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOsConfig",
			Handler:    _OsConfigService_CreateOsConfig_Handler,
		},
		{
			MethodName: "GetOsConfig",
			Handler:    _OsConfigService_GetOsConfig_Handler,
		},
		{
			MethodName: "ListOsConfigs",
			Handler:    _OsConfigService_ListOsConfigs_Handler,
		},
		{
			MethodName: "UpdateOsConfig",
			Handler:    _OsConfigService_UpdateOsConfig_Handler,
		},
		{
			MethodName: "DeleteOsConfig",
			Handler:    _OsConfigService_DeleteOsConfig_Handler,
		},
		{
			MethodName: "CreatePatchPolicy",
			Handler:    _OsConfigService_CreatePatchPolicy_Handler,
		},
		{
			MethodName: "GetPatchPolicy",
			Handler:    _OsConfigService_GetPatchPolicy_Handler,
		},
		{
			MethodName: "ListPatchPolicies",
			Handler:    _OsConfigService_ListPatchPolicies_Handler,
		},
		{
			MethodName: "UpdatePatchPolicy",
			Handler:    _OsConfigService_UpdatePatchPolicy_Handler,
		},
		{
			MethodName: "DeletePatchPolicy",
			Handler:    _OsConfigService_DeletePatchPolicy_Handler,
		},
		{
			MethodName: "CreateAssignment",
			Handler:    _OsConfigService_CreateAssignment_Handler,
		},
		{
			MethodName: "GetAssignment",
			Handler:    _OsConfigService_GetAssignment_Handler,
		},
		{
			MethodName: "ListAssignments",
			Handler:    _OsConfigService_ListAssignments_Handler,
		},
		{
			MethodName: "UpdateAssignment",
			Handler:    _OsConfigService_UpdateAssignment_Handler,
		},
		{
			MethodName: "DeleteAssignment",
			Handler:    _OsConfigService_DeleteAssignment_Handler,
		},
		{
			MethodName: "GetIamPolicy",
			Handler:    _OsConfigService_GetIamPolicy_Handler,
		},
		{
			MethodName: "SetIamPolicy",
			Handler:    _OsConfigService_SetIamPolicy_Handler,
		},
		{
			MethodName: "TestIamPermissions",
			Handler:    _OsConfigService_TestIamPermissions_Handler,
		},
		{
			MethodName: "LookupConfigs",
			Handler:    _OsConfigService_LookupConfigs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/osconfig/v1alpha1/osconfig_service.proto",
}

func init() {
	proto.RegisterFile("google/cloud/osconfig/v1alpha1/osconfig_service.proto", fileDescriptor_osconfig_service_ca6ce28c202d3abe)
}

var fileDescriptor_osconfig_service_ca6ce28c202d3abe = []byte{
	// 1332 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0x4d, 0x6f, 0xe3, 0xc4,
	0x1b, 0xff, 0xbb, 0xd9, 0x97, 0x7f, 0x27, 0x6d, 0x36, 0x3b, 0x62, 0x21, 0xca, 0xf2, 0x52, 0xf9,
	0xb2, 0x6d, 0xca, 0xda, 0xbb, 0xee, 0x96, 0x5d, 0xb2, 0x42, 0x28, 0xdb, 0x97, 0x28, 0xa2, 0x34,
	0x51, 0x93, 0x52, 0x1a, 0x09, 0x59, 0xae, 0x3b, 0x75, 0x4d, 0x63, 0x8f, 0xd7, 0x63, 0xb7, 0xca,
	0x56, 0xbd, 0xf0, 0x15, 0xe0, 0xc4, 0x37, 0xe0, 0xcc, 0x15, 0x04, 0x47, 0x84, 0xb8, 0x21, 0x71,
	0xe3, 0x86, 0x04, 0x1f, 0x80, 0x23, 0x07, 0xe4, 0x19, 0x4f, 0xe2, 0x38, 0x69, 0x6c, 0xb7, 0xe2,
	0x94, 0x78, 0xe6, 0xf9, 0x3d, 0xf3, 0xfb, 0xcd, 0xf3, 0xe2, 0x19, 0x83, 0x55, 0x03, 0x63, 0xa3,
	0x87, 0x64, 0xbd, 0x87, 0xfd, 0x43, 0x19, 0x13, 0x1d, 0xdb, 0x47, 0xa6, 0x21, 0x9f, 0x3e, 0xd6,
	0x7a, 0xce, 0xb1, 0xf6, 0x78, 0x30, 0xa2, 0x12, 0xe4, 0x9e, 0x9a, 0x3a, 0x92, 0x1c, 0x17, 0x7b,
	0x18, 0xbe, 0xcd, 0x60, 0x12, 0x85, 0x49, 0xdc, 0x48, 0xe2, 0xb0, 0xf2, 0x9b, 0xa1, 0x5b, 0xcd,
	0x31, 0x65, 0xcd, 0xb6, 0xb1, 0xa7, 0x79, 0x26, 0xb6, 0x09, 0x43, 0x97, 0x1f, 0x25, 0x2c, 0xaa,
	0x11, 0x62, 0x1a, 0xb6, 0x85, 0x6c, 0x8f, 0x23, 0xe4, 0x44, 0x9a, 0x2a, 0x1b, 0xe2, 0x80, 0x95,
	0x04, 0x80, 0xa3, 0x79, 0xfa, 0xb1, 0xea, 0xe0, 0x9e, 0xa9, 0x9b, 0x88, 0x83, 0x42, 0x55, 0xb2,
	0xa9, 0x59, 0xf2, 0xe9, 0xe3, 0xe0, 0x87, 0x59, 0xf4, 0xc3, 0xf9, 0xf2, 0xe8, 0xfc, 0xc8, 0xdc,
	0xfd, 0x70, 0x8e, 0x3e, 0x1d, 0xf8, 0x47, 0x32, 0xb2, 0x1c, 0x2f, 0x9c, 0x14, 0xff, 0xc9, 0x81,
	0xd7, 0xb6, 0x30, 0x3e, 0xf1, 0x9d, 0x35, 0xc6, 0x72, 0x07, 0xbd, 0xf4, 0x11, 0xf1, 0x60, 0x19,
	0xfc, 0xdf, 0x45, 0x04, 0xfb, 0xae, 0x8e, 0x4a, 0xc2, 0x82, 0xb0, 0x38, 0xbb, 0x33, 0x78, 0x86,
	0x1d, 0x70, 0x1b, 0x13, 0xd5, 0xb4, 0x8f, 0x70, 0x69, 0x66, 0x41, 0x58, 0xcc, 0x2b, 0xcf, 0xa5,
	0xe9, 0xbb, 0x2e, 0x4d, 0x5a, 0x42, 0x6a, 0x92, 0x86, 0x7d, 0x84, 0x77, 0x6e, 0x61, 0xfa, 0x0b,
	0x0f, 0xc0, 0x5c, 0x18, 0x51, 0xaf, 0xef, 0x20, 0x52, 0xba, 0xb9, 0x90, 0x5b, 0x2c, 0x28, 0x1f,
	0x5e, 0xc9, 0x35, 0x7b, 0xec, 0xf4, 0x1d, 0xb4, 0x93, 0xd7, 0x07, 0xff, 0x49, 0xf9, 0x5b, 0x01,
	0xdc, 0x62, 0xcb, 0xc2, 0x05, 0x30, 0x87, 0x89, 0xda, 0xc3, 0xb6, 0xa1, 0xda, 0x9a, 0xc5, 0x45,
	0x02, 0x4c, 0xb6, 0xb0, 0x6d, 0x6c, 0x6b, 0x16, 0x82, 0x22, 0x98, 0xc7, 0x44, 0x25, 0xc7, 0xd8,
	0xf5, 0x98, 0xc9, 0x0c, 0x35, 0xc9, 0x63, 0xd2, 0x0e, 0xc6, 0xa8, 0xcd, 0x5b, 0x00, 0x60, 0xa2,
	0x9e, 0x22, 0x97, 0x98, 0xd8, 0x2e, 0xe5, 0xa8, 0xc1, 0x2c, 0x26, 0x9f, 0xb0, 0x01, 0x78, 0x1f,
	0xcc, 0x62, 0xa2, 0x9e, 0x20, 0xd7, 0x46, 0xbd, 0xd2, 0x0d, 0xb6, 0x8d, 0x98, 0x7c, 0x44, 0x9f,
	0xe1, 0x03, 0x70, 0x07, 0x13, 0x55, 0x73, 0xf5, 0x63, 0xd3, 0x43, 0xba, 0xe7, 0xbb, 0xa8, 0x74,
	0x93, 0x9a, 0x14, 0x30, 0xa9, 0x45, 0x46, 0xc5, 0x4f, 0x01, 0x18, 0x0a, 0x82, 0xf7, 0xc1, 0x1b,
	0x6b, 0xcd, 0xed, 0xcd, 0x46, 0x5d, 0xed, 0xec, 0xb7, 0x36, 0xd4, 0xdd, 0xed, 0x76, 0x6b, 0x63,
	0xad, 0xb1, 0xd9, 0xd8, 0x58, 0x2f, 0xfe, 0x0f, 0xde, 0x06, 0xb9, 0x5a, 0xab, 0x53, 0x14, 0x82,
	0x3f, 0xfb, 0xbb, 0x1f, 0x17, 0x67, 0x82, 0x3f, 0xf5, 0x66, 0xb3, 0x98, 0x83, 0x10, 0x14, 0xf6,
	0x1a, 0xdb, 0xeb, 0xcd, 0xbd, 0xb6, 0xba, 0xdb, 0x5a, 0xaf, 0x75, 0x36, 0x8a, 0x37, 0xc4, 0x1f,
	0x66, 0xc0, 0xbd, 0xd8, 0x06, 0x12, 0x07, 0xdb, 0x04, 0xc1, 0x17, 0x20, 0xa7, 0x39, 0x1e, 0xdd,
	0x95, 0xbc, 0xf2, 0x28, 0x29, 0x08, 0x35, 0xc7, 0x6b, 0x69, 0xfa, 0x89, 0x66, 0x20, 0xe6, 0x67,
	0x27, 0x00, 0x07, 0x3e, 0xfa, 0xbe, 0x15, 0xe6, 0x48, 0xa2, 0x8f, 0x7d, 0xdf, 0x8a, 0xf9, 0xe8,
	0xfb, 0x56, 0xe0, 0xc3, 0xc0, 0x98, 0xee, 0x6c, 0x0a, 0x1f, 0x75, 0x8c, 0x63, 0x3e, 0x0c, 0x8c,
	0x61, 0x17, 0x14, 0xce, 0x4c, 0xfb, 0x10, 0x9f, 0x11, 0xd5, 0x77, 0x0e, 0x35, 0x0f, 0xd1, 0x50,
	0xe4, 0x95, 0x95, 0x24, 0x77, 0x7b, 0x0c, 0xb5, 0x4b, 0x41, 0xa1, 0xc7, 0xf9, 0xb3, 0xe8, 0xa0,
	0xf2, 0xd5, 0x3b, 0xe0, 0x4e, 0x93, 0xb0, 0xb9, 0x36, 0xeb, 0x44, 0xf0, 0x2f, 0x01, 0x14, 0xd6,
	0x5c, 0xa4, 0x79, 0x88, 0xcf, 0xc0, 0xd5, 0xa4, 0xa5, 0x46, 0xed, 0xc3, 0x3c, 0x2e, 0x2f, 0x26,
	0xc1, 0x38, 0x40, 0xf4, 0xbf, 0xf8, 0xf5, 0x8f, 0x2f, 0x67, 0xb0, 0xf8, 0xee, 0xb0, 0x93, 0x9c,
	0x3b, 0x9a, 0x8b, 0x6c, 0xef, 0x03, 0xec, 0x1a, 0x9a, 0x6d, 0xbe, 0x62, 0x8d, 0x4e, 0xae, 0x5c,
	0xc8, 0x38, 0x04, 0x91, 0xea, 0xec, 0xa0, 0x3d, 0x75, 0x9f, 0x88, 0x0f, 0xc6, 0xa1, 0x8e, 0x8b,
	0x3f, 0x47, 0xba, 0x77, 0x29, 0x0a, 0xfe, 0x22, 0x80, 0x7c, 0x1d, 0x79, 0x03, 0x9d, 0x4a, 0x62,
	0x84, 0x86, 0xc6, 0xd9, 0x45, 0xaa, 0x54, 0xe4, 0x3e, 0x8c, 0x8a, 0x0c, 0x2a, 0x33, 0x2e, 0x71,
	0xc8, 0x55, 0xae, 0x5c, 0x74, 0x97, 0xe0, 0x83, 0xb8, 0xfd, 0x50, 0xd7, 0x88, 0x29, 0xfc, 0x5d,
	0x00, 0xf3, 0x5b, 0x26, 0x19, 0x50, 0x24, 0xf0, 0x49, 0x62, 0xff, 0x89, 0x9a, 0x73, 0x49, 0xab,
	0x19, 0x51, 0xac, 0xe8, 0x26, 0xea, 0x4b, 0x0c, 0x62, 0x4c, 0xdf, 0xb4, 0xc8, 0xd1, 0xcc, 0x64,
	0x89, 0x9b, 0x3e, 0x33, 0x47, 0xed, 0xaf, 0x9c, 0x99, 0x4a, 0xa6, 0xa0, 0x8d, 0x64, 0xa6, 0x92,
	0x36, 0x7e, 0xd1, 0xcc, 0xfc, 0x51, 0x00, 0x85, 0x75, 0xd4, 0x43, 0x59, 0xa4, 0x8e, 0xda, 0x73,
	0xa9, 0xaf, 0x73, 0x18, 0x7f, 0x83, 0x4a, 0x1b, 0xc1, 0x1b, 0x94, 0x47, 0xab, 0x92, 0x31, 0x1b,
	0x2b, 0xa9, 0xb3, 0xf1, 0x7b, 0x01, 0xdc, 0x65, 0x7d, 0xa1, 0x15, 0x1c, 0x0a, 0x5a, 0xf4, 0xad,
	0x0e, 0x9f, 0xa5, 0x6b, 0x25, 0x11, 0x08, 0x17, 0xb2, 0x9c, 0x84, 0x8c, 0x60, 0xc4, 0x1a, 0x55,
	0xf7, 0x5c, 0x5c, 0x9e, 0x9e, 0x5b, 0xce, 0x00, 0x62, 0x22, 0x52, 0x9d, 0x8b, 0x9c, 0x5e, 0xfa,
	0xf0, 0x1b, 0x01, 0x14, 0xea, 0xc8, 0x8b, 0x92, 0x5f, 0x4d, 0xd1, 0x1f, 0xae, 0xcb, 0x7c, 0x85,
	0x32, 0x7f, 0x08, 0x97, 0xa7, 0xec, 0xf3, 0x08, 0x6d, 0xbe, 0xd7, 0x41, 0x51, 0xb6, 0xa2, 0x13,
	0xc9, 0x7b, 0x3d, 0x06, 0xe1, 0x8c, 0xdf, 0xbf, 0x02, 0x32, 0xec, 0x02, 0x93, 0xf8, 0x27, 0xed,
	0x3c, 0xe5, 0xcf, 0x2a, 0x35, 0x53, 0xae, 0x8c, 0x41, 0xae, 0x93, 0x2b, 0x4a, 0x96, 0x1d, 0x8f,
	0xe5, 0xca, 0xd7, 0x02, 0xb8, 0xcb, 0xca, 0x2f, 0x13, 0xff, 0x31, 0x48, 0x52, 0xd1, 0x86, 0x9b,
	0x5b, 0xc9, 0x94, 0x1c, 0x7f, 0x0b, 0xa0, 0xc8, 0xaa, 0xaa, 0x36, 0xb8, 0x00, 0xc0, 0xa7, 0xe9,
	0xea, 0x70, 0x88, 0xe0, 0xd4, 0x2a, 0x89, 0xa7, 0xa9, 0x01, 0x44, 0x3c, 0xa7, 0x74, 0x7d, 0x51,
	0x4a, 0xf1, 0x46, 0x88, 0x5c, 0x4e, 0xaa, 0x60, 0xf8, 0xd0, 0x7d, 0x2a, 0x2e, 0x4d, 0xcf, 0xa4,
	0x4b, 0x80, 0xf0, 0x37, 0x01, 0xcc, 0xd7, 0x91, 0x17, 0xd1, 0xfc, 0x24, 0x45, 0xf9, 0x5e, 0x4f,
	0xb0, 0x4e, 0x05, 0x7f, 0x06, 0xa5, 0xa4, 0xa6, 0x1a, 0x21, 0x1d, 0xb4, 0xd5, 0x65, 0xb8, 0x34,
	0x25, 0xa2, 0xa3, 0xc6, 0xf0, 0x4f, 0x01, 0xdc, 0x09, 0xea, 0x6f, 0xb8, 0x2e, 0x81, 0xef, 0xa5,
	0x29, 0xd8, 0x08, 0x80, 0x8b, 0x7b, 0x9a, 0x19, 0x17, 0x96, 0xf9, 0x24, 0xa5, 0x29, 0x42, 0x1b,
	0x53, 0x3a, 0x3d, 0x9c, 0x34, 0x73, 0x59, 0x8d, 0x67, 0xc9, 0xdc, 0x38, 0xe2, 0x1a, 0x99, 0xab,
	0x64, 0x0c, 0xe4, 0x68, 0xe6, 0x2a, 0xe9, 0x83, 0x3a, 0x92, 0xb9, 0x3f, 0x09, 0xa0, 0xc8, 0x5a,
	0x43, 0x16, 0xd9, 0x71, 0x44, 0x52, 0x2f, 0x09, 0x23, 0x58, 0xc9, 0x9c, 0xab, 0x95, 0x0c, 0xb9,
	0xfa, 0x9d, 0x00, 0xe6, 0xea, 0xc8, 0x6b, 0x68, 0x56, 0xd8, 0x13, 0x45, 0xce, 0xc6, 0xd4, 0x2c,
	0xe9, 0x94, 0x96, 0xdc, 0x60, 0x92, 0x33, 0xbe, 0x17, 0xb3, 0x09, 0xfb, 0xf4, 0x4b, 0x4a, 0xf8,
	0x44, 0x54, 0x22, 0xcb, 0xf3, 0x5b, 0x7d, 0x9c, 0x74, 0xe5, 0xa2, 0x6a, 0x44, 0x3c, 0x57, 0x85,
	0x4a, 0x57, 0x11, 0x1f, 0x4e, 0x02, 0x0e, 0xb9, 0x8f, 0x63, 0x28, 0xfd, 0xf6, 0x34, 0xfa, 0xed,
	0xff, 0x8c, 0x3e, 0xb9, 0x02, 0xfd, 0x18, 0x26, 0x38, 0x30, 0xc3, 0x0e, 0x22, 0x74, 0x10, 0xb9,
	0x96, 0x49, 0x82, 0x6b, 0x3d, 0x81, 0x8b, 0x31, 0x82, 0xe3, 0x26, 0x5c, 0xca, 0x52, 0x0a, 0xcb,
	0xb0, 0x21, 0x5c, 0x50, 0x79, 0x67, 0xe2, 0xb3, 0x74, 0xf2, 0xbc, 0x31, 0x4f, 0x81, 0xc8, 0x67,
	0xe2, 0x4a, 0xa2, 0xc8, 0x89, 0x48, 0xf8, 0x73, 0x70, 0xf7, 0x89, 0x7e, 0x0b, 0x48, 0x71, 0xf7,
	0x99, 0xf0, 0xed, 0x25, 0xc5, 0xdd, 0x67, 0xd2, 0x07, 0x07, 0x71, 0x8b, 0xaa, 0xdf, 0x14, 0x6b,
	0xd3, 0xe9, 0xcb, 0xaf, 0xb0, 0x1d, 0xbc, 0x94, 0x65, 0xd3, 0x26, 0x9e, 0x66, 0xeb, 0xec, 0x2c,
	0xd1, 0x8b, 0xba, 0xac, 0x0a, 0x95, 0x17, 0xe7, 0x40, 0xd4, 0xb1, 0x95, 0xc0, 0xe4, 0xc5, 0x3c,
	0x3f, 0xea, 0xb7, 0x82, 0xc2, 0xee, 0x6e, 0x86, 0xe6, 0x06, 0xee, 0x69, 0xb6, 0x21, 0x61, 0xd7,
	0x90, 0x0d, 0x64, 0xd3, 0xa2, 0x0f, 0x3f, 0xf3, 0x69, 0x8e, 0x49, 0x2e, 0xfb, 0x72, 0xf7, 0x9c,
	0x8f, 0x1c, 0xdc, 0xa2, 0x90, 0x95, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x30, 0xb3, 0xdf, 0x11,
	0xc3, 0x14, 0x00, 0x00,
}
