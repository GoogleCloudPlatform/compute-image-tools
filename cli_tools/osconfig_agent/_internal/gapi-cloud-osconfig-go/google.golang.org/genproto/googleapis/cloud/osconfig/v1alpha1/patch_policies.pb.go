// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google/cloud/osconfig/v1alpha1/patch_policies.proto

package osconfig

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	dayofweek "google.golang.org/genproto/googleapis/type/dayofweek"
	timeofday "google.golang.org/genproto/googleapis/type/timeofday"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// State of the PatchPolicy.
type PatchPolicy_State int32

const (
	// When unspecified, the PatchPolicy will be considered ACTIVE.
	PatchPolicy_STATE_UNSPECIFIED PatchPolicy_State = 0
	// The PatchPolicy is being applied to VMs.
	PatchPolicy_ACTIVE PatchPolicy_State = 1
	// The PatchPolicy will not be applied to VMs.
	PatchPolicy_INACTIVE PatchPolicy_State = 2
)

var PatchPolicy_State_name = map[int32]string{
	0: "STATE_UNSPECIFIED",
	1: "ACTIVE",
	2: "INACTIVE",
}

var PatchPolicy_State_value = map[string]int32{
	"STATE_UNSPECIFIED": 0,
	"ACTIVE":            1,
	"INACTIVE":          2,
}

func (x PatchPolicy_State) String() string {
	return proto.EnumName(PatchPolicy_State_name, int32(x))
}

func (PatchPolicy_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5f33c49af1d47de3, []int{0, 0}
}

// Post-patch reboot settings.
type PatchPolicy_RebootConfig int32

const (
	// Default value is DEFAULT.
	PatchPolicy_REBOOT_CONFIG_UNSPECIFIED PatchPolicy_RebootConfig = 0
	// The agent will decide if a reboot is necessary by checking well known
	// signals such as registry keys or `/var/run/reboot-required`.
	PatchPolicy_DEFAULT PatchPolicy_RebootConfig = 1
	// Always reboot the machine after the update has completed.
	PatchPolicy_ALWAYS PatchPolicy_RebootConfig = 2
	// Never reboot the machine after the update has completed.
	PatchPolicy_NEVER PatchPolicy_RebootConfig = 3
)

var PatchPolicy_RebootConfig_name = map[int32]string{
	0: "REBOOT_CONFIG_UNSPECIFIED",
	1: "DEFAULT",
	2: "ALWAYS",
	3: "NEVER",
}

var PatchPolicy_RebootConfig_value = map[string]int32{
	"REBOOT_CONFIG_UNSPECIFIED": 0,
	"DEFAULT":                   1,
	"ALWAYS":                    2,
	"NEVER":                     3,
}

func (x PatchPolicy_RebootConfig) String() string {
	return proto.EnumName(PatchPolicy_RebootConfig_name, int32(x))
}

func (PatchPolicy_RebootConfig) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5f33c49af1d47de3, []int{0, 1}
}

// Apt patch type.
type AptSettings_Type int32

const (
	// By default, a full upgrade will be performed.
	AptSettings_TYPE_UNSPECIFIED AptSettings_Type = 0
	// run `apt-get dist-upgrade` instead.
	AptSettings_DIST AptSettings_Type = 1
)

var AptSettings_Type_name = map[int32]string{
	0: "TYPE_UNSPECIFIED",
	1: "DIST",
}

var AptSettings_Type_value = map[string]int32{
	"TYPE_UNSPECIFIED": 0,
	"DIST":             1,
}

func (x AptSettings_Type) String() string {
	return proto.EnumName(AptSettings_Type_name, int32(x))
}

func (AptSettings_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5f33c49af1d47de3, []int{3, 0}
}

// Microsoft Windows update classifications as defined in
// [1]
// https://support.microsoft.com/en-us/help/824684/description-of-the-standard-terminology-that-is-used-to-describe-micro
type WindowsUpdateSettings_Classification int32

const (
	// Invalid. If classifications are included, they must be specified.
	WindowsUpdateSettings_CLASSIFICATION_UNSPECIFIED WindowsUpdateSettings_Classification = 0
	// "A widely released fix for a specific problem that addresses a critical,
	// non-security-related bug." [1]
	WindowsUpdateSettings_CRITICAL WindowsUpdateSettings_Classification = 1
	// "A widely released fix for a product-specific, security-related
	// vulnerability. Security vulnerabilities are rated by their severity. The
	// severity rating is indicated in the Microsoft security bulletin as
	// critical, important, moderate, or low." [1]
	WindowsUpdateSettings_SECURITY WindowsUpdateSettings_Classification = 2
	// "A widely released and frequent software update that contains additions
	// to a productâ€™s definition database. Definition databases are often used
	// to detect objects that have specific attributes, such as malicious code,
	// phishing websites, or junk mail." [1]
	WindowsUpdateSettings_DEFINITION WindowsUpdateSettings_Classification = 3
	// "Software that controls the input and output of a device." [1]
	WindowsUpdateSettings_DRIVER WindowsUpdateSettings_Classification = 4
	// "New product functionality that is first distributed outside the context
	// of a product release and that is typically included in the next full
	// product release." [1]
	WindowsUpdateSettings_FEATURE_PACK WindowsUpdateSettings_Classification = 5
	// "A tested, cumulative set of all hotfixes, security updates, critical
	// updates, and updates. Additionally, service packs may contain additional
	// fixes for problems that are found internally since the release of the
	// product. Service packs my also contain a limited number of
	// customer-requested design changes or features." [1]
	WindowsUpdateSettings_SERVICE_PACK WindowsUpdateSettings_Classification = 6
	// "A utility or feature that helps complete a task or set of tasks." [1]
	WindowsUpdateSettings_TOOL WindowsUpdateSettings_Classification = 7
	// "A tested, cumulative set of hotfixes, security updates, critical
	// updates, and updates that are packaged together for easy deployment. A
	// rollup generally targets a specific area, such as security, or a
	// component of a product, such as Internet Information Services (IIS)." [1]
	WindowsUpdateSettings_UPDATE_ROLLUP WindowsUpdateSettings_Classification = 8
	// "A widely released fix for a specific problem. An update addresses a
	// noncritical, non-security-related bug." [1]
	WindowsUpdateSettings_UPDATE WindowsUpdateSettings_Classification = 9
)

var WindowsUpdateSettings_Classification_name = map[int32]string{
	0: "CLASSIFICATION_UNSPECIFIED",
	1: "CRITICAL",
	2: "SECURITY",
	3: "DEFINITION",
	4: "DRIVER",
	5: "FEATURE_PACK",
	6: "SERVICE_PACK",
	7: "TOOL",
	8: "UPDATE_ROLLUP",
	9: "UPDATE",
}

var WindowsUpdateSettings_Classification_value = map[string]int32{
	"CLASSIFICATION_UNSPECIFIED": 0,
	"CRITICAL":                   1,
	"SECURITY":                   2,
	"DEFINITION":                 3,
	"DRIVER":                     4,
	"FEATURE_PACK":               5,
	"SERVICE_PACK":               6,
	"TOOL":                       7,
	"UPDATE_ROLLUP":              8,
	"UPDATE":                     9,
}

func (x WindowsUpdateSettings_Classification) String() string {
	return proto.EnumName(WindowsUpdateSettings_Classification_name, int32(x))
}

func (WindowsUpdateSettings_Classification) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5f33c49af1d47de3, []int{7, 0}
}

// A PatchPolicy enables recurring, scheduled patching for groups of VMs. To
// patch a set of VMs, create a PatchPolicy, then create an Assignment mapping
// this policy to one or more VMs.
type PatchPolicy struct {
	// Identifying name for this PatchConfig.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the PatchConfig. Length of the description is limited
	// to 1024 characters.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Output only. Time this PatchPolicy was created.
	CreateTime *timestamp.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. Last time this PatchPolicy was updated.
	UpdateTime *timestamp.Timestamp `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Represents cloud resource labels.
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The PatchPolicy will stop being applied when its state is INACTIVE.
	State PatchPolicy_State `protobuf:"varint,6,opt,name=state,proto3,enum=google.cloud.osconfig.v1alpha1.PatchPolicy_State" json:"state,omitempty"`
	// Windows update settings. Set this if this policy should update Windows VMs.
	WindowsUpdate *WindowsUpdateSettings `protobuf:"bytes,7,opt,name=windows_update,json=windowsUpdate,proto3" json:"windows_update,omitempty"`
	// The frequency this patch will be applied. When left unspecified, the patch
	// will not be automatically applied to any VMs.
	PatchWindow *PatchWindow `protobuf:"bytes,8,opt,name=patch_window,json=patchWindow,proto3" json:"patch_window,omitempty"`
	// Optional. Post-patch reboot settings.
	RebootConfig PatchPolicy_RebootConfig `protobuf:"varint,9,opt,name=reboot_config,json=rebootConfig,proto3,enum=google.cloud.osconfig.v1alpha1.PatchPolicy_RebootConfig" json:"reboot_config,omitempty"`
	// Optional. Retry strategy can be defined to have the agent retry patching
	// during the window if patching fails. If omitted, the agent will not retry
	// failed patches.
	RetryStrategy *RetryStrategy `protobuf:"bytes,10,opt,name=retry_strategy,json=retryStrategy,proto3" json:"retry_strategy,omitempty"`
	// Apt update settings. Set this if this policy should update VMs that use
	// apt.
	Apt *AptSettings `protobuf:"bytes,11,opt,name=apt,proto3" json:"apt,omitempty"`
	// Yum update settings. Set this if this policy should update VMs that use
	// yum.
	Yum *YumSettings `protobuf:"bytes,12,opt,name=yum,proto3" json:"yum,omitempty"`
	// Goo update settings. Set this if this policy should update VMs that use
	// googet.
	Goo *GooSettings `protobuf:"bytes,13,opt,name=goo,proto3" json:"goo,omitempty"`
	// Zypper update settings. Set this if this policy should update VMs that use
	// zypper.
	Zypper               *ZypperSettings `protobuf:"bytes,14,opt,name=zypper,proto3" json:"zypper,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PatchPolicy) Reset()         { *m = PatchPolicy{} }
func (m *PatchPolicy) String() string { return proto.CompactTextString(m) }
func (*PatchPolicy) ProtoMessage()    {}
func (*PatchPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f33c49af1d47de3, []int{0}
}
func (m *PatchPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PatchPolicy.Unmarshal(m, b)
}
func (m *PatchPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PatchPolicy.Marshal(b, m, deterministic)
}
func (m *PatchPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PatchPolicy.Merge(m, src)
}
func (m *PatchPolicy) XXX_Size() int {
	return xxx_messageInfo_PatchPolicy.Size(m)
}
func (m *PatchPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_PatchPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_PatchPolicy proto.InternalMessageInfo

func (m *PatchPolicy) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PatchPolicy) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *PatchPolicy) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *PatchPolicy) GetUpdateTime() *timestamp.Timestamp {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

func (m *PatchPolicy) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *PatchPolicy) GetState() PatchPolicy_State {
	if m != nil {
		return m.State
	}
	return PatchPolicy_STATE_UNSPECIFIED
}

func (m *PatchPolicy) GetWindowsUpdate() *WindowsUpdateSettings {
	if m != nil {
		return m.WindowsUpdate
	}
	return nil
}

func (m *PatchPolicy) GetPatchWindow() *PatchWindow {
	if m != nil {
		return m.PatchWindow
	}
	return nil
}

func (m *PatchPolicy) GetRebootConfig() PatchPolicy_RebootConfig {
	if m != nil {
		return m.RebootConfig
	}
	return PatchPolicy_REBOOT_CONFIG_UNSPECIFIED
}

func (m *PatchPolicy) GetRetryStrategy() *RetryStrategy {
	if m != nil {
		return m.RetryStrategy
	}
	return nil
}

func (m *PatchPolicy) GetApt() *AptSettings {
	if m != nil {
		return m.Apt
	}
	return nil
}

func (m *PatchPolicy) GetYum() *YumSettings {
	if m != nil {
		return m.Yum
	}
	return nil
}

func (m *PatchPolicy) GetGoo() *GooSettings {
	if m != nil {
		return m.Goo
	}
	return nil
}

func (m *PatchPolicy) GetZypper() *ZypperSettings {
	if m != nil {
		return m.Zypper
	}
	return nil
}

// The strategy for retrying failed patches during the patch window.
type RetryStrategy struct {
	// If true, the agent will continue to try and patch until the window has
	// ended.
	Enabled              bool     `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RetryStrategy) Reset()         { *m = RetryStrategy{} }
func (m *RetryStrategy) String() string { return proto.CompactTextString(m) }
func (*RetryStrategy) ProtoMessage()    {}
func (*RetryStrategy) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f33c49af1d47de3, []int{1}
}
func (m *RetryStrategy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RetryStrategy.Unmarshal(m, b)
}
func (m *RetryStrategy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RetryStrategy.Marshal(b, m, deterministic)
}
func (m *RetryStrategy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetryStrategy.Merge(m, src)
}
func (m *RetryStrategy) XXX_Size() int {
	return xxx_messageInfo_RetryStrategy.Size(m)
}
func (m *RetryStrategy) XXX_DiscardUnknown() {
	xxx_messageInfo_RetryStrategy.DiscardUnknown(m)
}

var xxx_messageInfo_RetryStrategy proto.InternalMessageInfo

func (m *RetryStrategy) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

// Specifies a recurring window of time. This window can recur daily, weekly, or
// monthly and must last for at least one hour.
type PatchWindow struct {
	// Time to start the maintenance operations.
	// It must include hours and minutes but not seconds or nanos.
	StartTime *timeofday.TimeOfDay `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Duration of the patch window. Must be at least 60 minutes and an
	// interval of 30 minutes.
	Duration *duration.Duration `protobuf:"bytes,2,opt,name=duration,proto3" json:"duration,omitempty"`
	// How often the patch window will reoccur.
	//
	// Types that are valid to be assigned to Frequency:
	//	*PatchWindow_Daily_
	//	*PatchWindow_Weekly_
	//	*PatchWindow_Monthly_
	Frequency            isPatchWindow_Frequency `protobuf_oneof:"frequency"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *PatchWindow) Reset()         { *m = PatchWindow{} }
func (m *PatchWindow) String() string { return proto.CompactTextString(m) }
func (*PatchWindow) ProtoMessage()    {}
func (*PatchWindow) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f33c49af1d47de3, []int{2}
}
func (m *PatchWindow) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PatchWindow.Unmarshal(m, b)
}
func (m *PatchWindow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PatchWindow.Marshal(b, m, deterministic)
}
func (m *PatchWindow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PatchWindow.Merge(m, src)
}
func (m *PatchWindow) XXX_Size() int {
	return xxx_messageInfo_PatchWindow.Size(m)
}
func (m *PatchWindow) XXX_DiscardUnknown() {
	xxx_messageInfo_PatchWindow.DiscardUnknown(m)
}

var xxx_messageInfo_PatchWindow proto.InternalMessageInfo

func (m *PatchWindow) GetStartTime() *timeofday.TimeOfDay {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *PatchWindow) GetDuration() *duration.Duration {
	if m != nil {
		return m.Duration
	}
	return nil
}

type isPatchWindow_Frequency interface {
	isPatchWindow_Frequency()
}

type PatchWindow_Daily_ struct {
	Daily *PatchWindow_Daily `protobuf:"bytes,3,opt,name=daily,proto3,oneof"`
}

type PatchWindow_Weekly_ struct {
	Weekly *PatchWindow_Weekly `protobuf:"bytes,4,opt,name=weekly,proto3,oneof"`
}

type PatchWindow_Monthly_ struct {
	Monthly *PatchWindow_Monthly `protobuf:"bytes,5,opt,name=monthly,proto3,oneof"`
}

func (*PatchWindow_Daily_) isPatchWindow_Frequency() {}

func (*PatchWindow_Weekly_) isPatchWindow_Frequency() {}

func (*PatchWindow_Monthly_) isPatchWindow_Frequency() {}

func (m *PatchWindow) GetFrequency() isPatchWindow_Frequency {
	if m != nil {
		return m.Frequency
	}
	return nil
}

func (m *PatchWindow) GetDaily() *PatchWindow_Daily {
	if x, ok := m.GetFrequency().(*PatchWindow_Daily_); ok {
		return x.Daily
	}
	return nil
}

func (m *PatchWindow) GetWeekly() *PatchWindow_Weekly {
	if x, ok := m.GetFrequency().(*PatchWindow_Weekly_); ok {
		return x.Weekly
	}
	return nil
}

func (m *PatchWindow) GetMonthly() *PatchWindow_Monthly {
	if x, ok := m.GetFrequency().(*PatchWindow_Monthly_); ok {
		return x.Monthly
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PatchWindow) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PatchWindow_OneofMarshaler, _PatchWindow_OneofUnmarshaler, _PatchWindow_OneofSizer, []interface{}{
		(*PatchWindow_Daily_)(nil),
		(*PatchWindow_Weekly_)(nil),
		(*PatchWindow_Monthly_)(nil),
	}
}

func _PatchWindow_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PatchWindow)
	// frequency
	switch x := m.Frequency.(type) {
	case *PatchWindow_Daily_:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Daily); err != nil {
			return err
		}
	case *PatchWindow_Weekly_:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Weekly); err != nil {
			return err
		}
	case *PatchWindow_Monthly_:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Monthly); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("PatchWindow.Frequency has unexpected type %T", x)
	}
	return nil
}

func _PatchWindow_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PatchWindow)
	switch tag {
	case 3: // frequency.daily
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PatchWindow_Daily)
		err := b.DecodeMessage(msg)
		m.Frequency = &PatchWindow_Daily_{msg}
		return true, err
	case 4: // frequency.weekly
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PatchWindow_Weekly)
		err := b.DecodeMessage(msg)
		m.Frequency = &PatchWindow_Weekly_{msg}
		return true, err
	case 5: // frequency.monthly
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PatchWindow_Monthly)
		err := b.DecodeMessage(msg)
		m.Frequency = &PatchWindow_Monthly_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _PatchWindow_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PatchWindow)
	// frequency
	switch x := m.Frequency.(type) {
	case *PatchWindow_Daily_:
		s := proto.Size(x.Daily)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PatchWindow_Weekly_:
		s := proto.Size(x.Weekly)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PatchWindow_Monthly_:
		s := proto.Size(x.Monthly)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// The patch window should run daily.
type PatchWindow_Daily struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PatchWindow_Daily) Reset()         { *m = PatchWindow_Daily{} }
func (m *PatchWindow_Daily) String() string { return proto.CompactTextString(m) }
func (*PatchWindow_Daily) ProtoMessage()    {}
func (*PatchWindow_Daily) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f33c49af1d47de3, []int{2, 0}
}
func (m *PatchWindow_Daily) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PatchWindow_Daily.Unmarshal(m, b)
}
func (m *PatchWindow_Daily) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PatchWindow_Daily.Marshal(b, m, deterministic)
}
func (m *PatchWindow_Daily) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PatchWindow_Daily.Merge(m, src)
}
func (m *PatchWindow_Daily) XXX_Size() int {
	return xxx_messageInfo_PatchWindow_Daily.Size(m)
}
func (m *PatchWindow_Daily) XXX_DiscardUnknown() {
	xxx_messageInfo_PatchWindow_Daily.DiscardUnknown(m)
}

var xxx_messageInfo_PatchWindow_Daily proto.InternalMessageInfo

// The patch window should run weekly.
type PatchWindow_Weekly struct {
	// Day of the week to run the patch. An unspecified days are invalid.
	Day                  dayofweek.DayOfWeek `protobuf:"varint,1,opt,name=day,proto3,enum=google.type.DayOfWeek" json:"day,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PatchWindow_Weekly) Reset()         { *m = PatchWindow_Weekly{} }
func (m *PatchWindow_Weekly) String() string { return proto.CompactTextString(m) }
func (*PatchWindow_Weekly) ProtoMessage()    {}
func (*PatchWindow_Weekly) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f33c49af1d47de3, []int{2, 1}
}
func (m *PatchWindow_Weekly) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PatchWindow_Weekly.Unmarshal(m, b)
}
func (m *PatchWindow_Weekly) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PatchWindow_Weekly.Marshal(b, m, deterministic)
}
func (m *PatchWindow_Weekly) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PatchWindow_Weekly.Merge(m, src)
}
func (m *PatchWindow_Weekly) XXX_Size() int {
	return xxx_messageInfo_PatchWindow_Weekly.Size(m)
}
func (m *PatchWindow_Weekly) XXX_DiscardUnknown() {
	xxx_messageInfo_PatchWindow_Weekly.DiscardUnknown(m)
}

var xxx_messageInfo_PatchWindow_Weekly proto.InternalMessageInfo

func (m *PatchWindow_Weekly) GetDay() dayofweek.DayOfWeek {
	if m != nil {
		return m.Day
	}
	return dayofweek.DayOfWeek_DAY_OF_WEEK_UNSPECIFIED
}

// The patch window should reoccur monthly.
type PatchWindow_Monthly struct {
	// Which day of the month to patch. This can either be a day of the week
	// in a month or a specific day in the month.
	//
	// Types that are valid to be assigned to Day:
	//	*PatchWindow_Monthly_OccurrenceOfDay_
	//	*PatchWindow_Monthly_DayOfMonth
	Day                  isPatchWindow_Monthly_Day `protobuf_oneof:"day"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *PatchWindow_Monthly) Reset()         { *m = PatchWindow_Monthly{} }
func (m *PatchWindow_Monthly) String() string { return proto.CompactTextString(m) }
func (*PatchWindow_Monthly) ProtoMessage()    {}
func (*PatchWindow_Monthly) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f33c49af1d47de3, []int{2, 2}
}
func (m *PatchWindow_Monthly) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PatchWindow_Monthly.Unmarshal(m, b)
}
func (m *PatchWindow_Monthly) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PatchWindow_Monthly.Marshal(b, m, deterministic)
}
func (m *PatchWindow_Monthly) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PatchWindow_Monthly.Merge(m, src)
}
func (m *PatchWindow_Monthly) XXX_Size() int {
	return xxx_messageInfo_PatchWindow_Monthly.Size(m)
}
func (m *PatchWindow_Monthly) XXX_DiscardUnknown() {
	xxx_messageInfo_PatchWindow_Monthly.DiscardUnknown(m)
}

var xxx_messageInfo_PatchWindow_Monthly proto.InternalMessageInfo

type isPatchWindow_Monthly_Day interface {
	isPatchWindow_Monthly_Day()
}

type PatchWindow_Monthly_OccurrenceOfDay_ struct {
	OccurrenceOfDay *PatchWindow_Monthly_OccurrenceOfDay `protobuf:"bytes,1,opt,name=occurrence_of_day,json=occurrenceOfDay,proto3,oneof"`
}

type PatchWindow_Monthly_DayOfMonth struct {
	DayOfMonth int32 `protobuf:"varint,2,opt,name=day_of_month,json=dayOfMonth,proto3,oneof"`
}

func (*PatchWindow_Monthly_OccurrenceOfDay_) isPatchWindow_Monthly_Day() {}

func (*PatchWindow_Monthly_DayOfMonth) isPatchWindow_Monthly_Day() {}

func (m *PatchWindow_Monthly) GetDay() isPatchWindow_Monthly_Day {
	if m != nil {
		return m.Day
	}
	return nil
}

func (m *PatchWindow_Monthly) GetOccurrenceOfDay() *PatchWindow_Monthly_OccurrenceOfDay {
	if x, ok := m.GetDay().(*PatchWindow_Monthly_OccurrenceOfDay_); ok {
		return x.OccurrenceOfDay
	}
	return nil
}

func (m *PatchWindow_Monthly) GetDayOfMonth() int32 {
	if x, ok := m.GetDay().(*PatchWindow_Monthly_DayOfMonth); ok {
		return x.DayOfMonth
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PatchWindow_Monthly) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PatchWindow_Monthly_OneofMarshaler, _PatchWindow_Monthly_OneofUnmarshaler, _PatchWindow_Monthly_OneofSizer, []interface{}{
		(*PatchWindow_Monthly_OccurrenceOfDay_)(nil),
		(*PatchWindow_Monthly_DayOfMonth)(nil),
	}
}

func _PatchWindow_Monthly_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PatchWindow_Monthly)
	// day
	switch x := m.Day.(type) {
	case *PatchWindow_Monthly_OccurrenceOfDay_:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OccurrenceOfDay); err != nil {
			return err
		}
	case *PatchWindow_Monthly_DayOfMonth:
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.DayOfMonth))
	case nil:
	default:
		return fmt.Errorf("PatchWindow_Monthly.Day has unexpected type %T", x)
	}
	return nil
}

func _PatchWindow_Monthly_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PatchWindow_Monthly)
	switch tag {
	case 1: // day.occurrence_of_day
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PatchWindow_Monthly_OccurrenceOfDay)
		err := b.DecodeMessage(msg)
		m.Day = &PatchWindow_Monthly_OccurrenceOfDay_{msg}
		return true, err
	case 2: // day.day_of_month
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Day = &PatchWindow_Monthly_DayOfMonth{int32(x)}
		return true, err
	default:
		return false, nil
	}
}

func _PatchWindow_Monthly_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PatchWindow_Monthly)
	// day
	switch x := m.Day.(type) {
	case *PatchWindow_Monthly_OccurrenceOfDay_:
		s := proto.Size(x.OccurrenceOfDay)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PatchWindow_Monthly_DayOfMonth:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.DayOfMonth))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Represents a day of the week in a month such as the
// third monday of the month.
type PatchWindow_Monthly_OccurrenceOfDay struct {
	// Day of the week to run the patch.
	Day dayofweek.DayOfWeek `protobuf:"varint,1,opt,name=day,proto3,enum=google.type.DayOfWeek" json:"day,omitempty"`
	// Occurrence within the month. Valid values are -1 and from 1 to 4
	// inclusive. Use -1 to signify that this should be the "last" occurrence
	// of this day in the month.
	Occurrence           int32    `protobuf:"varint,2,opt,name=occurrence,proto3" json:"occurrence,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PatchWindow_Monthly_OccurrenceOfDay) Reset()         { *m = PatchWindow_Monthly_OccurrenceOfDay{} }
func (m *PatchWindow_Monthly_OccurrenceOfDay) String() string { return proto.CompactTextString(m) }
func (*PatchWindow_Monthly_OccurrenceOfDay) ProtoMessage()    {}
func (*PatchWindow_Monthly_OccurrenceOfDay) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f33c49af1d47de3, []int{2, 2, 0}
}
func (m *PatchWindow_Monthly_OccurrenceOfDay) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PatchWindow_Monthly_OccurrenceOfDay.Unmarshal(m, b)
}
func (m *PatchWindow_Monthly_OccurrenceOfDay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PatchWindow_Monthly_OccurrenceOfDay.Marshal(b, m, deterministic)
}
func (m *PatchWindow_Monthly_OccurrenceOfDay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PatchWindow_Monthly_OccurrenceOfDay.Merge(m, src)
}
func (m *PatchWindow_Monthly_OccurrenceOfDay) XXX_Size() int {
	return xxx_messageInfo_PatchWindow_Monthly_OccurrenceOfDay.Size(m)
}
func (m *PatchWindow_Monthly_OccurrenceOfDay) XXX_DiscardUnknown() {
	xxx_messageInfo_PatchWindow_Monthly_OccurrenceOfDay.DiscardUnknown(m)
}

var xxx_messageInfo_PatchWindow_Monthly_OccurrenceOfDay proto.InternalMessageInfo

func (m *PatchWindow_Monthly_OccurrenceOfDay) GetDay() dayofweek.DayOfWeek {
	if m != nil {
		return m.Day
	}
	return dayofweek.DayOfWeek_DAY_OF_WEEK_UNSPECIFIED
}

func (m *PatchWindow_Monthly_OccurrenceOfDay) GetOccurrence() int32 {
	if m != nil {
		return m.Occurrence
	}
	return 0
}

// Apt patching will be performed by executing `apt-get update && apt-get
// upgrade`. Additional options can be set to control how this is executed.
type AptSettings struct {
	// Optional. By changing the type to DIST, the patching will be performed
	// using `apt-get dist-upgrade` instead.
	Type                 AptSettings_Type `protobuf:"varint,1,opt,name=type,proto3,enum=google.cloud.osconfig.v1alpha1.AptSettings_Type" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *AptSettings) Reset()         { *m = AptSettings{} }
func (m *AptSettings) String() string { return proto.CompactTextString(m) }
func (*AptSettings) ProtoMessage()    {}
func (*AptSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f33c49af1d47de3, []int{3}
}
func (m *AptSettings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AptSettings.Unmarshal(m, b)
}
func (m *AptSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AptSettings.Marshal(b, m, deterministic)
}
func (m *AptSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AptSettings.Merge(m, src)
}
func (m *AptSettings) XXX_Size() int {
	return xxx_messageInfo_AptSettings.Size(m)
}
func (m *AptSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_AptSettings.DiscardUnknown(m)
}

var xxx_messageInfo_AptSettings proto.InternalMessageInfo

func (m *AptSettings) GetType() AptSettings_Type {
	if m != nil {
		return m.Type
	}
	return AptSettings_TYPE_UNSPECIFIED
}

// Yum patching will be performed by executing `yum update`. Additional options
// can be set to control how this is executed.
//
// Note that not all settings are supported on all platforms.
type YumSettings struct {
	// Optional. Adds the `--security` flag to `yum update`. Not supported on
	// all platforms.
	Security bool `protobuf:"varint,1,opt,name=security,proto3" json:"security,omitempty"`
	// Optional. Will cause patch to run `yum update-minimal` instead.
	Minimal bool `protobuf:"varint,2,opt,name=minimal,proto3" json:"minimal,omitempty"`
	// List of packages to exclude from update. These packages will be excluded by
	// using the yum `--exclude` flag.
	Excludes             []string `protobuf:"bytes,3,rep,name=excludes,proto3" json:"excludes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *YumSettings) Reset()         { *m = YumSettings{} }
func (m *YumSettings) String() string { return proto.CompactTextString(m) }
func (*YumSettings) ProtoMessage()    {}
func (*YumSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f33c49af1d47de3, []int{4}
}
func (m *YumSettings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_YumSettings.Unmarshal(m, b)
}
func (m *YumSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_YumSettings.Marshal(b, m, deterministic)
}
func (m *YumSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_YumSettings.Merge(m, src)
}
func (m *YumSettings) XXX_Size() int {
	return xxx_messageInfo_YumSettings.Size(m)
}
func (m *YumSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_YumSettings.DiscardUnknown(m)
}

var xxx_messageInfo_YumSettings proto.InternalMessageInfo

func (m *YumSettings) GetSecurity() bool {
	if m != nil {
		return m.Security
	}
	return false
}

func (m *YumSettings) GetMinimal() bool {
	if m != nil {
		return m.Minimal
	}
	return false
}

func (m *YumSettings) GetExcludes() []string {
	if m != nil {
		return m.Excludes
	}
	return nil
}

// Googet patching is performed by running `googet update`.
type GooSettings struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GooSettings) Reset()         { *m = GooSettings{} }
func (m *GooSettings) String() string { return proto.CompactTextString(m) }
func (*GooSettings) ProtoMessage()    {}
func (*GooSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f33c49af1d47de3, []int{5}
}
func (m *GooSettings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GooSettings.Unmarshal(m, b)
}
func (m *GooSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GooSettings.Marshal(b, m, deterministic)
}
func (m *GooSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GooSettings.Merge(m, src)
}
func (m *GooSettings) XXX_Size() int {
	return xxx_messageInfo_GooSettings.Size(m)
}
func (m *GooSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_GooSettings.DiscardUnknown(m)
}

var xxx_messageInfo_GooSettings proto.InternalMessageInfo

// Zypper patching is performed by running `zypper refresh && zypper update`
type ZypperSettings struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ZypperSettings) Reset()         { *m = ZypperSettings{} }
func (m *ZypperSettings) String() string { return proto.CompactTextString(m) }
func (*ZypperSettings) ProtoMessage()    {}
func (*ZypperSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f33c49af1d47de3, []int{6}
}
func (m *ZypperSettings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZypperSettings.Unmarshal(m, b)
}
func (m *ZypperSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZypperSettings.Marshal(b, m, deterministic)
}
func (m *ZypperSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZypperSettings.Merge(m, src)
}
func (m *ZypperSettings) XXX_Size() int {
	return xxx_messageInfo_ZypperSettings.Size(m)
}
func (m *ZypperSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_ZypperSettings.DiscardUnknown(m)
}

var xxx_messageInfo_ZypperSettings proto.InternalMessageInfo

// Windows patching is performed using the Windows Update Agent.
type WindowsUpdateSettings struct {
	// Only apply updates of these windows update classifications. If empty, all
	// updates will be applied.
	Classifications []WindowsUpdateSettings_Classification `protobuf:"varint,1,rep,packed,name=classifications,proto3,enum=google.cloud.osconfig.v1alpha1.WindowsUpdateSettings_Classification" json:"classifications,omitempty"`
	// Optional list of KBs to exclude from update.
	Excludes             []string `protobuf:"bytes,2,rep,name=excludes,proto3" json:"excludes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WindowsUpdateSettings) Reset()         { *m = WindowsUpdateSettings{} }
func (m *WindowsUpdateSettings) String() string { return proto.CompactTextString(m) }
func (*WindowsUpdateSettings) ProtoMessage()    {}
func (*WindowsUpdateSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f33c49af1d47de3, []int{7}
}
func (m *WindowsUpdateSettings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WindowsUpdateSettings.Unmarshal(m, b)
}
func (m *WindowsUpdateSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WindowsUpdateSettings.Marshal(b, m, deterministic)
}
func (m *WindowsUpdateSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WindowsUpdateSettings.Merge(m, src)
}
func (m *WindowsUpdateSettings) XXX_Size() int {
	return xxx_messageInfo_WindowsUpdateSettings.Size(m)
}
func (m *WindowsUpdateSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_WindowsUpdateSettings.DiscardUnknown(m)
}

var xxx_messageInfo_WindowsUpdateSettings proto.InternalMessageInfo

func (m *WindowsUpdateSettings) GetClassifications() []WindowsUpdateSettings_Classification {
	if m != nil {
		return m.Classifications
	}
	return nil
}

func (m *WindowsUpdateSettings) GetExcludes() []string {
	if m != nil {
		return m.Excludes
	}
	return nil
}

// A request message for creating a PatchPolicy.
type CreatePatchPolicyRequest struct {
	// The resource name of the parent.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The PatchPolicy to create.
	PatchPolicy          *PatchPolicy `protobuf:"bytes,2,opt,name=patch_policy,json=patchPolicy,proto3" json:"patch_policy,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *CreatePatchPolicyRequest) Reset()         { *m = CreatePatchPolicyRequest{} }
func (m *CreatePatchPolicyRequest) String() string { return proto.CompactTextString(m) }
func (*CreatePatchPolicyRequest) ProtoMessage()    {}
func (*CreatePatchPolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f33c49af1d47de3, []int{8}
}
func (m *CreatePatchPolicyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreatePatchPolicyRequest.Unmarshal(m, b)
}
func (m *CreatePatchPolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreatePatchPolicyRequest.Marshal(b, m, deterministic)
}
func (m *CreatePatchPolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePatchPolicyRequest.Merge(m, src)
}
func (m *CreatePatchPolicyRequest) XXX_Size() int {
	return xxx_messageInfo_CreatePatchPolicyRequest.Size(m)
}
func (m *CreatePatchPolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePatchPolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePatchPolicyRequest proto.InternalMessageInfo

func (m *CreatePatchPolicyRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *CreatePatchPolicyRequest) GetPatchPolicy() *PatchPolicy {
	if m != nil {
		return m.PatchPolicy
	}
	return nil
}

// A request message for retrieving a PatchPolicy.
type GetPatchPolicyRequest struct {
	// The resource name of the PatchPolicy.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPatchPolicyRequest) Reset()         { *m = GetPatchPolicyRequest{} }
func (m *GetPatchPolicyRequest) String() string { return proto.CompactTextString(m) }
func (*GetPatchPolicyRequest) ProtoMessage()    {}
func (*GetPatchPolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f33c49af1d47de3, []int{9}
}
func (m *GetPatchPolicyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPatchPolicyRequest.Unmarshal(m, b)
}
func (m *GetPatchPolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPatchPolicyRequest.Marshal(b, m, deterministic)
}
func (m *GetPatchPolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPatchPolicyRequest.Merge(m, src)
}
func (m *GetPatchPolicyRequest) XXX_Size() int {
	return xxx_messageInfo_GetPatchPolicyRequest.Size(m)
}
func (m *GetPatchPolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPatchPolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPatchPolicyRequest proto.InternalMessageInfo

func (m *GetPatchPolicyRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// A request message for listing PatchPolicy.
type ListPatchPoliciesRequest struct {
	// The resource name of the parent.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The maximum number of PatchPolicies to return.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A pagination token returned from a previous call to ListPatchPolicies
	// that indicates where this listing should continue from.
	// This field is optional.
	PageToken            string   `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListPatchPoliciesRequest) Reset()         { *m = ListPatchPoliciesRequest{} }
func (m *ListPatchPoliciesRequest) String() string { return proto.CompactTextString(m) }
func (*ListPatchPoliciesRequest) ProtoMessage()    {}
func (*ListPatchPoliciesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f33c49af1d47de3, []int{10}
}
func (m *ListPatchPoliciesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPatchPoliciesRequest.Unmarshal(m, b)
}
func (m *ListPatchPoliciesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPatchPoliciesRequest.Marshal(b, m, deterministic)
}
func (m *ListPatchPoliciesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPatchPoliciesRequest.Merge(m, src)
}
func (m *ListPatchPoliciesRequest) XXX_Size() int {
	return xxx_messageInfo_ListPatchPoliciesRequest.Size(m)
}
func (m *ListPatchPoliciesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPatchPoliciesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListPatchPoliciesRequest proto.InternalMessageInfo

func (m *ListPatchPoliciesRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *ListPatchPoliciesRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListPatchPoliciesRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

// A response message for listing PatchPolicies.
type ListPatchPoliciesResponse struct {
	// The list of PatchPolicies.
	PatchPolicies []*PatchPolicy `protobuf:"bytes,1,rep,name=patch_policies,json=patchPolicies,proto3" json:"patch_policies,omitempty"`
	// A pagination token that can be used to get the next page
	// of PatchPolicies.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListPatchPoliciesResponse) Reset()         { *m = ListPatchPoliciesResponse{} }
func (m *ListPatchPoliciesResponse) String() string { return proto.CompactTextString(m) }
func (*ListPatchPoliciesResponse) ProtoMessage()    {}
func (*ListPatchPoliciesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f33c49af1d47de3, []int{11}
}
func (m *ListPatchPoliciesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPatchPoliciesResponse.Unmarshal(m, b)
}
func (m *ListPatchPoliciesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPatchPoliciesResponse.Marshal(b, m, deterministic)
}
func (m *ListPatchPoliciesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPatchPoliciesResponse.Merge(m, src)
}
func (m *ListPatchPoliciesResponse) XXX_Size() int {
	return xxx_messageInfo_ListPatchPoliciesResponse.Size(m)
}
func (m *ListPatchPoliciesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPatchPoliciesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListPatchPoliciesResponse proto.InternalMessageInfo

func (m *ListPatchPoliciesResponse) GetPatchPolicies() []*PatchPolicy {
	if m != nil {
		return m.PatchPolicies
	}
	return nil
}

func (m *ListPatchPoliciesResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

// A request message for updating a PatchPolicy.
type UpdatePatchPolicyRequest struct {
	// The resource name of the PatchPolicy.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The updated PatchPolicy.
	PatchPolicy *PatchPolicy `protobuf:"bytes,2,opt,name=patch_policy,json=patchPolicy,proto3" json:"patch_policy,omitempty"`
	// Field mask that controls which fields of the PatchPolicy should be updated.
	UpdateMask           *field_mask.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UpdatePatchPolicyRequest) Reset()         { *m = UpdatePatchPolicyRequest{} }
func (m *UpdatePatchPolicyRequest) String() string { return proto.CompactTextString(m) }
func (*UpdatePatchPolicyRequest) ProtoMessage()    {}
func (*UpdatePatchPolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f33c49af1d47de3, []int{12}
}
func (m *UpdatePatchPolicyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdatePatchPolicyRequest.Unmarshal(m, b)
}
func (m *UpdatePatchPolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdatePatchPolicyRequest.Marshal(b, m, deterministic)
}
func (m *UpdatePatchPolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePatchPolicyRequest.Merge(m, src)
}
func (m *UpdatePatchPolicyRequest) XXX_Size() int {
	return xxx_messageInfo_UpdatePatchPolicyRequest.Size(m)
}
func (m *UpdatePatchPolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePatchPolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePatchPolicyRequest proto.InternalMessageInfo

func (m *UpdatePatchPolicyRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdatePatchPolicyRequest) GetPatchPolicy() *PatchPolicy {
	if m != nil {
		return m.PatchPolicy
	}
	return nil
}

func (m *UpdatePatchPolicyRequest) GetUpdateMask() *field_mask.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

// A request message for deleting a PatchPolicy.
type DeletePatchPolicyRequest struct {
	// The resource name of the PatchPolicy.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeletePatchPolicyRequest) Reset()         { *m = DeletePatchPolicyRequest{} }
func (m *DeletePatchPolicyRequest) String() string { return proto.CompactTextString(m) }
func (*DeletePatchPolicyRequest) ProtoMessage()    {}
func (*DeletePatchPolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f33c49af1d47de3, []int{13}
}
func (m *DeletePatchPolicyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeletePatchPolicyRequest.Unmarshal(m, b)
}
func (m *DeletePatchPolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeletePatchPolicyRequest.Marshal(b, m, deterministic)
}
func (m *DeletePatchPolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeletePatchPolicyRequest.Merge(m, src)
}
func (m *DeletePatchPolicyRequest) XXX_Size() int {
	return xxx_messageInfo_DeletePatchPolicyRequest.Size(m)
}
func (m *DeletePatchPolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeletePatchPolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeletePatchPolicyRequest proto.InternalMessageInfo

func (m *DeletePatchPolicyRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*PatchPolicy)(nil), "google.cloud.osconfig.v1alpha1.PatchPolicy")
	proto.RegisterMapType((map[string]string)(nil), "google.cloud.osconfig.v1alpha1.PatchPolicy.LabelsEntry")
	proto.RegisterType((*RetryStrategy)(nil), "google.cloud.osconfig.v1alpha1.RetryStrategy")
	proto.RegisterType((*PatchWindow)(nil), "google.cloud.osconfig.v1alpha1.PatchWindow")
	proto.RegisterType((*PatchWindow_Daily)(nil), "google.cloud.osconfig.v1alpha1.PatchWindow.Daily")
	proto.RegisterType((*PatchWindow_Weekly)(nil), "google.cloud.osconfig.v1alpha1.PatchWindow.Weekly")
	proto.RegisterType((*PatchWindow_Monthly)(nil), "google.cloud.osconfig.v1alpha1.PatchWindow.Monthly")
	proto.RegisterType((*PatchWindow_Monthly_OccurrenceOfDay)(nil), "google.cloud.osconfig.v1alpha1.PatchWindow.Monthly.OccurrenceOfDay")
	proto.RegisterType((*AptSettings)(nil), "google.cloud.osconfig.v1alpha1.AptSettings")
	proto.RegisterType((*YumSettings)(nil), "google.cloud.osconfig.v1alpha1.YumSettings")
	proto.RegisterType((*GooSettings)(nil), "google.cloud.osconfig.v1alpha1.GooSettings")
	proto.RegisterType((*ZypperSettings)(nil), "google.cloud.osconfig.v1alpha1.ZypperSettings")
	proto.RegisterType((*WindowsUpdateSettings)(nil), "google.cloud.osconfig.v1alpha1.WindowsUpdateSettings")
	proto.RegisterType((*CreatePatchPolicyRequest)(nil), "google.cloud.osconfig.v1alpha1.CreatePatchPolicyRequest")
	proto.RegisterType((*GetPatchPolicyRequest)(nil), "google.cloud.osconfig.v1alpha1.GetPatchPolicyRequest")
	proto.RegisterType((*ListPatchPoliciesRequest)(nil), "google.cloud.osconfig.v1alpha1.ListPatchPoliciesRequest")
	proto.RegisterType((*ListPatchPoliciesResponse)(nil), "google.cloud.osconfig.v1alpha1.ListPatchPoliciesResponse")
	proto.RegisterType((*UpdatePatchPolicyRequest)(nil), "google.cloud.osconfig.v1alpha1.UpdatePatchPolicyRequest")
	proto.RegisterType((*DeletePatchPolicyRequest)(nil), "google.cloud.osconfig.v1alpha1.DeletePatchPolicyRequest")
	proto.RegisterEnum("google.cloud.osconfig.v1alpha1.PatchPolicy_State", PatchPolicy_State_name, PatchPolicy_State_value)
	proto.RegisterEnum("google.cloud.osconfig.v1alpha1.PatchPolicy_RebootConfig", PatchPolicy_RebootConfig_name, PatchPolicy_RebootConfig_value)
	proto.RegisterEnum("google.cloud.osconfig.v1alpha1.AptSettings_Type", AptSettings_Type_name, AptSettings_Type_value)
	proto.RegisterEnum("google.cloud.osconfig.v1alpha1.WindowsUpdateSettings_Classification", WindowsUpdateSettings_Classification_name, WindowsUpdateSettings_Classification_value)
}

func init() {
	proto.RegisterFile("google/cloud/osconfig/v1alpha1/patch_policies.proto", fileDescriptor_5f33c49af1d47de3)
}

var fileDescriptor_5f33c49af1d47de3 = []byte{
	// 1378 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xdd, 0x6e, 0xdb, 0x46,
	0x13, 0xb5, 0x24, 0x4b, 0x96, 0x86, 0x92, 0xcc, 0x2c, 0x92, 0x80, 0x51, 0x90, 0x7c, 0x02, 0x2f,
	0x02, 0x7f, 0x08, 0x4a, 0xd5, 0x0a, 0x82, 0xa6, 0x0d, 0x7a, 0x21, 0xeb, 0xc7, 0x26, 0xaa, 0x58,
	0xea, 0x8a, 0x4e, 0xe0, 0xb4, 0x85, 0xb0, 0x26, 0x57, 0x0a, 0x61, 0x8a, 0xcb, 0x90, 0x54, 0x1c,
	0x26, 0x77, 0x45, 0x81, 0x3e, 0x42, 0x9f, 0xa4, 0xbd, 0xe9, 0xa3, 0xf4, 0x65, 0x8a, 0x5d, 0x52,
	0x32, 0xa5, 0x3a, 0xb5, 0x15, 0xf4, 0x8e, 0x33, 0x3b, 0xe7, 0xec, 0xcc, 0xfe, 0x9c, 0x1d, 0xc2,
	0x93, 0x29, 0x63, 0x53, 0x87, 0x36, 0x4c, 0x87, 0xcd, 0xad, 0x06, 0x0b, 0x4c, 0xe6, 0x4e, 0xec,
	0x69, 0xe3, 0xdd, 0x3e, 0x71, 0xbc, 0x37, 0x64, 0xbf, 0xe1, 0x91, 0xd0, 0x7c, 0x33, 0xf6, 0x98,
	0x63, 0x9b, 0x36, 0x0d, 0x34, 0xcf, 0x67, 0x21, 0x43, 0x0f, 0x63, 0x90, 0x26, 0x40, 0xda, 0x02,
	0xa4, 0x2d, 0x40, 0xb5, 0x64, 0xbc, 0x21, 0xa2, 0xcf, 0xe6, 0x93, 0x86, 0x35, 0xf7, 0x49, 0x68,
	0x33, 0x37, 0xc6, 0xd7, 0xea, 0xeb, 0xe3, 0x13, 0x9b, 0x3a, 0xd6, 0x78, 0x46, 0x82, 0xf3, 0x24,
	0xe2, 0x7f, 0xeb, 0x11, 0xa1, 0x3d, 0xa3, 0x41, 0x48, 0x66, 0x5e, 0x12, 0x70, 0x3f, 0x09, 0x08,
	0x23, 0x8f, 0x36, 0x2c, 0x12, 0xb1, 0xc9, 0x05, 0xa5, 0xe7, 0x57, 0x0d, 0x72, 0x24, 0x9b, 0x58,
	0x24, 0x8a, 0x07, 0xd5, 0x5f, 0x4b, 0x20, 0x0d, 0x79, 0x55, 0x43, 0x5e, 0x54, 0x84, 0x10, 0x6c,
	0xbb, 0x64, 0x46, 0x95, 0x4c, 0x3d, 0xb3, 0x57, 0xc2, 0xe2, 0x1b, 0xd5, 0x41, 0xb2, 0x68, 0x60,
	0xfa, 0xb6, 0xc7, 0xb3, 0x56, 0xb2, 0x62, 0x28, 0xed, 0x42, 0xcf, 0x41, 0x32, 0x7d, 0x4a, 0x42,
	0x3a, 0xe6, 0xfc, 0x4a, 0xae, 0x9e, 0xd9, 0x93, 0x9a, 0x35, 0x2d, 0x59, 0x98, 0x45, 0xda, 0x9a,
	0xb1, 0x48, 0x1b, 0x43, 0x1c, 0xce, 0x1d, 0x1c, 0x3c, 0xf7, 0xac, 0x25, 0x78, 0xfb, 0x7a, 0x70,
	0x1c, 0x2e, 0xc0, 0x03, 0x28, 0x38, 0xe4, 0x8c, 0x3a, 0x81, 0x92, 0xaf, 0xe7, 0xf6, 0xa4, 0xe6,
	0x57, 0xda, 0xbf, 0xef, 0x86, 0x96, 0x2a, 0x56, 0xeb, 0x0b, 0x64, 0xd7, 0x0d, 0xfd, 0x08, 0x27,
	0x34, 0xe8, 0x10, 0xf2, 0x41, 0x48, 0x42, 0xaa, 0x14, 0xea, 0x99, 0xbd, 0x6a, 0x73, 0x7f, 0x13,
	0xbe, 0x11, 0x07, 0xe2, 0x18, 0x8f, 0x7e, 0x84, 0xea, 0x85, 0xed, 0x5a, 0xec, 0x22, 0x18, 0xc7,
	0xf9, 0x2a, 0x3b, 0xa2, 0xb2, 0xa7, 0xd7, 0x31, 0xbe, 0x8a, 0x51, 0x27, 0x02, 0x34, 0xa2, 0x61,
	0x68, 0xbb, 0xd3, 0x00, 0x57, 0x2e, 0xd2, 0x6e, 0x74, 0x0c, 0xe5, 0xf8, 0x30, 0xc6, 0x6e, 0xa5,
	0x28, 0xb8, 0x1f, 0xdf, 0x28, 0xdb, 0x78, 0x02, 0x2c, 0x79, 0x97, 0x06, 0xfa, 0x09, 0x2a, 0x3e,
	0x3d, 0x63, 0x2c, 0x1c, 0xc7, 0x10, 0xa5, 0x24, 0xca, 0x7f, 0xb6, 0x49, 0xf9, 0x58, 0x10, 0xb4,
	0x45, 0x04, 0x2e, 0xfb, 0x29, 0x0b, 0x19, 0x50, 0xf5, 0x69, 0xe8, 0x47, 0xe3, 0x20, 0xf4, 0x49,
	0x48, 0xa7, 0x91, 0x02, 0x22, 0xe1, 0x2f, 0xae, 0xe3, 0xc7, 0x1c, 0x35, 0x4a, 0x40, 0xb8, 0xe2,
	0xa7, 0x4d, 0xf4, 0x2d, 0xe4, 0x88, 0x17, 0x2a, 0xd2, 0xcd, 0x6a, 0x6f, 0x79, 0xe1, 0x72, 0x35,
	0x39, 0x8e, 0xc3, 0xa3, 0xf9, 0x4c, 0x29, 0xdf, 0x0c, 0x7e, 0x3a, 0x9f, 0x5d, 0xc2, 0xa3, 0xf9,
	0x8c, 0xc3, 0xa7, 0x8c, 0x29, 0x95, 0x9b, 0xc1, 0x0f, 0x19, 0xbb, 0x84, 0x4f, 0x19, 0x43, 0x3d,
	0x28, 0x7c, 0x88, 0x3c, 0x8f, 0xfa, 0x4a, 0x55, 0x30, 0x68, 0xd7, 0x31, 0xbc, 0x16, 0xd1, 0x4b,
	0x92, 0x04, 0x5d, 0xfb, 0x1a, 0xa4, 0xd4, 0x39, 0x46, 0x32, 0xe4, 0xce, 0x69, 0x94, 0xdc, 0x5f,
	0xfe, 0x89, 0x6e, 0x43, 0xfe, 0x1d, 0x71, 0xe6, 0x34, 0xb9, 0xb8, 0xb1, 0xf1, 0x4d, 0xf6, 0x59,
	0x46, 0x7d, 0x06, 0x79, 0x71, 0x64, 0xd1, 0x1d, 0xb8, 0x35, 0x32, 0x5a, 0x46, 0x77, 0x7c, 0x72,
	0x3c, 0x1a, 0x76, 0xdb, 0x7a, 0x4f, 0xef, 0x76, 0xe4, 0x2d, 0x04, 0x50, 0x68, 0xb5, 0x0d, 0xfd,
	0x65, 0x57, 0xce, 0xa0, 0x32, 0x14, 0xf5, 0xe3, 0xc4, 0xca, 0xaa, 0xdf, 0x43, 0x39, 0xbd, 0xdb,
	0xe8, 0x01, 0xdc, 0xc3, 0xdd, 0x83, 0xc1, 0xc0, 0x18, 0xb7, 0x07, 0xc7, 0x3d, 0xfd, 0x70, 0x8d,
	0x48, 0x82, 0x9d, 0x4e, 0xb7, 0xd7, 0x3a, 0xe9, 0x1b, 0x72, 0x46, 0xb0, 0xf6, 0x5f, 0xb5, 0x4e,
	0x47, 0x72, 0x16, 0x95, 0x20, 0x7f, 0xdc, 0x7d, 0xd9, 0xc5, 0x72, 0x4e, 0xfd, 0x3f, 0x54, 0x56,
	0x36, 0x1b, 0x29, 0xb0, 0x43, 0x5d, 0x72, 0xe6, 0x50, 0x4b, 0x54, 0x53, 0xc4, 0x0b, 0x53, 0xfd,
	0x23, 0x9f, 0x88, 0x56, 0x72, 0x78, 0x9f, 0x02, 0x04, 0x21, 0xf1, 0xc3, 0x58, 0x40, 0x32, 0x62,
	0x39, 0xef, 0x2e, 0x96, 0x93, 0xcb, 0x9e, 0x10, 0x8f, 0xc1, 0xa4, 0x43, 0x22, 0x5c, 0x12, 0x91,
	0x42, 0x3b, 0x9e, 0x42, 0x71, 0x21, 0xc5, 0x62, 0x6d, 0xa4, 0xe6, 0xbd, 0x7f, 0xa8, 0x4e, 0x27,
	0x09, 0xc0, 0xcb, 0x50, 0xa4, 0x43, 0xde, 0x22, 0xb6, 0x13, 0x25, 0x32, 0xb7, 0xbf, 0xc1, 0x9d,
	0xd3, 0x3a, 0x1c, 0x78, 0xb4, 0x85, 0x63, 0x06, 0xd4, 0x87, 0x02, 0x17, 0x6a, 0x27, 0x4a, 0x54,
	0xaf, 0xb9, 0x09, 0xd7, 0x2b, 0x81, 0x3c, 0xda, 0xc2, 0x09, 0x07, 0x1a, 0xc0, 0xce, 0x8c, 0xb9,
	0xe1, 0x1b, 0x27, 0x52, 0xf2, 0x82, 0xee, 0xc9, 0x26, 0x74, 0x2f, 0x62, 0xe8, 0xd1, 0x16, 0x5e,
	0xb0, 0xd4, 0x76, 0x20, 0x2f, 0x12, 0xae, 0x35, 0xa1, 0x10, 0xcf, 0x86, 0xf6, 0x20, 0x67, 0x91,
	0xf8, 0x78, 0x55, 0xd7, 0xd6, 0xb8, 0x43, 0xa2, 0xc1, 0x84, 0x87, 0x61, 0x1e, 0x52, 0xfb, 0x25,
	0x0b, 0x3b, 0x09, 0x27, 0x7a, 0x0b, 0xb7, 0x98, 0x69, 0xce, 0x7d, 0x9f, 0xba, 0x26, 0x1d, 0xb3,
	0xc9, 0x78, 0xc1, 0x21, 0x35, 0xdb, 0x9f, 0x91, 0xa3, 0x36, 0x58, 0x92, 0x89, 0x4d, 0x3d, 0xda,
	0xc2, 0xbb, 0x6c, 0xd5, 0x85, 0x54, 0x28, 0x5b, 0x24, 0xe2, 0x73, 0x89, 0x6a, 0xc4, 0x06, 0xe7,
	0x8f, 0xb6, 0x30, 0x58, 0x3c, 0x4d, 0x41, 0x54, 0xfb, 0x01, 0x76, 0xd7, 0x98, 0x6e, 0x5e, 0x1f,
	0x7a, 0x08, 0x70, 0x39, 0x67, 0x4c, 0x8f, 0x53, 0x9e, 0x83, 0xbc, 0x60, 0x3a, 0x90, 0xa0, 0x34,
	0xf1, 0xe9, 0xdb, 0x39, 0x75, 0xcd, 0x48, 0xfd, 0x08, 0x52, 0x4a, 0x85, 0x50, 0x07, 0xb6, 0x39,
	0x73, 0x32, 0xdb, 0x97, 0x1b, 0x08, 0x98, 0x66, 0x44, 0x1e, 0xc5, 0x02, 0xad, 0x3e, 0x82, 0x6d,
	0x6e, 0xa1, 0xdb, 0x20, 0x1b, 0xa7, 0xc3, 0xf5, 0x3b, 0x5c, 0x84, 0xed, 0x8e, 0x3e, 0x32, 0xe4,
	0x8c, 0x3a, 0x06, 0x29, 0xa5, 0x61, 0xa8, 0x06, 0xc5, 0x80, 0x9a, 0x73, 0xdf, 0x0e, 0xa3, 0xe4,
	0x7e, 0x2d, 0x6d, 0x7e, 0xf5, 0x66, 0xb6, 0x6b, 0xcf, 0x88, 0x23, 0x0a, 0x2b, 0xe2, 0x85, 0xc9,
	0x51, 0xf4, 0xbd, 0xe9, 0xcc, 0x2d, 0x1a, 0x28, 0xb9, 0x7a, 0x6e, 0xaf, 0x84, 0x97, 0xb6, 0x5a,
	0x01, 0x29, 0xa5, 0x72, 0xaa, 0x0c, 0xd5, 0x55, 0xc9, 0x52, 0xff, 0xca, 0xc2, 0x9d, 0x2b, 0x5f,
	0x37, 0xe4, 0xc2, 0xae, 0xe9, 0x90, 0x20, 0xb0, 0x27, 0xb6, 0x29, 0x6e, 0x59, 0xa0, 0x64, 0xea,
	0xb9, 0xbd, 0x6a, 0xb3, 0xf3, 0x59, 0xaf, 0xa5, 0xd6, 0x5e, 0x21, 0xc3, 0xeb, 0xe4, 0x2b, 0x65,
	0x64, 0xd7, 0xca, 0xf8, 0x3d, 0x03, 0xd5, 0x55, 0x3c, 0x7a, 0x08, 0xb5, 0x76, 0xbf, 0x35, 0x1a,
	0xe9, 0x3d, 0xbd, 0xdd, 0x32, 0xf4, 0xc1, 0xf1, 0xda, 0x22, 0x97, 0xa1, 0xd8, 0xc6, 0xba, 0xa1,
	0xb7, 0x5b, 0xfd, 0x58, 0x2a, 0x47, 0xdd, 0xf6, 0x09, 0xd6, 0x8d, 0x53, 0x39, 0x8b, 0xaa, 0x00,
	0x9d, 0x6e, 0x4f, 0x3f, 0xd6, 0x39, 0x4e, 0xce, 0x71, 0xf9, 0xeb, 0x60, 0x9d, 0x6b, 0xde, 0x36,
	0x92, 0xa1, 0xdc, 0xeb, 0xb6, 0x8c, 0x13, 0xdc, 0x1d, 0x0f, 0x5b, 0xed, 0xef, 0xe4, 0x3c, 0xf7,
	0x8c, 0xba, 0xf8, 0xa5, 0xde, 0x4e, 0x3c, 0x05, 0xbe, 0x81, 0xc6, 0x60, 0xd0, 0x97, 0x77, 0xd0,
	0x2d, 0xa8, 0x9c, 0x0c, 0x3b, 0x5c, 0xa6, 0xf1, 0xa0, 0xdf, 0x3f, 0x19, 0xca, 0x45, 0x4e, 0x16,
	0xbb, 0xe4, 0x92, 0xfa, 0x73, 0x06, 0x94, 0xb6, 0x68, 0xab, 0x52, 0x8f, 0x32, 0xe6, 0x47, 0x2f,
	0x08, 0xd1, 0x5d, 0x28, 0x78, 0xc4, 0xa7, 0x6e, 0x98, 0xbc, 0x0c, 0x89, 0x75, 0xd9, 0x47, 0x88,
	0xa6, 0x36, 0x4a, 0x74, 0xf0, 0xf1, 0x06, 0xcf, 0x7e, 0xd2, 0x47, 0xc4, 0x86, 0xfa, 0x18, 0xee,
	0x1c, 0xd2, 0xf0, 0x8a, 0x04, 0xae, 0x68, 0x2c, 0x55, 0x17, 0x94, 0xbe, 0x1d, 0xa4, 0xa2, 0x6d,
	0x1a, 0x5c, 0x97, 0xf0, 0x7d, 0x28, 0x79, 0x64, 0x4a, 0xc7, 0x81, 0xfd, 0x61, 0x71, 0xeb, 0x8a,
	0xdc, 0x31, 0xb2, 0x3f, 0x50, 0xf4, 0x00, 0x40, 0x0c, 0x86, 0xec, 0x9c, 0xba, 0x42, 0x9f, 0x4b,
	0x58, 0x84, 0x1b, 0xdc, 0xa1, 0xfe, 0x96, 0x81, 0x7b, 0x57, 0x4c, 0x18, 0x78, 0xcc, 0x0d, 0x28,
	0xc2, 0x50, 0x5d, 0xed, 0xef, 0xc5, 0x11, 0xdc, 0x70, 0x31, 0x2a, 0x5e, 0x9a, 0x1b, 0x3d, 0x82,
	0x5d, 0x97, 0xbe, 0x0f, 0xc7, 0xa9, 0xac, 0xe2, 0x57, 0xb8, 0xc2, 0xdd, 0xc3, 0x65, 0x66, 0x7f,
	0x66, 0x40, 0x89, 0x8f, 0xf0, 0xcd, 0x96, 0xee, 0xbf, 0xde, 0xb7, 0x54, 0x13, 0xce, 0xff, 0x3b,
	0x3e, 0xd9, 0xc1, 0xf7, 0xf8, 0xaf, 0xc9, 0x0b, 0x12, 0x9c, 0x2f, 0x9a, 0x70, 0xfe, 0xad, 0x6a,
	0xa0, 0x74, 0xa8, 0x43, 0x6f, 0x9a, 0xfc, 0xc1, 0x47, 0x50, 0x4d, 0x36, 0xbb, 0x26, 0xd7, 0x83,
	0xca, 0xca, 0x36, 0xbd, 0xee, 0x25, 0xe1, 0x53, 0xe6, 0x10, 0x77, 0xaa, 0x31, 0x7f, 0xda, 0x98,
	0x52, 0x57, 0x64, 0xd6, 0x88, 0x87, 0x88, 0x67, 0x07, 0x9f, 0xfa, 0x75, 0x7b, 0xbe, 0xf0, 0x9c,
	0x15, 0x04, 0xe4, 0xc9, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x7c, 0x50, 0xc8, 0x42, 0xec, 0x0d,
	0x00, 0x00,
}
