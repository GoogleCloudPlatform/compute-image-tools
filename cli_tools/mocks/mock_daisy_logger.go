//  Copyright 2021 Google Inc. All Rights Reserved.
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: daisy/logger.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	daisy "github.com/GoogleCloudPlatform/compute-image-tools/daisy"
)

// MockDaisyLogger is a mock of Logger interface.
type MockDaisyLogger struct {
	ctrl     *gomock.Controller
	recorder *MockDaisyLoggerMockRecorder
}

// MockDaisyLoggerMockRecorder is the mock recorder for MockDaisyLogger.
type MockDaisyLoggerMockRecorder struct {
	mock *MockDaisyLogger
}

// NewMockDaisyLogger creates a new mock instance.
func NewMockDaisyLogger(ctrl *gomock.Controller) *MockDaisyLogger {
	mock := &MockDaisyLogger{ctrl: ctrl}
	mock.recorder = &MockDaisyLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDaisyLogger) EXPECT() *MockDaisyLoggerMockRecorder {
	return m.recorder
}

// AppendSerialPortLogs mocks base method.
func (m *MockDaisyLogger) AppendSerialPortLogs(arg0 *daisy.Workflow, arg1, arg2 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AppendSerialPortLogs", arg0, arg1, arg2)
}

// AppendSerialPortLogs indicates an expected call of AppendSerialPortLogs.
func (mr *MockDaisyLoggerMockRecorder) AppendSerialPortLogs(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendSerialPortLogs", reflect.TypeOf((*MockDaisyLogger)(nil).AppendSerialPortLogs), arg0, arg1, arg2)
}

// WriteSerialPortLogsToCloudLogging mocks base method.
func (m *MockDaisyLogger) WriteSerialPortLogsToCloudLogging(arg0 *daisy.Workflow, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteSerialPortLogsToCloudLogging", arg0, arg1)
}

// WriteSerialPortLogsToCloudLogging indicates an expected call of WriteSerialPortLogsToCloudLogging.
func (mr *MockDaisyLoggerMockRecorder) WriteSerialPortLogsToCloudLogging(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteSerialPortLogsToCloudLogging", reflect.TypeOf((*MockDaisyLogger)(nil).WriteSerialPortLogsToCloudLogging), arg0, arg1)
}

// Flush mocks base method.
func (m *MockDaisyLogger) Flush() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Flush")
}

// Flush indicates an expected call of Flush.
func (mr *MockDaisyLoggerMockRecorder) Flush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockDaisyLogger)(nil).Flush))
}

// ReadSerialPortLogs mocks base method.
func (m *MockDaisyLogger) ReadSerialPortLogs() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadSerialPortLogs")
	ret0, _ := ret[0].([]string)
	return ret0
}

// ReadSerialPortLogs indicates an expected call of ReadSerialPortLogs.
func (mr *MockDaisyLoggerMockRecorder) ReadSerialPortLogs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadSerialPortLogs", reflect.TypeOf((*MockDaisyLogger)(nil).ReadSerialPortLogs))
}

// WriteLogEntry mocks base method.
func (m *MockDaisyLogger) WriteLogEntry(arg0 *daisy.LogEntry) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteLogEntry", arg0)
}

// WriteLogEntry indicates an expected call of WriteLogEntry.
func (mr *MockDaisyLoggerMockRecorder) WriteLogEntry(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteLogEntry", reflect.TypeOf((*MockDaisyLogger)(nil).WriteLogEntry), arg0)
}
