// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/GoogleCloudPlatform/compute-image-tools/cli_tools/common/domain (interfaces: ImageDeleter)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	domain "github.com/GoogleCloudPlatform/compute-image-tools/cli_tools/common/domain"
)

// MockImageDeleter is a mock of ImageDeleter interface.
type MockImageDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockImageDeleterMockRecorder
}

// MockImageDeleterMockRecorder is the mock recorder for MockImageDeleter.
type MockImageDeleterMockRecorder struct {
	mock *MockImageDeleter
}

// NewMockImageDeleter creates a new mock instance.
func NewMockImageDeleter(ctrl *gomock.Controller) *MockImageDeleter {
	mock := &MockImageDeleter{ctrl: ctrl}
	mock.recorder = &MockImageDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageDeleter) EXPECT() *MockImageDeleterMockRecorder {
	return m.recorder
}

// DeleteImagesIfExist mocks base method.
func (m *MockImageDeleter) DeleteImagesIfExist(arg0 []domain.Image) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteImagesIfExist", arg0)
}

// DeleteImagesIfExist indicates an expected call of DeleteImagesIfExist.
func (mr *MockImageDeleterMockRecorder) DeleteImagesIfExist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImagesIfExist", reflect.TypeOf((*MockImageDeleter)(nil).DeleteImagesIfExist), arg0)
}
