//  Copyright 2020 Google Inc. All Rights Reserved.
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/GoogleCloudPlatform/compute-image-tools/cli_tools/common/domain (interfaces: StorageObject)

// Package mocks is a generated GoMock package.
package mocks

import (
	storage "cloud.google.com/go/storage"
	domain "github.com/GoogleCloudPlatform/compute-image-tools/cli_tools/common/domain"
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// MockStorageObject is a mock of StorageObject interface
type MockStorageObject struct {
	ctrl     *gomock.Controller
	recorder *MockStorageObjectMockRecorder
}

// MockStorageObjectMockRecorder is the mock recorder for MockStorageObject
type MockStorageObjectMockRecorder struct {
	mock *MockStorageObject
}

// NewMockStorageObject creates a new mock instance
func NewMockStorageObject(ctrl *gomock.Controller) *MockStorageObject {
	mock := &MockStorageObject{ctrl: ctrl}
	mock.recorder = &MockStorageObjectMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorageObject) EXPECT() *MockStorageObjectMockRecorder {
	return m.recorder
}

// Compose mocks base method
func (m *MockStorageObject) Compose(arg0 ...domain.StorageObject) (*storage.ObjectAttrs, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Compose", varargs...)
	ret0, _ := ret[0].(*storage.ObjectAttrs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Compose indicates an expected call of Compose
func (mr *MockStorageObjectMockRecorder) Compose(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compose", reflect.TypeOf((*MockStorageObject)(nil).Compose), arg0...)
}

// CopyFrom mocks base method
func (m *MockStorageObject) CopyFrom(arg0 domain.StorageObject) (*storage.ObjectAttrs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyFrom", arg0)
	ret0, _ := ret[0].(*storage.ObjectAttrs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyFrom indicates an expected call of CopyFrom
func (mr *MockStorageObjectMockRecorder) CopyFrom(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFrom", reflect.TypeOf((*MockStorageObject)(nil).CopyFrom), arg0)
}

// Delete mocks base method
func (m *MockStorageObject) Delete() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete")
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockStorageObjectMockRecorder) Delete() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStorageObject)(nil).Delete))
}

// GetObjectHandle mocks base method
func (m *MockStorageObject) GetObjectHandle() *storage.ObjectHandle {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectHandle")
	ret0, _ := ret[0].(*storage.ObjectHandle)
	return ret0
}

// GetObjectHandle indicates an expected call of GetObjectHandle
func (mr *MockStorageObjectMockRecorder) GetObjectHandle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectHandle", reflect.TypeOf((*MockStorageObject)(nil).GetObjectHandle))
}

// NewReader mocks base method
func (m *MockStorageObject) NewReader() (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewReader")
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewReader indicates an expected call of NewReader
func (mr *MockStorageObjectMockRecorder) NewReader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewReader", reflect.TypeOf((*MockStorageObject)(nil).NewReader))
}

// NewWriter mocks base method
func (m *MockStorageObject) NewWriter() io.WriteCloser {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewWriter")
	ret0, _ := ret[0].(io.WriteCloser)
	return ret0
}

// NewWriter indicates an expected call of NewWriter
func (mr *MockStorageObjectMockRecorder) NewWriter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewWriter", reflect.TypeOf((*MockStorageObject)(nil).NewWriter))
}

// ObjectName mocks base method
func (m *MockStorageObject) ObjectName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ObjectName indicates an expected call of ObjectName
func (mr *MockStorageObjectMockRecorder) ObjectName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectName", reflect.TypeOf((*MockStorageObject)(nil).ObjectName))
}
