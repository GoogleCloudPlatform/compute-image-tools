//  Copyright 2020 Google Inc. All Rights Reserved.
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/GoogleCloudPlatform/compute-image-tools/cli_tools/common/domain (interfaces: StorageObjectInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	storage "cloud.google.com/go/storage"
	domain "github.com/GoogleCloudPlatform/compute-image-tools/cli_tools/common/domain"
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// MockStorageObjectInterface is a mock of StorageObjectInterface interface
type MockStorageObjectInterface struct {
	ctrl     *gomock.Controller
	recorder *MockStorageObjectInterfaceMockRecorder
}

// MockStorageObjectInterfaceMockRecorder is the mock recorder for MockStorageObjectInterface
type MockStorageObjectInterfaceMockRecorder struct {
	mock *MockStorageObjectInterface
}

// NewMockStorageObjectInterface creates a new mock instance
func NewMockStorageObjectInterface(ctrl *gomock.Controller) *MockStorageObjectInterface {
	mock := &MockStorageObjectInterface{ctrl: ctrl}
	mock.recorder = &MockStorageObjectInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorageObjectInterface) EXPECT() *MockStorageObjectInterfaceMockRecorder {
	return m.recorder
}

// Compose mocks base method
func (m *MockStorageObjectInterface) Compose(arg0 ...domain.StorageObjectInterface) (*storage.ObjectAttrs, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Compose", varargs...)
	ret0, _ := ret[0].(*storage.ObjectAttrs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Compose indicates an expected call of Compose
func (mr *MockStorageObjectInterfaceMockRecorder) Compose(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compose", reflect.TypeOf((*MockStorageObjectInterface)(nil).Compose), arg0...)
}

// Copy mocks base method
func (m *MockStorageObjectInterface) Copy(arg0 domain.StorageObjectInterface) (*storage.ObjectAttrs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Copy", arg0)
	ret0, _ := ret[0].(*storage.ObjectAttrs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Copy indicates an expected call of Copy
func (mr *MockStorageObjectInterfaceMockRecorder) Copy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Copy", reflect.TypeOf((*MockStorageObjectInterface)(nil).Copy), arg0)
}

// Delete mocks base method
func (m *MockStorageObjectInterface) Delete() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete")
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockStorageObjectInterfaceMockRecorder) Delete() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStorageObjectInterface)(nil).Delete))
}

// GetObjectHandle mocks base method
func (m *MockStorageObjectInterface) GetObjectHandle() *storage.ObjectHandle {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectHandle")
	ret0, _ := ret[0].(*storage.ObjectHandle)
	return ret0
}

// GetObjectHandle indicates an expected call of GetObjectHandle
func (mr *MockStorageObjectInterfaceMockRecorder) GetObjectHandle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectHandle", reflect.TypeOf((*MockStorageObjectInterface)(nil).GetObjectHandle))
}

// NewReader mocks base method
func (m *MockStorageObjectInterface) NewReader() (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewReader")
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewReader indicates an expected call of NewReader
func (mr *MockStorageObjectInterfaceMockRecorder) NewReader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewReader", reflect.TypeOf((*MockStorageObjectInterface)(nil).NewReader))
}

// NewWriter mocks base method
func (m *MockStorageObjectInterface) NewWriter() io.WriteCloser {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewWriter")
	ret0, _ := ret[0].(io.WriteCloser)
	return ret0
}

// NewWriter indicates an expected call of NewWriter
func (mr *MockStorageObjectInterfaceMockRecorder) NewWriter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewWriter", reflect.TypeOf((*MockStorageObjectInterface)(nil).NewWriter))
}

// ObjectName mocks base method
func (m *MockStorageObjectInterface) ObjectName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ObjectName indicates an expected call of ObjectName
func (mr *MockStorageObjectInterfaceMockRecorder) ObjectName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectName", reflect.TypeOf((*MockStorageObjectInterface)(nil).ObjectName))
}
