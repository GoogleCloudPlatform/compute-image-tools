// Code generated by MockGen. DO NOT EDIT.
// Source: workflow_hook.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	daisy "github.com/GoogleCloudPlatform/compute-image-tools/daisy"
)

// MockWorkflowHook is a mock of WorkflowHook interface.
type MockWorkflowHook struct {
	ctrl     *gomock.Controller
	recorder *MockWorkflowHookMockRecorder
}

// MockWorkflowHookMockRecorder is the mock recorder for MockWorkflowHook.
type MockWorkflowHookMockRecorder struct {
	mock *MockWorkflowHook
}

// NewMockWorkflowHook creates a new mock instance.
func NewMockWorkflowHook(ctrl *gomock.Controller) *MockWorkflowHook {
	mock := &MockWorkflowHook{ctrl: ctrl}
	mock.recorder = &MockWorkflowHookMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkflowHook) EXPECT() *MockWorkflowHookMockRecorder {
	return m.recorder
}

// PostRunHook mocks base method.
func (m *MockWorkflowHook) PostRunHook(err error) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostRunHook", err)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostRunHook indicates an expected call of PostRunHook.
func (mr *MockWorkflowHookMockRecorder) PostRunHook(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostRunHook", reflect.TypeOf((*MockWorkflowHook)(nil).PostRunHook), err)
}

// PreRunHook mocks base method.
func (m *MockWorkflowHook) PreRunHook(wf *daisy.Workflow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreRunHook", wf)
	ret0, _ := ret[0].(error)
	return ret0
}

// PreRunHook indicates an expected call of PreRunHook.
func (mr *MockWorkflowHookMockRecorder) PreRunHook(wf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreRunHook", reflect.TypeOf((*MockWorkflowHook)(nil).PreRunHook), wf)
}
