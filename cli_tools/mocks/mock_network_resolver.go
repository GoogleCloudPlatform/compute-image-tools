//  Copyright 2021 Google Inc. All Rights Reserved.
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/GoogleCloudPlatform/compute-image-tools/cli_tools/common/utils/param (interfaces: NetworkResolver)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNetworkResolver is a mock of NetworkResolver interface.
type MockNetworkResolver struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkResolverMockRecorder
}

// MockNetworkResolverMockRecorder is the mock recorder for MockNetworkResolver.
type MockNetworkResolverMockRecorder struct {
	mock *MockNetworkResolver
}

// NewMockNetworkResolver creates a new mock instance.
func NewMockNetworkResolver(ctrl *gomock.Controller) *MockNetworkResolver {
	mock := &MockNetworkResolver{ctrl: ctrl}
	mock.recorder = &MockNetworkResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkResolver) EXPECT() *MockNetworkResolverMockRecorder {
	return m.recorder
}

// ResolveAndValidateNetworkAndSubnet mocks base method.
func (m *MockNetworkResolver) Resolve(originalNetwork, originalSubnet, region, project string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resolve", originalNetwork, originalSubnet, region, project)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ResolveAndValidateNetworkAndSubnet indicates an expected call of ResolveAndValidateNetworkAndSubnet.
func (mr *MockNetworkResolverMockRecorder) ResolveAndValidateNetworkAndSubnet(originalNetwork, originalSubnet, region, project interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockNetworkResolver)(nil).Resolve), originalNetwork, originalSubnet, region, project)
}
