// Code generated by MockGen. DO NOT EDIT.
// Source: traversal.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	daisy "github.com/GoogleCloudPlatform/compute-image-tools/daisy"
)

// MockWorkflowTraversal is a mock of WorkflowTraversal interface.
type MockWorkflowTraversal struct {
	ctrl     *gomock.Controller
	recorder *MockWorkflowTraversalMockRecorder
}

// MockWorkflowTraversalMockRecorder is the mock recorder for MockWorkflowTraversal.
type MockWorkflowTraversalMockRecorder struct {
	mock *MockWorkflowTraversal
}

// NewMockWorkflowTraversal creates a new mock instance.
func NewMockWorkflowTraversal(ctrl *gomock.Controller) *MockWorkflowTraversal {
	mock := &MockWorkflowTraversal{ctrl: ctrl}
	mock.recorder = &MockWorkflowTraversalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkflowTraversal) EXPECT() *MockWorkflowTraversalMockRecorder {
	return m.recorder
}

// Traverse mocks base method.
func (m *MockWorkflowTraversal) Traverse(wf *daisy.Workflow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Traverse", wf)
	ret0, _ := ret[0].(error)
	return ret0
}

// Traverse indicates an expected call of Traverse.
func (mr *MockWorkflowTraversalMockRecorder) Traverse(wf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Traverse", reflect.TypeOf((*MockWorkflowTraversal)(nil).Traverse), wf)
}
