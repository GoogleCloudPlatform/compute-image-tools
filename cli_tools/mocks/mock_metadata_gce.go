//  Copyright 2019 Google Inc. All Rights Reserved.
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/GoogleCloudPlatform/compute-image-tools/cli_tools/common/domain (interfaces: MetadataGCEInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMetadataGCEInterface is a mock of MetadataGCEInterface interface
type MockMetadataGCEInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMetadataGCEInterfaceMockRecorder
}

// MockMetadataGCEInterfaceMockRecorder is the mock recorder for MockMetadataGCEInterface
type MockMetadataGCEInterfaceMockRecorder struct {
	mock *MockMetadataGCEInterface
}

// NewMockMetadataGCEInterface creates a new mock instance
func NewMockMetadataGCEInterface(ctrl *gomock.Controller) *MockMetadataGCEInterface {
	mock := &MockMetadataGCEInterface{ctrl: ctrl}
	mock.recorder = &MockMetadataGCEInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetadataGCEInterface) EXPECT() *MockMetadataGCEInterfaceMockRecorder {
	return m.recorder
}

// OnGCE mocks base method
func (m *MockMetadataGCEInterface) OnGCE() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnGCE")
	ret0, _ := ret[0].(bool)
	return ret0
}

// OnGCE indicates an expected call of OnGCE
func (mr *MockMetadataGCEInterfaceMockRecorder) OnGCE() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnGCE", reflect.TypeOf((*MockMetadataGCEInterface)(nil).OnGCE))
}

// ProjectID mocks base method
func (m *MockMetadataGCEInterface) ProjectID() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectID")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectID indicates an expected call of ProjectID
func (mr *MockMetadataGCEInterfaceMockRecorder) ProjectID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectID", reflect.TypeOf((*MockMetadataGCEInterface)(nil).ProjectID))
}

// Zone mocks base method
func (m *MockMetadataGCEInterface) Zone() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Zone")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Zone indicates an expected call of Zone
func (mr *MockMetadataGCEInterfaceMockRecorder) Zone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Zone", reflect.TypeOf((*MockMetadataGCEInterface)(nil).Zone))
}
