//  Copyright 2021 Google Inc. All Rights Reserved.
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: executor.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockShellExecutor is a mock of Executor interface.
type MockShellExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockShellExecutorMockRecorder
}

// MockShellExecutorMockRecorder is the mock recorder for MockShellExecutor.
type MockShellExecutorMockRecorder struct {
	mock *MockShellExecutor
}

// NewMockShellExecutor creates a new mock instance.
func NewMockShellExecutor(ctrl *gomock.Controller) *MockShellExecutor {
	mock := &MockShellExecutor{ctrl: ctrl}
	mock.recorder = &MockShellExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShellExecutor) EXPECT() *MockShellExecutorMockRecorder {
	return m.recorder
}

// Exec mocks base method.
func (m *MockShellExecutor) Exec(program string, args ...string) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{program}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockShellExecutorMockRecorder) Exec(program interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{program}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockShellExecutor)(nil).Exec), varargs...)
}

// ExecLines mocks base method.
func (m *MockShellExecutor) ExecLines(program string, args ...string) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{program}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecLines", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecLines indicates an expected call of ExecLines.
func (mr *MockShellExecutorMockRecorder) ExecLines(program interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{program}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecLines", reflect.TypeOf((*MockShellExecutor)(nil).ExecLines), varargs...)
}
