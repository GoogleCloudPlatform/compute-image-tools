// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google/cloud/osconfig/v1alpha1/patch_status.proto

package osconfig

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/type/dayofweek"
	_ "google.golang.org/genproto/googleapis/type/timeofday"
	_ "google.golang.org/genproto/protobuf/field_mask"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// This represents the different statuses that an instances applying a patch
// can be in. Typically they would transition from these various statuses.
// STARTED->SUCCEEDED
// STARTED->FAILED
// STARTED->SUCCEEDED_REBOOT_NEEDED->SUCCEEDED
// STARTED->SUCCEEDED_REBOOT_NEEDED (if reboot is disabled)
type InstancePatchStatus int32

const (
	// When unspecified, the status will be STARTED
	InstancePatchStatus_INSTANCE_PATCH_STATUS_UNSPECIFIED InstancePatchStatus = 0
	// The action has started and is currently executing
	InstancePatchStatus_STARTED InstancePatchStatus = 1
	// The action completed successfully
	InstancePatchStatus_SUCCEEDED InstancePatchStatus = 2
	// The action completed with failures
	InstancePatchStatus_FAILED InstancePatchStatus = 3
	// The action completed successfully, but requires a reboot.
	InstancePatchStatus_SUCCEEDED_REBOOT_NEEDED InstancePatchStatus = 4
)

var InstancePatchStatus_name = map[int32]string{
	0: "INSTANCE_PATCH_STATUS_UNSPECIFIED",
	1: "STARTED",
	2: "SUCCEEDED",
	3: "FAILED",
	4: "SUCCEEDED_REBOOT_NEEDED",
}

var InstancePatchStatus_value = map[string]int32{
	"INSTANCE_PATCH_STATUS_UNSPECIFIED": 0,
	"STARTED":                           1,
	"SUCCEEDED":                         2,
	"FAILED":                            3,
	"SUCCEEDED_REBOOT_NEEDED":           4,
}

func (x InstancePatchStatus) String() string {
	return proto.EnumName(InstancePatchStatus_name, int32(x))
}

func (InstancePatchStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_26bcbb0c9b622c1f, []int{0}
}

// The record of a patch being applied on a VM instance.
type InstancePatchReport struct {
	// The patch policy this instance is applying, in the form of the relative
	// resource name of PatchPolicy. For example
	// 'projects/12345/patchPolicies/foo'.
	PatchPolicy string `protobuf:"bytes,1,opt,name=patch_policy,json=patchPolicy,proto3" json:"patch_policy,omitempty"`
	// The version the PatchPolicy being acted on.
	PatchVersion int64 `protobuf:"varint,2,opt,name=patch_version,json=patchVersion,proto3" json:"patch_version,omitempty"`
	// The time that this patch was scheduled to start at.
	ScheduledStartTime *timestamp.Timestamp `protobuf:"bytes,3,opt,name=scheduled_start_time,json=scheduledStartTime,proto3" json:"scheduled_start_time,omitempty"`
	// The actual time this patch took place on the client
	ActualStartTime *timestamp.Timestamp `protobuf:"bytes,4,opt,name=actual_start_time,json=actualStartTime,proto3" json:"actual_start_time,omitempty"`
	// The time that this state change occurred on the client. For instance
	// the start time, end time, or a failure time.
	StatusChangeTime *timestamp.Timestamp `protobuf:"bytes,5,opt,name=status_change_time,json=statusChangeTime,proto3" json:"status_change_time,omitempty"`
	// This is the project this instance is associated with.
	Project string `protobuf:"bytes,6,opt,name=project,proto3" json:"project,omitempty"`
	// The zone of the instance that ran the patch.
	Zone string `protobuf:"bytes,7,opt,name=zone,proto3" json:"zone,omitempty"`
	// The name of the instance that ran this patch.
	InstanceName string `protobuf:"bytes,8,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	// The current state of this patch at the time of this record
	Status InstancePatchStatus `protobuf:"varint,9,opt,name=status,proto3,enum=google.cloud.osconfig.v1alpha1.InstancePatchStatus" json:"status,omitempty"`
	// Client supplied information to support the status (i.e. error codes on
	// failures).
	Reason string `protobuf:"bytes,10,opt,name=reason,proto3" json:"reason,omitempty"`
	// Read only patch run id that this patch status log is assigned to.
	PatchRunId           int64    `protobuf:"varint,11,opt,name=patch_run_id,json=patchRunId,proto3" json:"patch_run_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InstancePatchReport) Reset()         { *m = InstancePatchReport{} }
func (m *InstancePatchReport) String() string { return proto.CompactTextString(m) }
func (*InstancePatchReport) ProtoMessage()    {}
func (*InstancePatchReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_26bcbb0c9b622c1f, []int{0}
}

func (m *InstancePatchReport) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstancePatchReport.Unmarshal(m, b)
}
func (m *InstancePatchReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstancePatchReport.Marshal(b, m, deterministic)
}
func (m *InstancePatchReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstancePatchReport.Merge(m, src)
}
func (m *InstancePatchReport) XXX_Size() int {
	return xxx_messageInfo_InstancePatchReport.Size(m)
}
func (m *InstancePatchReport) XXX_DiscardUnknown() {
	xxx_messageInfo_InstancePatchReport.DiscardUnknown(m)
}

var xxx_messageInfo_InstancePatchReport proto.InternalMessageInfo

func (m *InstancePatchReport) GetPatchPolicy() string {
	if m != nil {
		return m.PatchPolicy
	}
	return ""
}

func (m *InstancePatchReport) GetPatchVersion() int64 {
	if m != nil {
		return m.PatchVersion
	}
	return 0
}

func (m *InstancePatchReport) GetScheduledStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.ScheduledStartTime
	}
	return nil
}

func (m *InstancePatchReport) GetActualStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.ActualStartTime
	}
	return nil
}

func (m *InstancePatchReport) GetStatusChangeTime() *timestamp.Timestamp {
	if m != nil {
		return m.StatusChangeTime
	}
	return nil
}

func (m *InstancePatchReport) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *InstancePatchReport) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *InstancePatchReport) GetInstanceName() string {
	if m != nil {
		return m.InstanceName
	}
	return ""
}

func (m *InstancePatchReport) GetStatus() InstancePatchStatus {
	if m != nil {
		return m.Status
	}
	return InstancePatchStatus_INSTANCE_PATCH_STATUS_UNSPECIFIED
}

func (m *InstancePatchReport) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *InstancePatchReport) GetPatchRunId() int64 {
	if m != nil {
		return m.PatchRunId
	}
	return 0
}

// Reports the current status of an instance performing a patch run.
type ReportInstancePatchStatusRequest struct {
	// The resource name of the instance that is reporting this status
	Resource string `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	// The PatchStatus to create.
	PatchReport          *InstancePatchReport `protobuf:"bytes,2,opt,name=patch_report,json=patchReport,proto3" json:"patch_report,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ReportInstancePatchStatusRequest) Reset()         { *m = ReportInstancePatchStatusRequest{} }
func (m *ReportInstancePatchStatusRequest) String() string { return proto.CompactTextString(m) }
func (*ReportInstancePatchStatusRequest) ProtoMessage()    {}
func (*ReportInstancePatchStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_26bcbb0c9b622c1f, []int{1}
}

func (m *ReportInstancePatchStatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReportInstancePatchStatusRequest.Unmarshal(m, b)
}
func (m *ReportInstancePatchStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReportInstancePatchStatusRequest.Marshal(b, m, deterministic)
}
func (m *ReportInstancePatchStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportInstancePatchStatusRequest.Merge(m, src)
}
func (m *ReportInstancePatchStatusRequest) XXX_Size() int {
	return xxx_messageInfo_ReportInstancePatchStatusRequest.Size(m)
}
func (m *ReportInstancePatchStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportInstancePatchStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReportInstancePatchStatusRequest proto.InternalMessageInfo

func (m *ReportInstancePatchStatusRequest) GetResource() string {
	if m != nil {
		return m.Resource
	}
	return ""
}

func (m *ReportInstancePatchStatusRequest) GetPatchReport() *InstancePatchReport {
	if m != nil {
		return m.PatchReport
	}
	return nil
}

// Returns the saved version of the instance patch status.
type ReportInstancePatchStatusResponse struct {
	// The PatchStatus that was created.
	PatchReport          *InstancePatchReport `protobuf:"bytes,1,opt,name=patch_report,json=patchReport,proto3" json:"patch_report,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ReportInstancePatchStatusResponse) Reset()         { *m = ReportInstancePatchStatusResponse{} }
func (m *ReportInstancePatchStatusResponse) String() string { return proto.CompactTextString(m) }
func (*ReportInstancePatchStatusResponse) ProtoMessage()    {}
func (*ReportInstancePatchStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_26bcbb0c9b622c1f, []int{2}
}

func (m *ReportInstancePatchStatusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReportInstancePatchStatusResponse.Unmarshal(m, b)
}
func (m *ReportInstancePatchStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReportInstancePatchStatusResponse.Marshal(b, m, deterministic)
}
func (m *ReportInstancePatchStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportInstancePatchStatusResponse.Merge(m, src)
}
func (m *ReportInstancePatchStatusResponse) XXX_Size() int {
	return xxx_messageInfo_ReportInstancePatchStatusResponse.Size(m)
}
func (m *ReportInstancePatchStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportInstancePatchStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReportInstancePatchStatusResponse proto.InternalMessageInfo

func (m *ReportInstancePatchStatusResponse) GetPatchReport() *InstancePatchReport {
	if m != nil {
		return m.PatchReport
	}
	return nil
}

// Returns information about the latest patch run for the given patch policy.
type GetLatestPatchRunRequest struct {
	// The entire resource URL for a specific patch policy's patch status
	Resource             string   `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetLatestPatchRunRequest) Reset()         { *m = GetLatestPatchRunRequest{} }
func (m *GetLatestPatchRunRequest) String() string { return proto.CompactTextString(m) }
func (*GetLatestPatchRunRequest) ProtoMessage()    {}
func (*GetLatestPatchRunRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_26bcbb0c9b622c1f, []int{3}
}

func (m *GetLatestPatchRunRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetLatestPatchRunRequest.Unmarshal(m, b)
}
func (m *GetLatestPatchRunRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetLatestPatchRunRequest.Marshal(b, m, deterministic)
}
func (m *GetLatestPatchRunRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLatestPatchRunRequest.Merge(m, src)
}
func (m *GetLatestPatchRunRequest) XXX_Size() int {
	return xxx_messageInfo_GetLatestPatchRunRequest.Size(m)
}
func (m *GetLatestPatchRunRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLatestPatchRunRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetLatestPatchRunRequest proto.InternalMessageInfo

func (m *GetLatestPatchRunRequest) GetResource() string {
	if m != nil {
		return m.Resource
	}
	return ""
}

// Returns information about a specified patch run for the given patch policy.
type GetPatchRunRequest struct {
	// The entire resource URL for a specific patch policy's patch status
	Resource string `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	// The time the patch run was scheduled to start.
	PatchRunId           int64    `protobuf:"varint,2,opt,name=patch_run_id,json=patchRunId,proto3" json:"patch_run_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPatchRunRequest) Reset()         { *m = GetPatchRunRequest{} }
func (m *GetPatchRunRequest) String() string { return proto.CompactTextString(m) }
func (*GetPatchRunRequest) ProtoMessage()    {}
func (*GetPatchRunRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_26bcbb0c9b622c1f, []int{4}
}

func (m *GetPatchRunRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPatchRunRequest.Unmarshal(m, b)
}
func (m *GetPatchRunRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPatchRunRequest.Marshal(b, m, deterministic)
}
func (m *GetPatchRunRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPatchRunRequest.Merge(m, src)
}
func (m *GetPatchRunRequest) XXX_Size() int {
	return xxx_messageInfo_GetPatchRunRequest.Size(m)
}
func (m *GetPatchRunRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPatchRunRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPatchRunRequest proto.InternalMessageInfo

func (m *GetPatchRunRequest) GetResource() string {
	if m != nil {
		return m.Resource
	}
	return ""
}

func (m *GetPatchRunRequest) GetPatchRunId() int64 {
	if m != nil {
		return m.PatchRunId
	}
	return 0
}

// The summary information of all the Patch Status records for a patch run.
type PatchRun struct {
	// The identifier for this particular patch run, unique within this patch
	// policy.
	PatchRunId int64 `protobuf:"varint,1,opt,name=patch_run_id,json=patchRunId,proto3" json:"patch_run_id,omitempty"`
	// The scheduled start time of for these patch statuses.
	ScheduledStartTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=scheduled_start_time,json=scheduledStartTime,proto3" json:"scheduled_start_time,omitempty"`
	// The name of the patch policy that was run.
	PatchPolicyName string `protobuf:"bytes,3,opt,name=patch_policy_name,json=patchPolicyName,proto3" json:"patch_policy_name,omitempty"`
	// A count of all the instance that have been logged to this patch run
	// grouped by their current state.
	StatusCounts         []*InstanceStatusCount `protobuf:"bytes,4,rep,name=status_counts,json=statusCounts,proto3" json:"status_counts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *PatchRun) Reset()         { *m = PatchRun{} }
func (m *PatchRun) String() string { return proto.CompactTextString(m) }
func (*PatchRun) ProtoMessage()    {}
func (*PatchRun) Descriptor() ([]byte, []int) {
	return fileDescriptor_26bcbb0c9b622c1f, []int{5}
}

func (m *PatchRun) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PatchRun.Unmarshal(m, b)
}
func (m *PatchRun) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PatchRun.Marshal(b, m, deterministic)
}
func (m *PatchRun) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PatchRun.Merge(m, src)
}
func (m *PatchRun) XXX_Size() int {
	return xxx_messageInfo_PatchRun.Size(m)
}
func (m *PatchRun) XXX_DiscardUnknown() {
	xxx_messageInfo_PatchRun.DiscardUnknown(m)
}

var xxx_messageInfo_PatchRun proto.InternalMessageInfo

func (m *PatchRun) GetPatchRunId() int64 {
	if m != nil {
		return m.PatchRunId
	}
	return 0
}

func (m *PatchRun) GetScheduledStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.ScheduledStartTime
	}
	return nil
}

func (m *PatchRun) GetPatchPolicyName() string {
	if m != nil {
		return m.PatchPolicyName
	}
	return ""
}

func (m *PatchRun) GetStatusCounts() []*InstanceStatusCount {
	if m != nil {
		return m.StatusCounts
	}
	return nil
}

// Count of distinct instances that have logged a status for a given patch run
// that are at the specified state.
type InstanceStatusCount struct {
	// The latest state logged by these instances.
	Status InstancePatchStatus `protobuf:"varint,1,opt,name=status,proto3,enum=google.cloud.osconfig.v1alpha1.InstancePatchStatus" json:"status,omitempty"`
	// The count of instances at this state.
	Count                int64    `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InstanceStatusCount) Reset()         { *m = InstanceStatusCount{} }
func (m *InstanceStatusCount) String() string { return proto.CompactTextString(m) }
func (*InstanceStatusCount) ProtoMessage()    {}
func (*InstanceStatusCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_26bcbb0c9b622c1f, []int{6}
}

func (m *InstanceStatusCount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstanceStatusCount.Unmarshal(m, b)
}
func (m *InstanceStatusCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstanceStatusCount.Marshal(b, m, deterministic)
}
func (m *InstanceStatusCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstanceStatusCount.Merge(m, src)
}
func (m *InstanceStatusCount) XXX_Size() int {
	return xxx_messageInfo_InstanceStatusCount.Size(m)
}
func (m *InstanceStatusCount) XXX_DiscardUnknown() {
	xxx_messageInfo_InstanceStatusCount.DiscardUnknown(m)
}

var xxx_messageInfo_InstanceStatusCount proto.InternalMessageInfo

func (m *InstanceStatusCount) GetStatus() InstancePatchStatus {
	if m != nil {
		return m.Status
	}
	return InstancePatchStatus_INSTANCE_PATCH_STATUS_UNSPECIFIED
}

func (m *InstanceStatusCount) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

// Gets a page of logged patch statuses.
type ListPatchRunInstanceReportsRequest struct {
	// The parent url for the of the patch policy.
	Resource string `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	// The identifier of this patch_run for the specified patch policy.
	PatchRunId int64 `protobuf:"varint,2,opt,name=patch_run_id,json=patchRunId,proto3" json:"patch_run_id,omitempty"`
	// The maximum number of instances to return
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A pagination token returned from a previous call to ListPatchStatus
	// that indicates where this listing should continue from.
	// This field is optional.
	PageToken            string   `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListPatchRunInstanceReportsRequest) Reset()         { *m = ListPatchRunInstanceReportsRequest{} }
func (m *ListPatchRunInstanceReportsRequest) String() string { return proto.CompactTextString(m) }
func (*ListPatchRunInstanceReportsRequest) ProtoMessage()    {}
func (*ListPatchRunInstanceReportsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_26bcbb0c9b622c1f, []int{7}
}

func (m *ListPatchRunInstanceReportsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPatchRunInstanceReportsRequest.Unmarshal(m, b)
}
func (m *ListPatchRunInstanceReportsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPatchRunInstanceReportsRequest.Marshal(b, m, deterministic)
}
func (m *ListPatchRunInstanceReportsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPatchRunInstanceReportsRequest.Merge(m, src)
}
func (m *ListPatchRunInstanceReportsRequest) XXX_Size() int {
	return xxx_messageInfo_ListPatchRunInstanceReportsRequest.Size(m)
}
func (m *ListPatchRunInstanceReportsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPatchRunInstanceReportsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListPatchRunInstanceReportsRequest proto.InternalMessageInfo

func (m *ListPatchRunInstanceReportsRequest) GetResource() string {
	if m != nil {
		return m.Resource
	}
	return ""
}

func (m *ListPatchRunInstanceReportsRequest) GetPatchRunId() int64 {
	if m != nil {
		return m.PatchRunId
	}
	return 0
}

func (m *ListPatchRunInstanceReportsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListPatchRunInstanceReportsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

// A page of logged patch statuses.
type ListPatchRunInstanceReportsResponse struct {
	// The entire resource URL for a specific patch policy's patch status
	Resource string `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	// The list of latest patch statuses recorded by different instances.
	Instances []*InstancePatchReport `protobuf:"bytes,2,rep,name=instances,proto3" json:"instances,omitempty"`
	// The token to pass into the next request to get the next page of results.
	NextPageToken        string   `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListPatchRunInstanceReportsResponse) Reset()         { *m = ListPatchRunInstanceReportsResponse{} }
func (m *ListPatchRunInstanceReportsResponse) String() string { return proto.CompactTextString(m) }
func (*ListPatchRunInstanceReportsResponse) ProtoMessage()    {}
func (*ListPatchRunInstanceReportsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_26bcbb0c9b622c1f, []int{8}
}

func (m *ListPatchRunInstanceReportsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPatchRunInstanceReportsResponse.Unmarshal(m, b)
}
func (m *ListPatchRunInstanceReportsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPatchRunInstanceReportsResponse.Marshal(b, m, deterministic)
}
func (m *ListPatchRunInstanceReportsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPatchRunInstanceReportsResponse.Merge(m, src)
}
func (m *ListPatchRunInstanceReportsResponse) XXX_Size() int {
	return xxx_messageInfo_ListPatchRunInstanceReportsResponse.Size(m)
}
func (m *ListPatchRunInstanceReportsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPatchRunInstanceReportsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListPatchRunInstanceReportsResponse proto.InternalMessageInfo

func (m *ListPatchRunInstanceReportsResponse) GetResource() string {
	if m != nil {
		return m.Resource
	}
	return ""
}

func (m *ListPatchRunInstanceReportsResponse) GetInstances() []*InstancePatchReport {
	if m != nil {
		return m.Instances
	}
	return nil
}

func (m *ListPatchRunInstanceReportsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

func init() {
	proto.RegisterEnum("google.cloud.osconfig.v1alpha1.InstancePatchStatus", InstancePatchStatus_name, InstancePatchStatus_value)
	proto.RegisterType((*InstancePatchReport)(nil), "google.cloud.osconfig.v1alpha1.InstancePatchReport")
	proto.RegisterType((*ReportInstancePatchStatusRequest)(nil), "google.cloud.osconfig.v1alpha1.ReportInstancePatchStatusRequest")
	proto.RegisterType((*ReportInstancePatchStatusResponse)(nil), "google.cloud.osconfig.v1alpha1.ReportInstancePatchStatusResponse")
	proto.RegisterType((*GetLatestPatchRunRequest)(nil), "google.cloud.osconfig.v1alpha1.GetLatestPatchRunRequest")
	proto.RegisterType((*GetPatchRunRequest)(nil), "google.cloud.osconfig.v1alpha1.GetPatchRunRequest")
	proto.RegisterType((*PatchRun)(nil), "google.cloud.osconfig.v1alpha1.PatchRun")
	proto.RegisterType((*InstanceStatusCount)(nil), "google.cloud.osconfig.v1alpha1.InstanceStatusCount")
	proto.RegisterType((*ListPatchRunInstanceReportsRequest)(nil), "google.cloud.osconfig.v1alpha1.ListPatchRunInstanceReportsRequest")
	proto.RegisterType((*ListPatchRunInstanceReportsResponse)(nil), "google.cloud.osconfig.v1alpha1.ListPatchRunInstanceReportsResponse")
}

func init() {
	proto.RegisterFile("google/cloud/osconfig/v1alpha1/patch_status.proto", fileDescriptor_26bcbb0c9b622c1f)
}

var fileDescriptor_26bcbb0c9b622c1f = []byte{
	// 832 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x51, 0x73, 0xdb, 0x44,
	0x10, 0x46, 0xb6, 0xe3, 0xc4, 0xeb, 0xa4, 0x71, 0x8f, 0x0e, 0x68, 0x92, 0x01, 0x14, 0x75, 0x60,
	0x32, 0x7d, 0x90, 0x26, 0xed, 0x0c, 0x2f, 0x3c, 0x39, 0xb6, 0xd2, 0x7a, 0xc8, 0xb8, 0x46, 0x52,
	0x3a, 0x0c, 0x2f, 0x9a, 0xab, 0x74, 0x56, 0x44, 0xe4, 0x3b, 0xa1, 0x3b, 0x95, 0x26, 0xf0, 0x00,
	0x7f, 0x02, 0xde, 0xf8, 0x25, 0xfc, 0x38, 0x46, 0x77, 0x52, 0x6c, 0xec, 0xd6, 0xc1, 0x34, 0x6f,
	0xbe, 0xdd, 0xfd, 0xbe, 0xdb, 0xdd, 0x6f, 0xf7, 0x64, 0x38, 0x89, 0x19, 0x8b, 0x53, 0x62, 0x87,
	0x29, 0x2b, 0x22, 0x9b, 0xf1, 0x90, 0xd1, 0x69, 0x12, 0xdb, 0x6f, 0x4e, 0x70, 0x9a, 0x5d, 0xe2,
	0x13, 0x3b, 0xc3, 0x22, 0xbc, 0x0c, 0xb8, 0xc0, 0xa2, 0xe0, 0x56, 0x96, 0x33, 0xc1, 0xd0, 0xe7,
	0x0a, 0x62, 0x49, 0x88, 0x55, 0x43, 0xac, 0x1a, 0x72, 0x50, 0xf9, 0x6d, 0x19, 0xfd, 0xba, 0x98,
	0xda, 0x51, 0x91, 0x63, 0x91, 0x30, 0xaa, 0xf0, 0x07, 0xc6, 0xb2, 0x7f, 0x9a, 0x90, 0x34, 0x0a,
	0x66, 0x98, 0x5f, 0x55, 0x11, 0x5f, 0x2c, 0x47, 0x88, 0x64, 0x46, 0xb8, 0xc0, 0xb3, 0xac, 0x0a,
	0x38, 0xac, 0x02, 0xc4, 0x75, 0x46, 0xec, 0x08, 0x5f, 0xb3, 0xe9, 0xcf, 0x84, 0x5c, 0xbd, 0xcb,
	0x59, 0x22, 0xd9, 0x34, 0xc2, 0xd7, 0xca, 0x69, 0xfe, 0xd9, 0x82, 0x8f, 0x47, 0x94, 0x0b, 0x4c,
	0x43, 0x32, 0x29, 0x6b, 0x73, 0x49, 0xc6, 0x72, 0x81, 0x8e, 0x60, 0x57, 0x95, 0x9a, 0xb1, 0x34,
	0x09, 0xaf, 0x75, 0xcd, 0xd0, 0x8e, 0x3b, 0x6e, 0x57, 0xda, 0x26, 0xd2, 0x84, 0x1e, 0xc3, 0x9e,
	0x0a, 0x79, 0x43, 0x72, 0x9e, 0x30, 0xaa, 0x37, 0x0c, 0xed, 0xb8, 0xe9, 0x2a, 0xdc, 0x2b, 0x65,
	0x43, 0xe7, 0xf0, 0x88, 0x87, 0x97, 0x24, 0x2a, 0x52, 0x12, 0x95, 0x6d, 0xcb, 0x45, 0x50, 0xa6,
	0xa0, 0x37, 0x0d, 0xed, 0xb8, 0xfb, 0xf4, 0xc0, 0xaa, 0x7a, 0x57, 0x57, 0x66, 0xf9, 0x75, 0x65,
	0x2e, 0xba, 0xc5, 0x79, 0x25, 0xac, 0x74, 0xa0, 0x33, 0x78, 0x88, 0x43, 0x51, 0xe0, 0x74, 0x91,
	0xaa, 0x75, 0x27, 0xd5, 0xbe, 0x02, 0xcd, 0x79, 0x5e, 0x00, 0x52, 0x12, 0x06, 0xe1, 0x25, 0xa6,
	0x31, 0x51, 0x44, 0x5b, 0x77, 0x12, 0xf5, 0x14, 0x6a, 0x20, 0x41, 0x92, 0x49, 0x87, 0xed, 0x2c,
	0x67, 0x3f, 0x92, 0x50, 0xe8, 0x6d, 0xd9, 0xa2, 0xfa, 0x88, 0x10, 0xb4, 0x6e, 0x18, 0x25, 0xfa,
	0xb6, 0x34, 0xcb, 0xdf, 0x65, 0xcb, 0x92, 0xaa, 0xd9, 0x01, 0xc5, 0x33, 0xa2, 0xef, 0x48, 0xe7,
	0x6e, 0x6d, 0x1c, 0xe3, 0x19, 0x41, 0xdf, 0x42, 0x5b, 0x5d, 0xa3, 0x77, 0x0c, 0xed, 0xf8, 0xc1,
	0xd3, 0x67, 0xd6, 0xfa, 0x01, 0xb3, 0xfe, 0xa5, 0x9f, 0x27, 0xa1, 0x6e, 0x45, 0x81, 0x3e, 0x81,
	0x76, 0x4e, 0x30, 0x67, 0x54, 0x07, 0x79, 0x55, 0x75, 0x42, 0x46, 0xad, 0x6f, 0x5e, 0xd0, 0x20,
	0x89, 0xf4, 0xae, 0xd4, 0x0e, 0xa4, 0xcd, 0x2d, 0xe8, 0x28, 0x32, 0xff, 0xd0, 0xc0, 0x50, 0xc3,
	0xf0, 0x2e, 0x7e, 0xf2, 0x53, 0x41, 0xb8, 0x40, 0x07, 0xb0, 0x93, 0x13, 0xce, 0x8a, 0x3c, 0x24,
	0xd5, 0x88, 0xdc, 0x9e, 0xd1, 0xab, 0xdb, 0x2b, 0x24, 0x8b, 0x1c, 0x8f, 0xee, 0x86, 0xd5, 0xa8,
	0x04, 0xaa, 0xb9, 0x53, 0x07, 0xf3, 0x17, 0x38, 0x5a, 0x93, 0x17, 0xcf, 0x18, 0xe5, 0xab, 0x97,
	0x6b, 0xf7, 0x74, 0xf9, 0xd7, 0xa0, 0x3f, 0x27, 0xe2, 0x1c, 0x0b, 0xc2, 0xc5, 0xa4, 0x6a, 0xd6,
	0x7f, 0x68, 0x86, 0xe9, 0x02, 0x7a, 0x4e, 0x36, 0x41, 0xac, 0x28, 0xd4, 0x58, 0x51, 0xe8, 0xb7,
	0x06, 0xec, 0xd4, 0x8c, 0x2b, 0xe1, 0xda, 0x72, 0xf8, 0x7b, 0x57, 0xb1, 0xf1, 0xbf, 0x56, 0xf1,
	0x09, 0x3c, 0x5c, 0x7c, 0x20, 0xd4, 0x38, 0x37, 0x65, 0x0d, 0xfb, 0x0b, 0xaf, 0x84, 0x9c, 0xe8,
	0xef, 0x61, 0xaf, 0x5e, 0x37, 0x56, 0x50, 0xc1, 0xf5, 0x96, 0xd1, 0xdc, 0x44, 0x0d, 0xa5, 0xed,
	0xa0, 0xc4, 0xba, 0xbb, 0x7c, 0x7e, 0xe0, 0xe6, 0xdb, 0xf9, 0xeb, 0xb5, 0x10, 0xb4, 0xb0, 0x42,
	0xda, 0x87, 0xaf, 0xd0, 0x23, 0xd8, 0x92, 0x69, 0x57, 0x0a, 0xa8, 0x83, 0xf9, 0x97, 0x06, 0xe6,
	0x79, 0x32, 0x1f, 0x82, 0x9a, 0x41, 0xcd, 0x09, 0xbf, 0x17, 0x85, 0xd1, 0x21, 0x74, 0x32, 0x1c,
	0x93, 0x80, 0x27, 0x37, 0xaa, 0xb9, 0x5b, 0xee, 0x4e, 0x69, 0xf0, 0x92, 0x1b, 0x82, 0x3e, 0x03,
	0x90, 0x4e, 0xc1, 0xae, 0x08, 0x95, 0xaf, 0x60, 0xc7, 0x95, 0xe1, 0x7e, 0x69, 0x30, 0xff, 0xd6,
	0xe0, 0xf1, 0xda, 0x04, 0xab, 0x4d, 0x59, 0x97, 0xe1, 0x77, 0xd0, 0xa9, 0x9f, 0x26, 0xae, 0x37,
	0x36, 0x13, 0x6d, 0x71, 0x85, 0xe6, 0x2c, 0xe8, 0x2b, 0xd8, 0xa7, 0xe4, 0xad, 0x08, 0x16, 0x52,
	0x57, 0x53, 0xb3, 0x57, 0x9a, 0x27, 0x75, 0xfa, 0x4f, 0x7e, 0xd7, 0x96, 0x3e, 0x4c, 0x4a, 0x15,
	0xf4, 0x25, 0x1c, 0x8d, 0xc6, 0x9e, 0xdf, 0x1f, 0x0f, 0x9c, 0x60, 0xd2, 0xf7, 0x07, 0x2f, 0x02,
	0xcf, 0xef, 0xfb, 0x17, 0x5e, 0x70, 0x31, 0xf6, 0x26, 0xce, 0x60, 0x74, 0x36, 0x72, 0x86, 0xbd,
	0x8f, 0x50, 0x17, 0xb6, 0x3d, 0xbf, 0xef, 0xfa, 0xce, 0xb0, 0xa7, 0xa1, 0x3d, 0xe8, 0x78, 0x17,
	0x83, 0x81, 0xe3, 0x0c, 0x9d, 0x61, 0xaf, 0x81, 0x00, 0xda, 0x67, 0xfd, 0xd1, 0xb9, 0x33, 0xec,
	0x35, 0xd1, 0x21, 0x7c, 0x7a, 0xeb, 0x0a, 0x5c, 0xe7, 0xf4, 0xe5, 0x4b, 0x3f, 0x18, 0xab, 0xc0,
	0xd6, 0xe9, 0xaf, 0x60, 0x86, 0x6c, 0x76, 0x47, 0xc1, 0xa7, 0x0f, 0xfa, 0x61, 0xf9, 0x35, 0x57,
	0xf9, 0x11, 0xfe, 0xc3, 0x59, 0x15, 0x1f, 0xb3, 0x14, 0xd3, 0xd8, 0x62, 0x79, 0x6c, 0xc7, 0x84,
	0xca, 0xb5, 0xb2, 0x95, 0x0b, 0x67, 0x09, 0x7f, 0xdf, 0x3f, 0x8c, 0x6f, 0x6a, 0xcb, 0xeb, 0xb6,
	0x84, 0x3c, 0xfb, 0x27, 0x00, 0x00, 0xff, 0xff, 0x39, 0x57, 0x87, 0xd9, 0x93, 0x08, 0x00, 0x00,
}
