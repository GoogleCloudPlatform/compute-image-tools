// Code generated by MockGen. DO NOT EDIT.
// Source: inspect.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	pb "github.com/GoogleCloudPlatform/compute-image-tools/proto/go/pb"
)

// MockInspector is a mock of Inspector interface
type MockInspector struct {
	ctrl     *gomock.Controller
	recorder *MockInspectorMockRecorder
}

// MockInspectorMockRecorder is the mock recorder for MockInspector
type MockInspectorMockRecorder struct {
	mock *MockInspector
}

// NewMockInspector creates a new mock instance
func NewMockInspector(ctrl *gomock.Controller) *MockInspector {
	mock := &MockInspector{ctrl: ctrl}
	mock.recorder = &MockInspectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInspector) EXPECT() *MockInspectorMockRecorder {
	return m.recorder
}

// Inspect mocks base method
func (m *MockInspector) Inspect(reference string) (*pb.InspectionResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Inspect", reference)
	ret0, _ := ret[0].(*pb.InspectionResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Inspect indicates an expected call of Inspect
func (mr *MockInspectorMockRecorder) Inspect(reference interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inspect", reflect.TypeOf((*MockInspector)(nil).Inspect), reference)
}

// Cancel mocks base method
func (m *MockInspector) Cancel(reason string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel", reason)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Cancel indicates an expected call of Cancel
func (mr *MockInspectorMockRecorder) Cancel(reason interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockInspector)(nil).Cancel), reason)
}
