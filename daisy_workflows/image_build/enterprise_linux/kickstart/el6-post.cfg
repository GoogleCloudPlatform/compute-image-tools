# el6-post.cfg
# Google Compute Engine kickstart config for Redhat 6 Enterprise Linux
# See stub.cfg for details on how the options, packages, pre and post files fit
# together.

# 2
%post
# Install EPEL for DKMS support.
rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm

# Install google RHUI client software.
yum -y install google-rhui-client-rhel6
KEYS="$(rpm -qlp ${rpm} | grep ^/etc/pki/rpm-gpg/)"
rpm --import ${KEYS}

# Import Red Hat's signing keys if present - somehow this doesn't happen by default.
rhkey=/etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-release
[ -f "${rhkey}" ] && rpm --import "${rhkey}"

# Delete the dummy user account.
userdel -r gce

%end

# 3
%post
# Configure the network for GCE.

# Put in place a suitable iptables config for users which prefer a static
# ruleset, as is used by default on EL 6,
# Instead of running the iptables commands just save them manually.
# Below are the set of commands that would have been used to accomplish this.
#
#  # Remove all iptables rules.
#  iptables -F
#  # Set the default to accept for traffic modes.
#  iptables -P OUTPUT ACCEPT
#  iptables -P INPUT ACCEPT
#  iptables -P OUTPUT ACCEPT
#  iptables -P FORWARD ACCEPT
#  # Save the config.
#  /sbin/service iptables save

cat >/etc/sysconfig/iptables <<EOL
# Provided by Google.
*filter
:INPUT ACCEPT [7:364]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [2:408]
COMMIT
EOL

cat >/etc/sysconfig/ip6tables <<EOL
# Provided by Google.
*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
COMMIT
EOL

# Restore proper permissions and SELinux context for the static iptables config.
chmod 600 /etc/sysconfig/ip*tables
restorecon /etc/sysconfig/ip*tables

cat >>/etc/dhclient-eth0.conf <<EOL
# Set the dhclient retry interval to 10 seconds instead of 5 minutes.
retry 10;
EOL

# Set the network settings for eth0.
# Set the MTU.
# Set dhclient to be persistent instead of oneshot.
# Enable IPv6.
cat >>/etc/sysconfig/network-scripts/ifcfg-eth0 <<EOL
MTU=1460
PERSISTENT_DHCLIENT="y"
IPV6INIT=yes
EOL
%end

# 4
%post
# Configure the system to run in GCE

# Install python 2.7 SCL
yum install -y python27

# Enable python 2.7 SCL for Cloud SDK.
scl enable python27 "pip2.7 install --upgrade google_compute_engine"

# Install the GCE supplied disk expansion package.
yum install -y gce-disk-expand

# Install compute-image-packages.
yum install -y google-compute-engine python-google-compute-engine

# For EL6, Install Cloud SDK by downloading the tarball and unpacking it.
# Create SCL enabled python 2.7 scripts for gsutil, gcloud, and bq.
# Fetch Cloud SDK's sha1sum file to identify the latest version of Cloud SDK,
# then download that version.
CLOUDSDK_URL_PREFIX="https://dl.google.com/dl/cloudsdk/release"
CLOUDSDK_REGEX='downloads\/google-cloud-sdk-(([0-9]*)\.)*([0-9]*)-linux-x86_64\.tar\.gz$'
CLOUDSDK_URL_SUFFIX="$(curl -s "${CLOUDSDK_URL_PREFIX}/sha1.txt" \
                       | awk "\$2 ~ /${CLOUDSDK_REGEX}/ { print \$2 }")"
CLOUDSDK_FILENAME="$(basename "${CLOUDSDK_URL_SUFFIX}")"
CLOUDSDK_URL="${CLOUDSDK_URL_PREFIX}/${CLOUDSDK_URL_SUFFIX}"
CLOUDSDK_BIN_PATH="/usr/local/share/google/google-cloud-sdk/bin"
curl -s -o "/tmp/${CLOUDSDK_FILENAME}" "${CLOUDSDK_URL}"
mkdir -p /usr/local/share/google
tar xzf "/tmp/${CLOUDSDK_FILENAME}" -C /usr/local/share/google --no-same-owner
ln -s ${CLOUDSDK_BIN_PATH}/git-credential-gcloud.sh /usr/bin/git-credential-gcloud.sh
for PROGRAM in bq gsutil gcloud; do
  echo '#!/bin/bash' > /usr/bin/${PROGRAM}
  echo 'source /opt/rh/python27/enable' >> /usr/bin/${PROGRAM}
  echo "${CLOUDSDK_BIN_PATH}/${PROGRAM} \$@" >> /usr/bin/${PROGRAM}
  chmod 755 /usr/bin/${PROGRAM}
done

# Send /root/anaconda-ks.cfg to our logs.
cp /root/anaconda-ks.cfg /tmp/

# Remove files which shouldn't make it into the image.
rm -f /root/anaconda-ks.cfg /root/install.* /var/log/anaconda.* /etc/boto.cfg
rm -f /etc/udev/rules.d/70-persistent-net.rules

# Ensure no attempt will be made to persist network MAC addresses
# and disable IPv6.
ln -s /dev/null /etc/udev/rules.d/75-persistent-net-generator.rules
sed -i '/^\(HWADDR\|IPV6INIT\)=/d' /etc/sysconfig/network-scripts/ifcfg-*

# Disable password authentication by default.
sed -i -e '/^PasswordAuthentication /s/ yes$/ no/' /etc/ssh/sshd_config

# Set ServerAliveInterval and ClientAliveInterval to prevent SSH
# disconnections. The pattern match is tuned to each source config file.
# The $'...' quoting syntax tells the shell to expand escape characters.
sed -i -e $'/^\tServerAliveInterval/d' /etc/ssh/ssh_config
sed -i -e $'/^Host \\*$/a \\\tServerAliveInterval 420' /etc/ssh/ssh_config
sed -i -e '/ClientAliveInterval/s/^.*/ClientAliveInterval 420/' \
    /etc/ssh/sshd_config

# Disable root login via SSH by default.
sed -i -e '/PermitRootLogin yes/s/^.*/PermitRootLogin no/' /etc/ssh/sshd_config

# Configure NTPD to use our servers.
sed -i -e '/pool.ntp.org/d' /etc/ntp.conf

cat >>/etc/ntp.conf <<EOD

# Use the Google Compute Engine ntp server.
# iburst speeds up the initial sync.
server metadata.google.internal iburst
EOD

# Install yum-cron and configure yum-cron.conf to install updates once a day.
# We have to update our images before we install yum-cron otherwise our changes
# will get clobbered when yum updates.
yum -y update
# Install yum-cron
yum -y install yum-cron
# This enables the service on both el6 and el7 based VMs.
chkconfig yum-cron on

# Cleanup this repo- we don't want to continue updating with it.
rm -Rf /etc/yum.repos.d/google-cloud-unstable.repo \
  /etc/yum.repos.d/google-cloud-staging.repo

# Clean up the cache for smaller images.
yum clean all

# Blacklist the floppy module.
echo "blacklist floppy" > /etc/modprobe.d/blacklist-floppy.conf
restorecon /etc/modprobe.d/blacklist-floppy.conf
dracut -f

# Set the boot timeout to 0.  Adding "--timeout=0" to "bootloader" setting does
# not work, so we need to edit grub.conf. There are two timeout settings
# in the file, one for the boot timeout, the other for the terminal selection
# timeout.
sed -e 's/^timeout=.*$/timeout=0/' \
    -e '/^terminal /s/--timeout=\w\+/--timeout=0/' \
    -i /boot/grub/grub.conf

# Create device.map. This is a config file used by grub to specify the boot
# partition.
echo "(hd0) /dev/sda" > /boot/grub/device.map
# This updates Grub. It sets the root device and adds the new device map. This
# needs to be done since the install was performed on /dev/sdb.
echo -e "root (hd0,0) \n setup (hd0)" | grub \
  --config-file /boot/grub/grub.conf --batch \
  --device-map /boot/grub/device.map

%end
