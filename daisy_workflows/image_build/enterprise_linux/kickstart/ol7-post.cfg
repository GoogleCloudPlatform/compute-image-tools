# ol7-post.cfg
# Google Compute Engine kickstart config for Oracle Linux 7
# See ks_helpers.py for details on how the options, packages, pre and post files fit
# together.

# 1
%post

# Oracle public Yum repo config.
curl -sSL 'http://yum.oracle.com/public-yum-ol7.repo' > /etc/yum.repos.d/public-yum-ol7.repo

# Enable addons repo for python-boto.
sed -i'' -e '/ol7_addons/,/^$/{ s/enabled=0/enabled=1/ }' \
  /etc/yum.repos.d/public-yum-ol7.repo

# Delete the dummy user account.
userdel -r gce

%end

# 2
%post
# Configure the network for GCE.

# Given that GCE users typically control the firewall at the network API level, we
# want to leave the standard Linux firewall setup enabled but all-open.
firewall-offline-cmd --set-default-zone=trusted

# Set the dhclient retry interval to 10 seconds instead of 5 minutes.
# NetworkManager will merge custom options into the config it generates.
cat >>/etc/dhclient.conf <<EOL
# Set the dhclient retry interval to 10 seconds instead of 5 minutes.
retry 10;
EOL

# Set the network settings for eth0.
# Set the MTU.
# Set dhclient to be persistent instead of oneshot.
# Enable IPv6.
cat >>/etc/sysconfig/network-scripts/ifcfg-eth0 <<EOL
MTU=1460
PERSISTENT_DHCLIENT="y"
IPV6INIT=yes
EOL
%end

# 3
%post
# Configure the system to run in GCE.

# Install GCE supplied disk expansion package.
yum install -y gce-disk-expand

# Install packages needed by GCE.
yum install -y google-compute-engine google-config google-compute-engine-init
yum install -y google-cloud-sdk

# Send the anaconda cfg file to our logs.
echo "Backing up ks.cfg"
cp /run/install/ks.cfg /tmp/anaconda-ks.cfg

# Remove files which shouldn't make it into the image.
rm -f /root/anaconda-ks.cfg /root/install.* /var/log/anaconda.* /etc/boto.cfg
rm -f /etc/udev/rules.d/70-persistent-net.rules

# Ensure no attempt will be made to persist network MAC addresses
# and disable IPv6.
ln -s /dev/null /etc/udev/rules.d/75-persistent-net-generator.rules
sed -i '/^\(HWADDR\|IPV6INIT\)=/d' /etc/sysconfig/network-scripts/ifcfg-*

# Disable password authentication by default.
sed -i -e '/^PasswordAuthentication /s/ yes$/ no/' /etc/ssh/sshd_config

# Set ServerAliveInterval and ClientAliveInterval to prevent SSH
# disconnections. The pattern match is tuned to each source config file.
# The $'...' quoting syntax tells the shell to expand escape characters.
sed -i -e $'/^\tServerAliveInterval/d' /etc/ssh/ssh_config
sed -i -e $'/^Host \\*$/a \\\tServerAliveInterval 420' /etc/ssh/ssh_config
sed -i -e '/ClientAliveInterval/s/^.*/ClientAliveInterval 420/' \
    /etc/ssh/sshd_config

# Disable root login via SSH by default.
sed -i -e '/PermitRootLogin yes/s/^.*/PermitRootLogin no/' /etc/ssh/sshd_config

# Configure NTPD to use our servers.
sed -i -e '/pool.ntp.org/d' /etc/ntp.conf

cat >>/etc/ntp.conf <<EOD

# Use the Google Compute Engine ntp server.
# iburst speeds up the initial sync.
server metadata.google.internal iburst
EOD

# Cleanup this repo- we don't want to continue updating with it.
rm -Rf /etc/yum.repos.d/google-cloud-unstable.repo \
  /etc/yum.repos.d/google-cloud-staging.repo \
  /etc/yum.repos.d/gce-ol7.rpeo

# Clean up the cache for smaller images.
yum clean all
rm -rf /var/cache/yum

# Set the default timeout to 0 and update grub2.
sed -i 's:GRUB_TIMEOUT=.*:GRUB_TIMEOUT=0:' /etc/default/grub
restorecon /etc/default/grub
grub2-mkconfig -o /boot/grub2/grub.cfg
echo "Running dracut."
dracut -f
echo "Dracut run."

# Fix selinux contexts on /etc/resolv.conf.
restorecon /etc/resolv.conf
%end
