# Google Compute Engine kickstart config for Enterprise Linux 7.
%onerror
echo "Build Failed!" > /dev/ttyS0
shutdown -h now
%end

%post --erroronfail
set -x
exec &> /dev/ttyS0
# Install EPEL.
yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm

# Import all RPM GPG keys.
curl -o /etc/pki/rpm-gpg/google-rpm-package-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
curl -o /etc/pki/rpm-gpg/google-key.gpg https://packages.cloud.google.com/yum/doc/yum-key.gpg
rpm --import /etc/pki/rpm-gpg/*

# Delete the dummy user account.
userdel -r gce

# Configure the network for GCE.
# Given that GCE users typically control the firewall at the network API level,
# we want to leave the standard Linux firewall setup enabled but all-open.
firewall-offline-cmd --set-default-zone=trusted

cat >>/etc/dhclient.conf <<EOL
# Set the dhclient retry interval to 10 seconds instead of 5 minutes.
retry 10;
EOL

# Set the network settings for eth0.
# Set the MTU.
# Set dhclient to be persistent instead of oneshot.
# Enable IPv6.
cat >>/etc/sysconfig/network-scripts/ifcfg-eth0 <<EOL
MTU=1460
PERSISTENT_DHCLIENT="y"
IPV6INIT=yes
EOL

# Disable IPv6 for Yum.
echo "ip_resolve=4" >> /etc/yum.conf

# Install GCE guest packages and CloudSDK.
yum install -y google-compute-engine google-osconfig-agent gce-disk-expand
yum install -y google-cloud-sdk

# Send /root/anaconda-ks.cfg to our logs.
cp /run/install/ks.cfg /tmp/anaconda-ks.cfg

# Remove files which shouldn't make it into the image. These files may not
# exist.
rm -f /etc/boto.cfg /etc/udev/rules.d/70-persistent-net.rules

# Ensure no attempt will be made to persist network MAC addresses.
ln -s /dev/null /etc/udev/rules.d/75-persistent-net-generator.rules
sed -i '/^\(HWADDR\)=/d' /etc/sysconfig/network-scripts/ifcfg-*

# Disable password authentication by default.
sed -i -e '/^PasswordAuthentication /s/ yes$/ no/' /etc/ssh/sshd_config

# Set ServerAliveInterval and ClientAliveInterval to prevent SSH
# disconnections. The pattern match is tuned to each source config file.
# The $'...' quoting syntax tells the shell to expand escape characters.
sed -i -e $'/^\tServerAliveInterval/d' /etc/ssh/ssh_config
sed -i -e $'/^Host \\*$/a \\\tServerAliveInterval 420' /etc/ssh/ssh_config
sed -i -e '/ClientAliveInterval/s/^.*/ClientAliveInterval 420/' /etc/ssh/sshd_config

# Disable root login via SSH by default.
sed -i -e '/PermitRootLogin yes/s/^.*/PermitRootLogin no/' /etc/ssh/sshd_config

# Configure NTPD to use our servers.
sed -i -e '/pool.ntp.org/d' /etc/ntp.conf
cat >>/etc/ntp.conf <<EOD

# Use the Google Compute Engine ntp server.
# iburst speeds up the initial sync.
server metadata.google.internal iburst
EOD

# Install yum-cron and configure yum-cron.conf to install updates once a day.
# We have to update our images before we install yum-cron otherwise our changes
# will get clobbered when yum updates.
yum -y update
# Install yum-cron
yum -y install yum-cron
# Make changes to yum-cron.conf on el7/centos7
grep apply_updates /etc/yum/yum-cron.conf
cp /etc/yum/yum-cron.conf /tmp/yum-cron.conf
# Apply updates for security only. Note on CentOS, repositories do not have security context.
sed -i 's/update_cmd =.*/update_cmd = security/' /tmp/yum-cron.conf
sed -i 's/apply_updates =.*/apply_updates = yes/' /tmp/yum-cron.conf
cat /tmp/yum-cron.conf > /etc/yum/yum-cron.conf
grep apply_updates /etc/yum/yum-cron.conf
# This enables the service on both el6 and el7 based VMs.
chkconfig yum-cron on

# Cleanup this repo- we don't want to continue updating with it.
# Depending which repos are used in build, one or more of these files will not
# exist.
rm -f /etc/yum.repos.d/google-cloud-unstable.repo \
  /etc/yum.repos.d/google-cloud-staging.repo

# Clean up the cache for smaller images.
yum clean all

# Blacklist the floppy module.
echo "blacklist floppy" > /etc/modprobe.d/blacklist-floppy.conf
restorecon /etc/modprobe.d/blacklist-floppy.conf

# Set the default timeout to 0 and update grub2.
sed -i"" 's:GRUB_TIMEOUT=.*:GRUB_TIMEOUT=0:' /etc/default/grub
sed -i"" '/GRUB_CMDLINE_LINUX/s:"$: elevator=noop":' /etc/default/grub
restorecon /etc/default/grub
grub2-mkconfig -o /boot/grub2/grub.cfg
# Update EFI grub configs.
if [ -d /boot/efi/EFI/centos ]; then
  grub2-mkconfig -o /boot/efi/EFI/centos/grub.cfg
elif [ -d /boot/efi/EFI/redhat ]; then
  grub2-mkconfig -o /boot/efi/EFI/redhat/grub.cfg
fi
echo "Running dracut."
dracut -f

# Fix selinux contexts on /etc/resolv.conf.
restorecon /etc/resolv.conf
%end
