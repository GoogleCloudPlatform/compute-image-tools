# This cloudbuild file performs the preloading process from start to finish.
#
# This file is what manages the replacement process of the guest agent pkg in COS images.
# This cloudbuild can be invoked using 'gcloud builds submit --config=dev_cloudbuild.yaml'.
# The script does the following:
#   1) Executes the debian compilation script in a docker container (this generates the
#   list of binaries and their installation paths for the guest agent pkg).
#   2) Uses COS-CUSTOMIZER to start a custom COS image...
#   3) Executes a script that disables the read-only root fs of COS.
#   4) Executes a script that performs pre-loading (pkg replacement).
#   5) Executes a script that re-enables the read-only root fs of COS.
#   6) Finishes COS-CUSTOMIZER by creating a custom image.

substitutions:
  '_COS_CUSTOMIZER': 'gcr.io/cos-cloud/cos-customizer:latest'
  '_KERNEL_PKG': ''

steps:
# This step compiles the debian packaging and stores it in /var.
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      ./compile_debian_package.sh $_COMMIT_SHA
# _DEST_PROJECT in the 'finish-image-build' step should should have access
# to the gcs-bucket path specified here.
- name: '${_COS_CUSTOMIZER}'
  args: ['start-image-build',
         '-image-family=${_BASE_IMAGE}',
         '-image-project=${_BASE_IMAGE_PROJECT}',
         '-gcs-bucket=${_DEST_PROJECT}_cloudbuild',
         '-gcs-workdir=customizer-$BUILD_ID']
# This step disables auto updates on the machine. This replaces the
# disable-auto-update step in COS Customizer since that step is not
# compatible with ARM images.
- name: '${_COS_CUSTOMIZER}'
  args: ['run-script',
         '-script=disable_auto_updates.sh',
         '-env=KERNEL_PKG=${_KERNEL_PKG}']
# This step disables the read-only root fs.
- name: '${_COS_CUSTOMIZER}'
  args: ['run-script',
         '-script=disable_readonly_rootfs.sh',
         '-env=KERNEL_PKG=${_KERNEL_PKG}']
# This step performs the preloading (guest agent replacement).
- name: '${_COS_CUSTOMIZER}'
  args: ['run-script',
         '-script=preload.sh',
         '-env=KERNEL_PKG=${_KERNEL_PKG}']
# This step re-enables the read-only root fs.
- name: '${_COS_CUSTOMIZER}'
  args: ['run-script',
         '-script=enable_readonly_rootfs.sh',
         '-env=KERNEL_PKG=${_KERNEL_PKG}']
- name: '${_COS_CUSTOMIZER}'
  args: ['finish-image-build',
         '-zone=us-central1-a',
         '-project=${_DEST_PROJECT}',
         '-machine-type=${_MACHINE_TYPE}',
         '-image-name=${_NEW_IMAGE}',
         '-image-family=${_NEW_IMAGE_FAMILY}',
         '-image-project=${_DEST_PROJECT}',
         '-labels=base_image=${_BASE_IMAGE}']
timeout: '1800s'  # 30 minutes
