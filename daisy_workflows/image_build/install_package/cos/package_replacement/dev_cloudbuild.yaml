# This cloudbuild file performs the preloading process from start to finish.

substitutions:
  '_COS_CUSTOMIZER': 'gcr.io/cos-cloud/cos-customizer:latest'
  '_KERNEL_PKG': ''

steps:
# This step compiles the debian packaging and stores it in /var.
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      ./compile_debian_package.sh $_OVERLAYS_BRANCH $_GUEST_AGENT_VERSION
- name: '${_COS_CUSTOMIZER}'
  args: ['start-image-build',
         '-image-name=${_BASE_IMAGE}',
         '-image-project=${_BASE_IMAGE_PROJECT}',
         '-gcs-bucket=${_CLOUD_BUILD_BUCKET}',
         '-gcs-workdir=customizer-$BUILD_ID']
- name: '${_COS_CUSTOMIZER}'
  args: ["disable-auto-update"]
# This step disables the read-only root fs.
- name: '${_COS_CUSTOMIZER}'
  args: ['run-script',
         '-script=disable_readonly_rootfs.sh',
         '-env=KERNEL_PKG=${_KERNEL_PKG}']
# This step performs the preloading (guest agent replacement).
- name: '${_COS_CUSTOMIZER}'
  args: ['run-script',
         '-script=preload.sh',
         '-env=KERNEL_PKG=${_KERNEL_PKG}']
# This step re-enables the read-only root fs.
- name: '${_COS_CUSTOMIZER}'
  args: ['run-script',
         '-script=enable_readonly_rootfs.sh',
         '-env=KERNEL_PKG=${_KERNEL_PKG}']
- name: '${_COS_CUSTOMIZER}'
  args: ['finish-image-build',
         '-zone=us-west1-b',
         '-project=${PROJECT_ID}',
         '-image-name=${_NEW_IMAGE}',
         '-image-family=${_NEW_IMAGE_FAMILY}',
         '-image-project=${PROJECT_ID}',
         '-labels=base_image=${_BASE_IMAGE}']
timeout: '1800s'  # 30 minutes
