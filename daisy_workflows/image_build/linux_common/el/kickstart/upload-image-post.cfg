%post
# Build image targz and upload to GCS. Upload logs.

# get_metadata_value
################################################################################
# Args: Metadata key name set in build_redhat_image.py
# Returns: string
################################################################################
get_metadata_value() {
    # Weed out invalid function calls.
    #
    # Correct usage: get_metadata_value <attribute> [default value, if not ""]
    # Output is written to the function's stdout.
    if [ $# -lt 1 ] || [ $# -gt 2 ]; then
        # Complain to stderr
        echo "$0: Invalid call to get_metadata_value" >&2
        return 1
    fi

    URL="http://metadata.google.internal/computeMetadata/v1/instance/attributes/$1"
    METADATA_HEADER="Metadata-Flavor: Google"

    # Fetch the metadata URL, as well as the HTTP status code. --write-out adds
    # a line at the end with the HTTP status code.
    RESULT="$(curl -s --write-out "\n%{http_code}" "${URL}"" \
           " -H "${METADATA_HEADER}")"

    # Return the metadata value (not including HTTP status code), but if the
    # HTTP status code isn't 200, use any default value instead of the Google
    # HTML error page that gets returned.
    #
    # The first sed command here looks at the last line of RESULT, and the next
    # one at the rest of RESULT.
    if [ "$(echo "${RESULT}" | sed -n -e '$p')" = "200" ]; then
        echo "${RESULT}" | sed -e '$d'
    else
        echo "$2"
    fi
}

LICENSE_ID="$(get_metadata_value license-id)"

# Set the image prefix
if grep -q Red /etc/redhat-release; then
    PREFIX=rhel
fi
if grep -q CentOS /etc/redhat-release; then
    PREFIX=centos
fi


# Parse out the version number in the form X-Y
VERSION="$(sed -e 's/^[^0-9]*\([0-9]*\)\.\([0-9]*\).*/\1-\2/' /etc/redhat-release)"

# Use the current PDT date for the image suffix.
SUFFIX="$(TZ=America/Los_Angeles date +%Y%m%d)"

if [ ! -z ${LICENSE_ID} ]; then
    echo '{"licenses": ["'${LICENSE_ID}'"]}' > /tmp/manifest.json
    LICENSE_FILE="manifest.json"
fi

FULL_NAME="${PREFIX}-${VERSION}-v${SUFFIX}"
TARGZ_FILENAME="image.tar.gz"
TARGZ_FILEPATH="/tmp/${TARGZ_FILENAME}"
tar czSf ${TARGZ_FILEPATH} -C /tmp ${LICENSE_FILE} disk.raw

# Prepare /etc/boto.cfg based on the service account, to facilitate gsutil.
gcloud info

# Set the image destination. Strip any trailing slashes.
DEST="$(get_metadata_value daisy-outs-path)"
DEST="${DEST%/}"

# Upload the resulting image.
gsutil mv ${TARGZ_FILEPATH} "${DEST}/${TARGZ_FILENAME}"

# Upload image synopsis.
gsutil -h "Content-Type:application/json" \
    cp /tmp/synopsis.json ${DEST}/synopsis.json

# Upload the kickstart log for debugging.
UPLOAD_LOGS="$(get_metadata_value upload-logs "true")"
if [ ${UPLOAD_LOGS} == "true" ]; then
  GS_LOGS_DIR="${DEST}/kickstart-logs/"
  sync
  gsutil -h "Content-Type:text/plain" cp /tmp/ks-script* ${GS_LOGS_DIR}
  gsutil -h "Content-Type:text/plain" cp /tmp/program.log ${GS_LOGS_DIR}
  gsutil -h "Content-Type:text/plain" cp /tmp/anaconda-ks.cfg ${GS_LOGS_DIR}
fi

%end
