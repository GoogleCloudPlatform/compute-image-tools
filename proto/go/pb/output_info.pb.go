//  Copyright 2020 Google Inc. All Rights Reserved.
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: output_info.proto

package pb

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// OutputInfo records output info from the tools.
type OutputInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Size of import/export sources (image/disk/file)
	SourcesSizeGb []int64 `protobuf:"varint,1,rep,packed,name=sources_size_gb,json=sourcesSizeGb,proto3" json:"sources_size_gb,omitempty"`
	// Size of import/export targets (image/disk/file)
	TargetsSizeGb []int64 `protobuf:"varint,2,rep,packed,name=targets_size_gb,json=targetsSizeGb,proto3" json:"targets_size_gb,omitempty"`
	// Failure message of the command
	FailureMessage string `protobuf:"bytes,3,opt,name=failure_message,json=failureMessage,proto3" json:"failure_message,omitempty"`
	// Failure message of the command without privacy info
	FailureMessageWithoutPrivacyInfo string `protobuf:"bytes,4,opt,name=failure_message_without_privacy_info,json=failureMessageWithoutPrivacyInfo,proto3" json:"failure_message_without_privacy_info,omitempty"`
	// Each element is the serial output log of a worker instance.
	// This is only populated if the workflow fails.
	SerialOutputs []string `protobuf:"bytes,5,rep,name=serial_outputs,json=serialOutputs,proto3" json:"serial_outputs,omitempty"`
	// Import file format
	ImportFileFormat string `protobuf:"bytes,6,opt,name=import_file_format,json=importFileFormat,proto3" json:"import_file_format,omitempty"`
	// Size of import/export sources (image/disk/file) that was detected.
	// sources_size_gb, in contrast, contains the actual value. Ideally
	// these values will match; a mismatch indicates an error in our
	// detection.
	DetectedSourcesSizeGb []int64 `protobuf:"varint,7,rep,packed,name=detected_sources_size_gb,json=detectedSourcesSizeGb,proto3" json:"detected_sources_size_gb,omitempty"`
	// Inflation type, which can be qemu or API.
	InflationType string `protobuf:"bytes,8,opt,name=inflation_type,json=inflationType,proto3" json:"inflation_type,omitempty"`
	// Inflation time
	InflationTimeMs []int64 `protobuf:"varint,9,rep,packed,name=inflation_time_ms,json=inflationTimeMs,proto3" json:"inflation_time_ms,omitempty"`
	// Inflation time of the shadow disk.  It's for new API validation.
	ShadowInflationTimeMs []int64 `protobuf:"varint,10,rep,packed,name=shadow_inflation_time_ms,json=shadowInflationTimeMs,proto3" json:"shadow_inflation_time_ms,omitempty"`
	// Shadow disk match result for shadow disk inflater. It's for new API
	// validation.
	ShadowDiskMatchResult string `protobuf:"bytes,11,opt,name=shadow_disk_match_result,json=shadowDiskMatchResult,proto3" json:"shadow_disk_match_result,omitempty"`
	// Indicates whether the image is imported and marked as UEFI_COMPATIBLE.
	IsUefiCompatibleImage bool `protobuf:"varint,12,opt,name=is_uefi_compatible_image,json=isUefiCompatibleImage,proto3" json:"is_uefi_compatible_image,omitempty"`
	// Indicates whether the image is auto-detected to be UEFI compatible.
	IsUefiDetected bool `protobuf:"varint,13,opt,name=is_uefi_detected,json=isUefiDetected,proto3" json:"is_uefi_detected,omitempty"`
	// Inspection results. Ref to the def of 'InspectionResults' to see details.
	InspectionResults *InspectionResults `protobuf:"bytes,14,opt,name=inspection_results,json=inspectionResults,proto3" json:"inspection_results,omitempty"`
}

func (x *OutputInfo) Reset() {
	*x = OutputInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_output_info_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutputInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputInfo) ProtoMessage() {}

func (x *OutputInfo) ProtoReflect() protoreflect.Message {
	mi := &file_output_info_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputInfo.ProtoReflect.Descriptor instead.
func (*OutputInfo) Descriptor() ([]byte, []int) {
	return file_output_info_proto_rawDescGZIP(), []int{0}
}

func (x *OutputInfo) GetSourcesSizeGb() []int64 {
	if x != nil {
		return x.SourcesSizeGb
	}
	return nil
}

func (x *OutputInfo) GetTargetsSizeGb() []int64 {
	if x != nil {
		return x.TargetsSizeGb
	}
	return nil
}

func (x *OutputInfo) GetFailureMessage() string {
	if x != nil {
		return x.FailureMessage
	}
	return ""
}

func (x *OutputInfo) GetFailureMessageWithoutPrivacyInfo() string {
	if x != nil {
		return x.FailureMessageWithoutPrivacyInfo
	}
	return ""
}

func (x *OutputInfo) GetSerialOutputs() []string {
	if x != nil {
		return x.SerialOutputs
	}
	return nil
}

func (x *OutputInfo) GetImportFileFormat() string {
	if x != nil {
		return x.ImportFileFormat
	}
	return ""
}

func (x *OutputInfo) GetDetectedSourcesSizeGb() []int64 {
	if x != nil {
		return x.DetectedSourcesSizeGb
	}
	return nil
}

func (x *OutputInfo) GetInflationType() string {
	if x != nil {
		return x.InflationType
	}
	return ""
}

func (x *OutputInfo) GetInflationTimeMs() []int64 {
	if x != nil {
		return x.InflationTimeMs
	}
	return nil
}

func (x *OutputInfo) GetShadowInflationTimeMs() []int64 {
	if x != nil {
		return x.ShadowInflationTimeMs
	}
	return nil
}

func (x *OutputInfo) GetShadowDiskMatchResult() string {
	if x != nil {
		return x.ShadowDiskMatchResult
	}
	return ""
}

func (x *OutputInfo) GetIsUefiCompatibleImage() bool {
	if x != nil {
		return x.IsUefiCompatibleImage
	}
	return false
}

func (x *OutputInfo) GetIsUefiDetected() bool {
	if x != nil {
		return x.IsUefiDetected
	}
	return false
}

func (x *OutputInfo) GetInspectionResults() *InspectionResults {
	if x != nil {
		return x.InspectionResults
	}
	return nil
}

var File_output_info_proto protoreflect.FileDescriptor

var file_output_info_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xce, 0x05, 0x0a, 0x0a, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x5f, 0x67, 0x62, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x47, 0x62, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x67, 0x62, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x47,
	0x62, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4e, 0x0a, 0x24, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x73, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x37, 0x0a, 0x18, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x67, 0x62, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x15, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x47, 0x62, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x66, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x69, 0x6e, 0x66, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x66, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0f, 0x69, 0x6e, 0x66, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x73,
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x66, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x03, 0x52, 0x15, 0x73,
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x4d, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5f, 0x64,
	0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x44, 0x69,
	0x73, 0x6b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x37, 0x0a,
	0x18, 0x69, 0x73, 0x5f, 0x75, 0x65, 0x66, 0x69, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69,
	0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x15, 0x69, 0x73, 0x55, 0x65, 0x66, 0x69, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c,
	0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x75, 0x65, 0x66,
	0x69, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x69, 0x73, 0x55, 0x65, 0x66, 0x69, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x12, 0x41, 0x0a, 0x12, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x49,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x52, 0x11, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_output_info_proto_rawDescOnce sync.Once
	file_output_info_proto_rawDescData = file_output_info_proto_rawDesc
)

func file_output_info_proto_rawDescGZIP() []byte {
	file_output_info_proto_rawDescOnce.Do(func() {
		file_output_info_proto_rawDescData = protoimpl.X.CompressGZIP(file_output_info_proto_rawDescData)
	})
	return file_output_info_proto_rawDescData
}

var file_output_info_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_output_info_proto_goTypes = []interface{}{
	(*OutputInfo)(nil),        // 0: OutputInfo
	(*InspectionResults)(nil), // 1: InspectionResults
}
var file_output_info_proto_depIdxs = []int32{
	1, // 0: OutputInfo.inspection_results:type_name -> InspectionResults
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_output_info_proto_init() }
func file_output_info_proto_init() {
	if File_output_info_proto != nil {
		return
	}
	file_inspect_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_output_info_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutputInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_output_info_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_output_info_proto_goTypes,
		DependencyIndexes: file_output_info_proto_depIdxs,
		MessageInfos:      file_output_info_proto_msgTypes,
	}.Build()
	File_output_info_proto = out.File
	file_output_info_proto_rawDesc = nil
	file_output_info_proto_goTypes = nil
	file_output_info_proto_depIdxs = nil
}
